/**
 * router-cli
 *
 * Copyright (c) TanStack
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var chokidar = require('chokidar');
var path = require('path');
var config = require('./config.js');
var generator = require('./generator.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var chokidar__default = /*#__PURE__*/_interopDefaultLegacy(chokidar);
var path__default = /*#__PURE__*/_interopDefaultLegacy(path);

async function watch() {
  const configWatcher = chokidar__default["default"].watch(path__default["default"].resolve(process.cwd(), 'tsr.config.js'));
  let watcher = new chokidar__default["default"].FSWatcher();
  const generatorWatcher = async () => {
    const config$1 = await config.getConfig();
    watcher.close();
    console.log("TSR: Watching routes (" + config$1.routesDirectory + ")...");
    watcher = chokidar__default["default"].watch(config$1.routesDirectory);
    watcher.on('ready', async () => {
      try {
        await generator.generator(config$1);
      } catch (err) {
        console.error(err);
        console.log();
      }
      const handle = async () => {
        try {
          await generator.generator(config$1);
        } catch (err) {
          console.error(err);
          console.log();
        }
      };
      watcher.on('change', handle);
      watcher.on('add', handle);
      watcher.on('addDir', handle);
      watcher.on('unlink', handle);
      watcher.on('unlinkDir', handle);
    });
  };
  configWatcher.on('ready', generatorWatcher);
  configWatcher.on('change', generatorWatcher);
}

exports.watch = watch;
//# sourceMappingURL=watch.js.map

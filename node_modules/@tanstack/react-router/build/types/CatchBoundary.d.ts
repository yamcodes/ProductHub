import * as React from 'react';
export declare function CatchBoundary(props: {
    resetKey: string;
    children: any;
    errorComponent?: any;
    onCatch: (error: any) => void;
}): JSX.Element;
export declare class CatchBoundaryImpl extends React.Component<{
    resetKey: string;
    children: (props: {
        error: any;
        reset: () => void;
    }) => any;
    onCatch?: (error: any) => void;
}> {
    state: any;
    static getDerivedStateFromError(error: any): {
        error: any;
    };
    componentDidUpdate(prevProps: Readonly<{
        resetKey: string;
        children: (props: {
            error: any;
            reset: () => void;
        }) => any;
        onCatch?: ((error: any, info: any) => void) | undefined;
    }>, prevState: any): void;
    componentDidCatch(error: any): void;
    render(): any;
}
export declare function ErrorComponent({ error }: {
    error: any;
}): JSX.Element;

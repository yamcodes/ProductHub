import { MatchLocation } from './RouterProvider';
import { AnyPathParams } from './route';
export interface Segment {
    type: 'pathname' | 'param' | 'wildcard';
    value: string;
}
export declare function joinPaths(paths: (string | undefined)[]): string;
export declare function cleanPath(path: string): string;
export declare function trimPathLeft(path: string): string;
export declare function trimPathRight(path: string): string;
export declare function trimPath(path: string): string;
export declare function resolvePath(basepath: string, base: string, to: string): string;
export declare function parsePathname(pathname?: string): Segment[];
export declare function interpolatePath(path: string | undefined, params: any, leaveWildcards?: boolean): string;
export declare function matchPathname(basepath: string, currentPathname: string, matchLocation: Pick<MatchLocation, 'to' | 'fuzzy' | 'caseSensitive'>): AnyPathParams | undefined;
export declare function matchByPath(basepath: string, from: string, matchLocation: Pick<MatchLocation, 'to' | 'caseSensitive' | 'fuzzy'>): Record<string, string> | undefined;

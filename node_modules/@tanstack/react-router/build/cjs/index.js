/**
 * @tanstack/react-router/src/index.tsx
 *
 * Copyright (c) TanStack
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var history = require('@tanstack/history');
var invariant = require('tiny-invariant');
var warning = require('tiny-warning');
var CatchBoundary = require('./CatchBoundary.js');
var fileRoute = require('./fileRoute.js');
var lazyRouteComponent = require('./lazyRouteComponent.js');
var link = require('./link.js');
var Matches = require('./Matches.js');
var path = require('./path.js');
var qss = require('./qss.js');
var redirects = require('./redirects.js');
var route = require('./route.js');
var router = require('./router.js');
var RouterProvider = require('./RouterProvider.js');
var scrollRestoration = require('./scroll-restoration.js');
var searchParams = require('./searchParams.js');
var useBlocker = require('./useBlocker.js');
var useNavigate = require('./useNavigate.js');
var useParams = require('./useParams.js');
var useSearch = require('./useSearch.js');
var utils = require('./utils.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var invariant__default = /*#__PURE__*/_interopDefaultLegacy(invariant);
var warning__default = /*#__PURE__*/_interopDefaultLegacy(warning);



Object.defineProperty(exports, 'invariant', {
	enumerable: true,
	get: function () { return invariant__default["default"]; }
});
Object.defineProperty(exports, 'warning', {
	enumerable: true,
	get: function () { return warning__default["default"]; }
});
exports.CatchBoundary = CatchBoundary.CatchBoundary;
exports.CatchBoundaryImpl = CatchBoundary.CatchBoundaryImpl;
exports.ErrorComponent = CatchBoundary.ErrorComponent;
exports.FileRoute = fileRoute.FileRoute;
exports.lazyRouteComponent = lazyRouteComponent.lazyRouteComponent;
exports.Link = link.Link;
exports.useLinkProps = link.useLinkProps;
exports.Match = Matches.Match;
exports.MatchRoute = Matches.MatchRoute;
exports.Matches = Matches.Matches;
exports.Outlet = Matches.Outlet;
exports.matchesContext = Matches.matchesContext;
exports.useMatch = Matches.useMatch;
exports.useMatchRoute = Matches.useMatchRoute;
exports.useMatches = Matches.useMatches;
exports.cleanPath = path.cleanPath;
exports.interpolatePath = path.interpolatePath;
exports.joinPaths = path.joinPaths;
exports.matchByPath = path.matchByPath;
exports.matchPathname = path.matchPathname;
exports.parsePathname = path.parsePathname;
exports.resolvePath = path.resolvePath;
exports.trimPath = path.trimPath;
exports.trimPathLeft = path.trimPathLeft;
exports.trimPathRight = path.trimPathRight;
exports.decode = qss.decode;
exports.encode = qss.encode;
exports.isRedirect = redirects.isRedirect;
exports.redirect = redirects.redirect;
exports.RootRoute = route.RootRoute;
exports.Route = route.Route;
exports.createRouteMask = route.createRouteMask;
exports.rootRouteId = route.rootRouteId;
exports.rootRouteWithContext = route.rootRouteWithContext;
exports.Router = router.Router;
exports.componentTypes = router.componentTypes;
exports.lazyFn = router.lazyFn;
exports.PathParamError = RouterProvider.PathParamError;
exports.RouterProvider = RouterProvider.RouterProvider;
exports.SearchParamError = RouterProvider.SearchParamError;
exports.getInitialRouterState = RouterProvider.getInitialRouterState;
exports.getRouteMatch = RouterProvider.getRouteMatch;
exports.routerContext = RouterProvider.routerContext;
exports.useRouter = RouterProvider.useRouter;
exports.useRouterState = RouterProvider.useRouterState;
exports.ScrollRestoration = scrollRestoration.ScrollRestoration;
exports.useScrollRestoration = scrollRestoration.useScrollRestoration;
exports.defaultParseSearch = searchParams.defaultParseSearch;
exports.defaultStringifySearch = searchParams.defaultStringifySearch;
exports.parseSearchWith = searchParams.parseSearchWith;
exports.stringifySearchWith = searchParams.stringifySearchWith;
exports.Block = useBlocker.Block;
exports.useBlocker = useBlocker.useBlocker;
exports.Navigate = useNavigate.Navigate;
exports.typedNavigate = useNavigate.typedNavigate;
exports.useNavigate = useNavigate.useNavigate;
exports.useParams = useParams.useParams;
exports.useSearch = useSearch.useSearch;
exports.functionalUpdate = utils.functionalUpdate;
exports.isPlainObject = utils.isPlainObject;
exports.isServer = utils.isServer;
exports.last = utils.last;
exports.partialDeepEqual = utils.partialDeepEqual;
exports.pick = utils.pick;
exports.replaceEqualDeep = utils.replaceEqualDeep;
exports.shallow = utils.shallow;
exports.useLayoutEffect = utils.useLayoutEffect;
exports.useRouteContext = utils.useRouteContext;
exports.useStableCallback = utils.useStableCallback;
Object.keys(history).forEach(function (k) {
	if (k !== 'default' && !exports.hasOwnProperty(k)) Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () { return history[k]; }
	});
});
//# sourceMappingURL=index.js.map

{"version":3,"file":"index.production.js","sources":["../../../history/build/esm/index.js","../../../../node_modules/.pnpm/tiny-invariant@1.3.1/node_modules/tiny-invariant/dist/esm/tiny-invariant.js","../../../../node_modules/.pnpm/tiny-warning@1.0.3/node_modules/tiny-warning/dist/tiny-warning.esm.js","../../src/CatchBoundary.tsx","../../src/utils.ts","../../src/path.ts","../../src/redirects.ts","../../src/qss.ts","../../src/searchParams.ts","../../src/router.ts","../../src/RouterProvider.tsx","../../src/Matches.tsx","../../src/useParams.tsx","../../src/useSearch.tsx","../../src/route.ts","../../src/link.tsx","../../src/scroll-restoration.tsx","../../src/useBlocker.tsx","../../src/fileRoute.ts","../../src/useNavigate.tsx","../../src/lazyRouteComponent.tsx"],"sourcesContent":["/**\n * @tanstack/history/src/index.ts\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n// While the public API was clearly inspired by the \"history\" npm package,\n// This implementation attempts to be more lightweight by\n// making assumptions about the way TanStack Router works\n\nconst pushStateEvent = 'pushstate';\nconst popStateEvent = 'popstate';\nconst beforeUnloadEvent = 'beforeunload';\nconst beforeUnloadListener = event => {\n  event.preventDefault();\n  // @ts-ignore\n  return event.returnValue = '';\n};\nconst stopBlocking = () => {\n  removeEventListener(beforeUnloadEvent, beforeUnloadListener, {\n    capture: true\n  });\n};\nfunction createHistory(opts) {\n  let location = opts.getLocation();\n  let subscribers = new Set();\n  let blockers = [];\n  let queue = [];\n  const onUpdate = () => {\n    location = opts.getLocation();\n    subscribers.forEach(subscriber => subscriber());\n  };\n  const tryUnblock = () => {\n    if (blockers.length) {\n      blockers[0]?.(tryUnblock, () => {\n        blockers = [];\n        stopBlocking();\n      });\n      return;\n    }\n    while (queue.length) {\n      queue.shift()?.();\n    }\n  };\n  const queueTask = task => {\n    queue.push(task);\n    tryUnblock();\n  };\n  return {\n    get location() {\n      return location;\n    },\n    subscribe: cb => {\n      subscribers.add(cb);\n      return () => {\n        subscribers.delete(cb);\n      };\n    },\n    push: (path, state) => {\n      state = assignKey(state);\n      queueTask(() => {\n        opts.pushState(path, state, onUpdate);\n      });\n    },\n    replace: (path, state) => {\n      state = assignKey(state);\n      queueTask(() => {\n        opts.replaceState(path, state, onUpdate);\n      });\n    },\n    go: index => {\n      queueTask(() => {\n        opts.go(index);\n      });\n    },\n    back: () => {\n      queueTask(() => {\n        opts.back();\n      });\n    },\n    forward: () => {\n      queueTask(() => {\n        opts.forward();\n      });\n    },\n    createHref: str => opts.createHref(str),\n    block: cb => {\n      blockers.push(cb);\n      if (blockers.length === 1) {\n        addEventListener(beforeUnloadEvent, beforeUnloadListener, {\n          capture: true\n        });\n      }\n      return () => {\n        blockers = blockers.filter(b => b !== cb);\n        if (!blockers.length) {\n          stopBlocking();\n        }\n      };\n    },\n    flush: () => opts.flush?.(),\n    destroy: () => opts.destroy?.(),\n    notify: onUpdate\n  };\n}\nfunction assignKey(state) {\n  if (!state) {\n    state = {};\n  }\n  return {\n    ...state,\n    key: createRandomKey()\n  };\n}\n\n/**\n * Creates a history object that can be used to interact with the browser's\n * navigation. This is a lightweight API wrapping the browser's native methods.\n * It is designed to work with TanStack Router, but could be used as a standalone API as well.\n * IMPORTANT: This API implements history throttling via a microtask to prevent\n * excessive calls to the history API. In some browsers, calling history.pushState or\n * history.replaceState in quick succession can cause the browser to ignore subsequent\n * calls. This API smooths out those differences and ensures that your application\n * state will *eventually* match the browser state. In most cases, this is not a problem,\n * but if you need to ensure that the browser state is up to date, you can use the\n * `history.flush` method to immediately flush all pending state changes to the browser URL.\n * @param opts\n * @param opts.getHref A function that returns the current href (path + search + hash)\n * @param opts.createHref A function that takes a path and returns a href (path + search + hash)\n * @returns A history instance\n */\nfunction createBrowserHistory(opts) {\n  const getHref = opts?.getHref ?? (() => `${window.location.pathname}${window.location.search}${window.location.hash}`);\n  const createHref = opts?.createHref ?? (path => path);\n  let currentLocation = parseLocation(getHref(), window.history.state);\n  const getLocation = () => currentLocation;\n  let next;\n\n  // Because we are proactively updating the location\n  // in memory before actually updating the browser history,\n  // we need to track when we are doing this so we don't\n  // notify subscribers twice on the last update.\n  let tracking = true;\n\n  // We need to track the current scheduled update to prevent\n  // multiple updates from being scheduled at the same time.\n  let scheduled;\n\n  // This function is a wrapper to prevent any of the callback's\n  // side effects from causing a subscriber notification\n  const untrack = fn => {\n    tracking = false;\n    fn();\n    tracking = true;\n  };\n\n  // This function flushes the next update to the browser history\n  const flush = () => {\n    // Do not notify subscribers about this push/replace call\n    untrack(() => {\n      if (!next) return;\n      window.history[next.isPush ? 'pushState' : 'replaceState'](next.state, '', next.href);\n      // Reset the nextIsPush flag and clear the scheduled update\n      next = undefined;\n      scheduled = undefined;\n    });\n  };\n\n  // This function queues up a call to update the browser history\n  const queueHistoryAction = (type, path, state, onUpdate) => {\n    const href = createHref(path);\n\n    // Update the location in memory\n    currentLocation = parseLocation(href, state);\n\n    // Keep track of the next location we need to flush to the URL\n    next = {\n      href,\n      state,\n      isPush: next?.isPush || type === 'push'\n    };\n    // Notify subscribers\n    onUpdate();\n    if (!scheduled) {\n      // Schedule an update to the browser history\n      scheduled = Promise.resolve().then(() => flush());\n    }\n  };\n  const onPushPop = () => {\n    currentLocation = parseLocation(getHref(), window.history.state);\n    history.notify();\n  };\n  var originalPushState = window.history.pushState;\n  var originalReplaceState = window.history.replaceState;\n  const history = createHistory({\n    getLocation,\n    pushState: (path, state, onUpdate) => queueHistoryAction('push', path, state, onUpdate),\n    replaceState: (path, state, onUpdate) => queueHistoryAction('replace', path, state, onUpdate),\n    back: () => window.history.back(),\n    forward: () => window.history.forward(),\n    go: n => window.history.go(n),\n    createHref: path => createHref(path),\n    flush,\n    destroy: () => {\n      window.history.pushState = originalPushState;\n      window.history.replaceState = originalReplaceState;\n      window.removeEventListener(pushStateEvent, onPushPop);\n      window.removeEventListener(popStateEvent, onPushPop);\n    }\n  });\n  window.addEventListener(pushStateEvent, onPushPop);\n  window.addEventListener(popStateEvent, onPushPop);\n  window.history.pushState = function () {\n    let res = originalPushState.apply(window.history, arguments);\n    if (tracking) history.notify();\n    return res;\n  };\n  window.history.replaceState = function () {\n    let res = originalReplaceState.apply(window.history, arguments);\n    if (tracking) history.notify();\n    return res;\n  };\n  return history;\n}\nfunction createHashHistory() {\n  return createBrowserHistory({\n    getHref: () => window.location.hash.substring(1),\n    createHref: path => `#${path}`\n  });\n}\nfunction createMemoryHistory(opts = {\n  initialEntries: ['/']\n}) {\n  const entries = opts.initialEntries;\n  let index = opts.initialIndex ?? entries.length - 1;\n  let currentState = {\n    key: createRandomKey()\n  };\n  const getLocation = () => parseLocation(entries[index], currentState);\n  return createHistory({\n    getLocation,\n    pushState: (path, state) => {\n      currentState = state;\n      entries.push(path);\n      index++;\n    },\n    replaceState: (path, state) => {\n      currentState = state;\n      entries[index] = path;\n    },\n    back: () => {\n      index--;\n    },\n    forward: () => {\n      index = Math.min(index + 1, entries.length - 1);\n    },\n    go: n => window.history.go(n),\n    createHref: path => path\n  });\n}\nfunction parseLocation(href, state) {\n  let hashIndex = href.indexOf('#');\n  let searchIndex = href.indexOf('?');\n  return {\n    href,\n    pathname: href.substring(0, hashIndex > 0 ? searchIndex > 0 ? Math.min(hashIndex, searchIndex) : hashIndex : searchIndex > 0 ? searchIndex : href.length),\n    hash: hashIndex > -1 ? href.substring(hashIndex) : '',\n    search: searchIndex > -1 ? href.slice(searchIndex, hashIndex === -1 ? undefined : hashIndex) : '',\n    state: state || {}\n  };\n}\n\n// Thanks co-pilot!\nfunction createRandomKey() {\n  return (Math.random() + 1).toString(36).substring(7);\n}\n\nexport { createBrowserHistory, createHashHistory, createMemoryHistory };\n//# sourceMappingURL=index.js.map\n","var isProduction = process.env.NODE_ENV === 'production';\nvar prefix = 'Invariant failed';\nfunction invariant(condition, message) {\n    if (condition) {\n        return;\n    }\n    if (isProduction) {\n        throw new Error(prefix);\n    }\n    var provided = typeof message === 'function' ? message() : message;\n    var value = provided ? \"\".concat(prefix, \": \").concat(provided) : prefix;\n    throw new Error(value);\n}\n\nexport { invariant as default };\n","var isProduction = process.env.NODE_ENV === 'production';\nfunction warning(condition, message) {\n  if (!isProduction) {\n    if (condition) {\n      return;\n    }\n\n    var text = \"Warning: \" + message;\n\n    if (typeof console !== 'undefined') {\n      console.warn(text);\n    }\n\n    try {\n      throw Error(text);\n    } catch (x) {}\n  }\n}\n\nexport default warning;\n","import * as React from 'react'\n\nexport function CatchBoundary(props: {\n  resetKey: string\n  children: any\n  errorComponent?: any\n  onCatch: (error: any) => void\n}) {\n  const errorComponent = props.errorComponent ?? ErrorComponent\n\n  return (\n    <CatchBoundaryImpl\n      resetKey={props.resetKey}\n      onCatch={props.onCatch}\n      children={({ error }) => {\n        if (error) {\n          return React.createElement(errorComponent, {\n            error,\n          })\n        }\n\n        return props.children\n      }}\n    />\n  )\n}\n\nexport class CatchBoundaryImpl extends React.Component<{\n  resetKey: string\n  children: (props: { error: any; reset: () => void }) => any\n  onCatch?: (error: any) => void\n}> {\n  state = { error: null } as any\n  static getDerivedStateFromError(error: any) {\n    return { error }\n  }\n  componentDidUpdate(\n    prevProps: Readonly<{\n      resetKey: string\n      children: (props: { error: any; reset: () => void }) => any\n      onCatch?: ((error: any, info: any) => void) | undefined\n    }>,\n    prevState: any,\n  ): void {\n    if (prevState.error && prevProps.resetKey !== this.props.resetKey) {\n      this.setState({ error: null })\n    }\n  }\n  componentDidCatch(error: any) {\n    console.error(error)\n    this.props.onCatch?.(error)\n  }\n  render() {\n    return this.props.children(this.state)\n  }\n}\n\nexport function ErrorComponent({ error }: { error: any }) {\n  const [show, setShow] = React.useState(process.env.NODE_ENV !== 'production')\n\n  return (\n    <div style={{ padding: '.5rem', maxWidth: '100%' }}>\n      <div style={{ display: 'flex', alignItems: 'center', gap: '.5rem' }}>\n        <strong style={{ fontSize: '1rem' }}>Something went wrong!</strong>\n        <button\n          style={{\n            appearance: 'none',\n            fontSize: '.6em',\n            border: '1px solid currentColor',\n            padding: '.1rem .2rem',\n            fontWeight: 'bold',\n            borderRadius: '.25rem',\n          }}\n          onClick={() => setShow((d) => !d)}\n        >\n          {show ? 'Hide Error' : 'Show Error'}\n        </button>\n      </div>\n      <div style={{ height: '.25rem' }} />\n      {show ? (\n        <div>\n          <pre\n            style={{\n              fontSize: '.7em',\n              border: '1px solid red',\n              borderRadius: '.25rem',\n              padding: '.3rem',\n              color: 'red',\n              overflow: 'auto',\n            }}\n          >\n            {error.message ? <code>{error.message}</code> : null}\n          </pre>\n        </div>\n      ) : null}\n    </div>\n  )\n}\n","import * as React from 'react'\nimport { useMatch } from './Matches'\nimport { RouteMatch } from './RouterProvider'\nimport { AnyRoute } from './route'\nimport { ParseRoute, RouteIds, RoutesById, RouteById } from './routeInfo'\nimport { RegisteredRouter } from './router'\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\nexport type IsAny<T, Y, N = T> = 1 extends 0 & T ? Y : N\nexport type IsAnyBoolean<T> = 1 extends 0 & T ? true : false\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\nexport type PickAsRequired<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type PickAsPartial<T, K extends keyof T> = Omit<T, K> &\n  Partial<Pick<T, K>>\nexport type PickUnsafe<T, K> = K extends keyof T ? Pick<T, K> : never\nexport type PickExtra<T, K> = {\n  [TKey in keyof K as string extends TKey\n    ? never\n    : TKey extends keyof T\n    ? never\n    : TKey]: K[TKey]\n}\n\nexport type PickRequired<T> = {\n  [K in keyof T as undefined extends T[K] ? never : K]: T[K]\n}\n\n// export type Expand<T> = T\nexport type Expand<T> = T extends object\n  ? T extends infer O\n    ? { [K in keyof O]: O[K] }\n    : never\n  : T\n\nexport type UnionToIntersection<U> = (\n  U extends any ? (k: U) => void : never\n) extends (k: infer I) => any\n  ? I\n  : never\n\n// type Compute<T> = { [K in keyof T]: T[K] } | never\n\n// type AllKeys<T> = T extends any ? keyof T : never\n\n// export type MergeUnion<T, Keys extends keyof T = keyof T> = Compute<\n//   {\n//     [K in Keys]: T[Keys]\n//   } & {\n//     [K in AllKeys<T>]?: T extends any\n//       ? K extends keyof T\n//         ? T[K]\n//         : never\n//       : never\n//   }\n// >\n\nexport type Assign<Left, Right> = Omit<Left, keyof Right> & Right\n\nexport type AssignAll<T extends any[]> = T extends [infer Left, ...infer Right]\n  ? Right extends any[]\n    ? Assign<Left, AssignAll<Right>>\n    : Left\n  : {}\n\n// // Sample types to merge\n// type TypeA = {\n//   shared: string\n//   onlyInA: string\n//   nested: {\n//     shared: string\n//     aProp: string\n//   }\n//   array: string[]\n// }\n\n// type TypeB = {\n//   shared: number\n//   onlyInB: number\n//   nested: {\n//     shared: number\n//     bProp: number\n//   }\n//   array: number[]\n// }\n\n// type TypeC = {\n//   shared: boolean\n//   onlyInC: boolean\n//   nested: {\n//     shared: boolean\n//     cProp: boolean\n//   }\n//   array: boolean[]\n// }\n\n// type Test = Expand<Assign<TypeA, TypeB>>\n\n// // Using DeepMerge to merge TypeA and TypeB\n// type MergedType = Expand<AssignAll<[TypeA, TypeB, TypeC]>>\n\nexport type Values<O> = O[ValueKeys<O>]\nexport type ValueKeys<O> = Extract<keyof O, PropertyKey>\n\nexport type DeepAwaited<T> = T extends Promise<infer A>\n  ? DeepAwaited<A>\n  : T extends Record<infer A, Promise<infer B>>\n  ? { [K in A]: DeepAwaited<B> }\n  : T\n\nexport type PathParamMask<TRoutePath extends string> =\n  TRoutePath extends `${infer L}/$${infer C}/${infer R}`\n    ? PathParamMask<`${L}/${string}/${R}`>\n    : TRoutePath extends `${infer L}/$${infer C}`\n    ? PathParamMask<`${L}/${string}`>\n    : TRoutePath\n\nexport type Timeout = ReturnType<typeof setTimeout>\n\nexport type Updater<TPrevious, TResult = TPrevious> =\n  | TResult\n  | ((prev?: TPrevious) => TResult)\n\nexport type NonNullableUpdater<TPrevious, TResult = TPrevious> =\n  | TResult\n  | ((prev: TPrevious) => TResult)\n\nexport type PickExtract<T, U> = {\n  [K in keyof T as T[K] extends U ? K : never]: T[K]\n}\n\nexport type PickExclude<T, U> = {\n  [K in keyof T as T[K] extends U ? never : K]: T[K]\n}\n\n//\n\nexport const isServer = typeof document === 'undefined'\n\nexport function last<T>(arr: T[]) {\n  return arr[arr.length - 1]\n}\n\nfunction isFunction(d: any): d is Function {\n  return typeof d === 'function'\n}\n\nexport function functionalUpdate<TResult>(\n  updater: Updater<TResult> | NonNullableUpdater<TResult>,\n  previous: TResult,\n): TResult {\n  if (isFunction(updater)) {\n    return updater(previous as TResult)\n  }\n\n  return updater\n}\n\nexport function pick<T, K extends keyof T>(parent: T, keys: K[]): Pick<T, K> {\n  return keys.reduce((obj: any, key: K) => {\n    obj[key] = parent[key]\n    return obj\n  }, {} as any)\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between immutable JSON values for example.\n * Do not use this with signals\n */\nexport function replaceEqualDeep<T>(prev: any, _next: T): T {\n  if (prev === _next) {\n    return prev\n  }\n\n  const next = _next as any\n\n  const array = Array.isArray(prev) && Array.isArray(next)\n\n  if (array || (isPlainObject(prev) && isPlainObject(next))) {\n    const prevSize = array ? prev.length : Object.keys(prev).length\n    const nextItems = array ? next : Object.keys(next)\n    const nextSize = nextItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < nextSize; i++) {\n      const key = array ? i : nextItems[i]\n      copy[key] = replaceEqualDeep(prev[key], next[key])\n      if (copy[key] === prev[key]) {\n        equalItems++\n      }\n    }\n\n    return prevSize === nextSize && equalItems === prevSize ? prev : copy\n  }\n\n  return next\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\nexport function isPlainObject(o: any) {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has modified constructor\n  const ctor = o.constructor\n  if (typeof ctor === 'undefined') {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any) {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function partialDeepEqual(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (isPlainObject(a) && isPlainObject(b)) {\n    return !Object.keys(b).some((key) => !partialDeepEqual(a[key], b[key]))\n  }\n\n  if (Array.isArray(a) && Array.isArray(b)) {\n    return !(\n      a.length !== b.length ||\n      a.some((item, index) => !partialDeepEqual(item, b[index]))\n    )\n  }\n\n  return false\n}\n\nexport function useStableCallback<T extends (...args: any[]) => any>(fn: T): T {\n  const fnRef = React.useRef(fn)\n  fnRef.current = fn\n\n  const ref = React.useRef((...args: any[]) => fnRef.current(...args))\n  return ref.current as T\n}\n\nexport function shallow<T>(objA: T, objB: T) {\n  if (Object.is(objA, objB)) {\n    return true\n  }\n\n  if (\n    typeof objA !== 'object' ||\n    objA === null ||\n    typeof objB !== 'object' ||\n    objB === null\n  ) {\n    return false\n  }\n\n  const keysA = Object.keys(objA)\n  if (keysA.length !== Object.keys(objB).length) {\n    return false\n  }\n\n  for (let i = 0; i < keysA.length; i++) {\n    if (\n      !Object.prototype.hasOwnProperty.call(objB, keysA[i] as string) ||\n      !Object.is(objA[keysA[i] as keyof T], objB[keysA[i] as keyof T])\n    ) {\n      return false\n    }\n  }\n  return true\n}\n\nexport type StrictOrFrom<TFrom> =\n  | {\n      from: TFrom\n      strict?: true\n    }\n  | {\n      from?: never\n      strict: false\n    }\n\nexport type RouteFromIdOrRoute<\n  T,\n  TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n> = T extends ParseRoute<TRouteTree>\n  ? T\n  : T extends RouteIds<TRouteTree>\n  ? RoutesById<TRouteTree>[T]\n  : T extends string\n  ? RouteIds<TRouteTree>\n  : never\n\nexport function useRouteContext<\n  TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n  TFrom extends RouteIds<TRouteTree> = RouteIds<TRouteTree>,\n  TStrict extends boolean = true,\n  TRouteContext = RouteById<TRouteTree, TFrom>['types']['allContext'],\n  TSelected = TRouteContext,\n>(\n  opts: StrictOrFrom<TFrom> & {\n    select?: (search: TRouteContext) => TSelected\n  },\n): TStrict extends true ? TSelected : TSelected | undefined {\n  return useMatch({\n    ...(opts as any),\n    select: (match: RouteMatch) =>\n      opts?.select\n        ? opts.select(match.context as TRouteContext)\n        : match.context,\n  })\n}\n\nexport const useLayoutEffect =\n  typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect\n","import { MatchLocation } from './RouterProvider'\nimport { AnyPathParams } from './route'\nimport { last } from './utils'\n\nexport interface Segment {\n  type: 'pathname' | 'param' | 'wildcard'\n  value: string\n}\n\nexport function joinPaths(paths: (string | undefined)[]) {\n  return cleanPath(paths.filter(Boolean).join('/'))\n}\n\nexport function cleanPath(path: string) {\n  // remove double slashes\n  return path.replace(/\\/{2,}/g, '/')\n}\n\nexport function trimPathLeft(path: string) {\n  return path === '/' ? path : path.replace(/^\\/{1,}/, '')\n}\n\nexport function trimPathRight(path: string) {\n  return path === '/' ? path : path.replace(/\\/{1,}$/, '')\n}\n\nexport function trimPath(path: string) {\n  return trimPathRight(trimPathLeft(path))\n}\n\nexport function resolvePath(basepath: string, base: string, to: string) {\n  base = base.replace(new RegExp(`^${basepath}`), '/')\n  to = to.replace(new RegExp(`^${basepath}`), '/')\n\n  let baseSegments = parsePathname(base)\n  const toSegments = parsePathname(to)\n\n  toSegments.forEach((toSegment, index) => {\n    if (toSegment.value === '/') {\n      if (!index) {\n        // Leading slash\n        baseSegments = [toSegment]\n      } else if (index === toSegments.length - 1) {\n        // Trailing Slash\n        baseSegments.push(toSegment)\n      } else {\n        // ignore inter-slashes\n      }\n    } else if (toSegment.value === '..') {\n      // Extra trailing slash? pop it off\n      if (baseSegments.length > 1 && last(baseSegments)?.value === '/') {\n        baseSegments.pop()\n      }\n      baseSegments.pop()\n    } else if (toSegment.value === '.') {\n      return\n    } else {\n      baseSegments.push(toSegment)\n    }\n  })\n\n  const joined = joinPaths([basepath, ...baseSegments.map((d) => d.value)])\n\n  return cleanPath(joined)\n}\n\nexport function parsePathname(pathname?: string): Segment[] {\n  if (!pathname) {\n    return []\n  }\n\n  pathname = cleanPath(pathname)\n\n  const segments: Segment[] = []\n\n  if (pathname.slice(0, 1) === '/') {\n    pathname = pathname.substring(1)\n    segments.push({\n      type: 'pathname',\n      value: '/',\n    })\n  }\n\n  if (!pathname) {\n    return segments\n  }\n\n  // Remove empty segments and '.' segments\n  const split = pathname.split('/').filter(Boolean)\n\n  segments.push(\n    ...split.map((part): Segment => {\n      if (part === '$' || part === '*') {\n        return {\n          type: 'wildcard',\n          value: part,\n        }\n      }\n\n      if (part.charAt(0) === '$') {\n        return {\n          type: 'param',\n          value: part,\n        }\n      }\n\n      return {\n        type: 'pathname',\n        value: part,\n      }\n    }),\n  )\n\n  if (pathname.slice(-1) === '/') {\n    pathname = pathname.substring(1)\n    segments.push({\n      type: 'pathname',\n      value: '/',\n    })\n  }\n\n  return segments\n}\n\nexport function interpolatePath(\n  path: string | undefined,\n  params: any,\n  leaveWildcards: boolean = false,\n) {\n  const interpolatedPathSegments = parsePathname(path)\n\n  return joinPaths(\n    interpolatedPathSegments.map((segment) => {\n      if (segment.type === 'wildcard') {\n        const value = params[segment.value]\n        if (leaveWildcards) return `${segment.value}${value ?? ''}`\n        return value\n      }\n\n      if (segment.type === 'param') {\n        return params![segment.value.substring(1)] ?? ''\n      }\n\n      return segment.value\n    }),\n  )\n}\n\nexport function matchPathname(\n  basepath: string,\n  currentPathname: string,\n  matchLocation: Pick<MatchLocation, 'to' | 'fuzzy' | 'caseSensitive'>,\n): AnyPathParams | undefined {\n  const pathParams = matchByPath(basepath, currentPathname, matchLocation)\n  // const searchMatched = matchBySearch(location.search, matchLocation)\n\n  if (matchLocation.to && !pathParams) {\n    return\n  }\n\n  return pathParams ?? {}\n}\n\nexport function matchByPath(\n  basepath: string,\n  from: string,\n  matchLocation: Pick<MatchLocation, 'to' | 'caseSensitive' | 'fuzzy'>,\n): Record<string, string> | undefined {\n  // Remove the base path from the pathname\n  from = basepath != '/' ? from.substring(basepath.length) : from\n  // Default to to $ (wildcard)\n  const to = `${matchLocation.to ?? '$'}`\n  // Parse the from and to\n  const baseSegments = parsePathname(from)\n  const routeSegments = parsePathname(to)\n\n  if (!from.startsWith('/')) {\n    baseSegments.unshift({\n      type: 'pathname',\n      value: '/',\n    })\n  }\n\n  if (!to.startsWith('/')) {\n    routeSegments.unshift({\n      type: 'pathname',\n      value: '/',\n    })\n  }\n\n  const params: Record<string, string> = {}\n\n  let isMatch = (() => {\n    for (\n      let i = 0;\n      i < Math.max(baseSegments.length, routeSegments.length);\n      i++\n    ) {\n      const baseSegment = baseSegments[i]\n      const routeSegment = routeSegments[i]\n\n      const isLastBaseSegment = i >= baseSegments.length - 1\n      const isLastRouteSegment = i >= routeSegments.length - 1\n\n      if (routeSegment) {\n        if (routeSegment.type === 'wildcard') {\n          if (baseSegment?.value) {\n            params['*'] = joinPaths(baseSegments.slice(i).map((d) => d.value))\n            return true\n          }\n          return false\n        }\n\n        if (routeSegment.type === 'pathname') {\n          if (routeSegment.value === '/' && !baseSegment?.value) {\n            return true\n          }\n\n          if (baseSegment) {\n            if (matchLocation.caseSensitive) {\n              if (routeSegment.value !== baseSegment.value) {\n                return false\n              }\n            } else if (\n              routeSegment.value.toLowerCase() !==\n              baseSegment.value.toLowerCase()\n            ) {\n              return false\n            }\n          }\n        }\n\n        if (!baseSegment) {\n          return false\n        }\n\n        if (routeSegment.type === 'param') {\n          if (baseSegment?.value === '/') {\n            return false\n          }\n          if (baseSegment.value.charAt(0) !== '$') {\n            params[routeSegment.value.substring(1)] = baseSegment.value\n          }\n        }\n      }\n\n      if (!isLastBaseSegment && isLastRouteSegment) {\n        return !!matchLocation.fuzzy\n      }\n    }\n\n    return true\n  })()\n\n  return isMatch ? (params as Record<string, string>) : undefined\n}\n","import { NavigateOptions } from './link'\nimport { AnyRoute } from './route'\nimport { RoutePaths } from './routeInfo'\nimport { RegisteredRouter } from './router'\n\n// Detect if we're in the DOM\n\nexport type AnyRedirect = Redirect<any, any, any>\n\nexport type Redirect<\n  TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n  TFrom extends RoutePaths<TRouteTree> = '/',\n  TTo extends string = '',\n  TMaskFrom extends RoutePaths<TRouteTree> = TFrom,\n  TMaskTo extends string = '',\n> = NavigateOptions<TRouteTree, TFrom, TTo, TMaskFrom, TMaskTo> & {\n  code?: number\n}\n\nexport function redirect<\n  TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n  TFrom extends RoutePaths<TRouteTree> = '/',\n  TTo extends string = '',\n>(opts: Redirect<TRouteTree, TFrom, TTo>): Redirect<TRouteTree, TFrom, TTo> {\n  ;(opts as any).isRedirect = true\n  return opts\n}\n\nexport function isRedirect(obj: any): obj is AnyRedirect {\n  return !!obj?.isRedirect\n}\n","// @ts-nocheck\n\n// qss has been slightly modified and inlined here for our use cases (and compression's sake). We've included it as a hard dependency for MIT license attribution.\n\nexport function encode(obj, pfx?: string) {\n  var k,\n    i,\n    tmp,\n    str = ''\n\n  for (k in obj) {\n    if ((tmp = obj[k]) !== void 0) {\n      if (Array.isArray(tmp)) {\n        for (i = 0; i < tmp.length; i++) {\n          str && (str += '&')\n          str += encodeURIComponent(k) + '=' + encodeURIComponent(tmp[i])\n        }\n      } else {\n        str && (str += '&')\n        str += encodeURIComponent(k) + '=' + encodeURIComponent(tmp)\n      }\n    }\n  }\n\n  return (pfx || '') + str\n}\n\nfunction toValue(mix) {\n  if (!mix) return ''\n  var str = decodeURIComponent(mix)\n  if (str === 'false') return false\n  if (str === 'true') return true\n  return +str * 0 === 0 && +str + '' === str ? +str : str\n}\n\nexport function decode(str) {\n  var tmp,\n    k,\n    out = {},\n    arr = str.split('&')\n\n  while ((tmp = arr.shift())) {\n    tmp = tmp.split('=')\n    k = tmp.shift()\n    if (out[k] !== void 0) {\n      out[k] = [].concat(out[k], toValue(tmp.shift()))\n    } else {\n      out[k] = toValue(tmp.shift())\n    }\n  }\n\n  return out\n}\n","import { decode, encode } from './qss'\nimport { AnySearchSchema } from './route'\n\nexport const defaultParseSearch = parseSearchWith(JSON.parse)\nexport const defaultStringifySearch = stringifySearchWith(\n  JSON.stringify,\n  JSON.parse,\n)\n\nexport function parseSearchWith(parser: (str: string) => any) {\n  return (searchStr: string): AnySearchSchema => {\n    if (searchStr.substring(0, 1) === '?') {\n      searchStr = searchStr.substring(1)\n    }\n\n    let query: Record<string, unknown> = decode(searchStr)\n\n    // Try to parse any query params that might be json\n    for (let key in query) {\n      const value = query[key]\n      if (typeof value === 'string') {\n        try {\n          query[key] = parser(value)\n        } catch (err) {\n          //\n        }\n      }\n    }\n\n    return query\n  }\n}\n\nexport function stringifySearchWith(\n  stringify: (search: any) => string,\n  parser?: (str: string) => any,\n) {\n  function stringifyValue(val: any) {\n    if (typeof val === 'object' && val !== null) {\n      try {\n        return stringify(val)\n      } catch (err) {\n        // silent\n      }\n    } else if (typeof val === 'string' && typeof parser === 'function') {\n      try {\n        // Check if it's a valid parseable string.\n        // If it is, then stringify it again.\n        parser(val)\n        return stringify(val)\n      } catch (err) {\n        // silent\n      }\n    }\n    return val\n  }\n\n  return (search: Record<string, any>) => {\n    search = { ...search }\n\n    if (search) {\n      Object.keys(search).forEach((key) => {\n        const val = search[key]\n        if (typeof val === 'undefined' || val === undefined) {\n          delete search[key]\n        } else {\n          search[key] = stringifyValue(val)\n        }\n      })\n    }\n\n    const searchStr = encode(search as Record<string, string>).toString()\n\n    return searchStr ? `?${searchStr}` : ''\n  }\n}\n\nexport type SearchSerializer = (searchObj: Record<string, any>) => string\nexport type SearchParser = (searchStr: string) => Record<string, any>\n","import { RouterHistory } from '@tanstack/history'\n\n//\n\nimport {\n  AnySearchSchema,\n  AnyRoute,\n  AnyContext,\n  AnyPathParams,\n  RouteMask,\n} from './route'\nimport { FullSearchSchema } from './routeInfo'\nimport { defaultParseSearch, defaultStringifySearch } from './searchParams'\nimport { PickAsRequired, Updater, NonNullableUpdater } from './utils'\nimport {\n  ErrorRouteComponent,\n  PendingRouteComponent,\n  RouteComponent,\n} from './route'\nimport { RouteMatch } from './RouterProvider'\nimport { ParsedLocation } from './location'\nimport { LocationState } from './location'\nimport { SearchSerializer, SearchParser } from './searchParams'\nimport { RouterContext } from './RouterProvider'\n\n//\n\ndeclare global {\n  interface Window {\n    __TSR_DEHYDRATED__?: HydrationCtx\n    __TSR_ROUTER_CONTEXT__?: React.Context<RouterContext<any>>\n  }\n}\n\nexport interface Register {\n  // router: Router\n}\n\nexport type AnyRouter = Router<any, any>\n\nexport type RegisteredRouter = Register extends {\n  router: infer TRouter extends AnyRouter\n}\n  ? TRouter\n  : AnyRouter\n\nexport type HydrationCtx = {\n  router: DehydratedRouter\n  payload: Record<string, any>\n}\n\nexport type RouterContextOptions<TRouteTree extends AnyRoute> =\n  AnyContext extends TRouteTree['types']['routerContext']\n    ? {\n        context?: TRouteTree['types']['routerContext']\n      }\n    : {\n        context: TRouteTree['types']['routerContext']\n      }\n\nexport interface RouterOptions<\n  TRouteTree extends AnyRoute,\n  TDehydrated extends Record<string, any> = Record<string, any>,\n> {\n  history?: RouterHistory\n  stringifySearch?: SearchSerializer\n  parseSearch?: SearchParser\n  defaultPreload?: false | 'intent'\n  defaultPreloadDelay?: number\n  defaultComponent?: RouteComponent<AnySearchSchema, AnyPathParams, AnyContext>\n  defaultErrorComponent?: ErrorRouteComponent<\n    AnySearchSchema,\n    AnyPathParams,\n    AnyContext\n  >\n  defaultPendingComponent?: PendingRouteComponent<\n    AnySearchSchema,\n    AnyPathParams,\n    AnyContext\n  >\n  defaultMaxAge?: number\n  defaultGcMaxAge?: number\n  defaultPreloadMaxAge?: number\n  caseSensitive?: boolean\n  routeTree?: TRouteTree\n  basepath?: string\n  createRoute?: (opts: { route: AnyRoute; router: AnyRouter }) => void\n  context?: TRouteTree['types']['routerContext']\n  // dehydrate?: () => TDehydrated\n  // hydrate?: (dehydrated: TDehydrated) => void\n  routeMasks?: RouteMask<TRouteTree>[]\n  unmaskOnReload?: boolean\n}\n\nexport interface RouterState<TRouteTree extends AnyRoute = AnyRoute> {\n  status: 'pending' | 'idle'\n  matches: RouteMatch<TRouteTree>[]\n  pendingMatches: RouteMatch<TRouteTree>[]\n  location: ParsedLocation<FullSearchSchema<TRouteTree>>\n  resolvedLocation: ParsedLocation<FullSearchSchema<TRouteTree>>\n  lastUpdated: number\n}\n\nexport type ListenerFn<TEvent extends RouterEvent> = (event: TEvent) => void\n\nexport interface BuildNextOptions {\n  to?: string | number | null\n  params?: true | Updater<unknown>\n  search?: true | Updater<unknown>\n  hash?: true | Updater<string>\n  state?: true | NonNullableUpdater<LocationState>\n  mask?: {\n    to?: string | number | null\n    params?: true | Updater<unknown>\n    search?: true | Updater<unknown>\n    hash?: true | Updater<string>\n    state?: true | NonNullableUpdater<LocationState>\n    unmaskOnReload?: boolean\n  }\n  from?: string\n}\n\nexport interface DehydratedRouterState {\n  dehydratedMatches: DehydratedRouteMatch[]\n}\n\nexport type DehydratedRouteMatch = Pick<\n  RouteMatch,\n  'fetchedAt' | 'invalid' | 'id' | 'status' | 'updatedAt'\n>\n\nexport interface DehydratedRouter {\n  state: DehydratedRouterState\n}\n\nexport type RouterConstructorOptions<\n  TRouteTree extends AnyRoute,\n  TDehydrated extends Record<string, any>,\n> = Omit<RouterOptions<TRouteTree, TDehydrated>, 'context'> &\n  RouterContextOptions<TRouteTree>\n\nexport const componentTypes = [\n  'component',\n  'errorComponent',\n  'pendingComponent',\n] as const\n\nexport type RouterEvents = {\n  onBeforeLoad: {\n    type: 'onBeforeLoad'\n    fromLocation: ParsedLocation\n    toLocation: ParsedLocation\n    pathChanged: boolean\n  }\n  onLoad: {\n    type: 'onLoad'\n    fromLocation: ParsedLocation\n    toLocation: ParsedLocation\n    pathChanged: boolean\n  }\n  onResolved: {\n    type: 'onResolved'\n    fromLocation: ParsedLocation\n    toLocation: ParsedLocation\n    pathChanged: boolean\n  }\n}\n\nexport type RouterEvent = RouterEvents[keyof RouterEvents]\n\nexport type RouterListener<TRouterEvent extends RouterEvent> = {\n  eventType: TRouterEvent['type']\n  fn: ListenerFn<TRouterEvent>\n}\n\nexport class Router<\n  TRouteTree extends AnyRoute = AnyRoute,\n  TDehydrated extends Record<string, any> = Record<string, any>,\n> {\n  options: PickAsRequired<\n    RouterOptions<TRouteTree, TDehydrated>,\n    'stringifySearch' | 'parseSearch' | 'context'\n  >\n  routeTree: TRouteTree\n  // dehydratedData?: TDehydrated\n  // resetNextScroll = false\n  // tempLocationKey = `${Math.round(Math.random() * 10000000)}`\n\n  constructor(options: RouterConstructorOptions<TRouteTree, TDehydrated>) {\n    this.options = {\n      defaultPreloadDelay: 50,\n      context: undefined!,\n      ...options,\n      stringifySearch: options?.stringifySearch ?? defaultStringifySearch,\n      parseSearch: options?.parseSearch ?? defaultParseSearch,\n    }\n\n    this.routeTree = this.options.routeTree as TRouteTree\n  }\n\n  subscribers = new Set<RouterListener<RouterEvent>>()\n\n  subscribe = <TType extends keyof RouterEvents>(\n    eventType: TType,\n    fn: ListenerFn<RouterEvents[TType]>,\n  ) => {\n    const listener: RouterListener<any> = {\n      eventType,\n      fn,\n    }\n\n    this.subscribers.add(listener)\n\n    return () => {\n      this.subscribers.delete(listener)\n    }\n  }\n\n  emit = (routerEvent: RouterEvent) => {\n    this.subscribers.forEach((listener) => {\n      if (listener.eventType === routerEvent.type) {\n        listener.fn(routerEvent)\n      }\n    })\n  }\n\n  // dehydrate = (): DehydratedRouter => {\n  //   return {\n  //     state: {\n  //       dehydratedMatches: state.matches.map((d) =>\n  //         pick(d, ['fetchedAt', 'invalid', 'id', 'status', 'updatedAt']),\n  //       ),\n  //     },\n  //   }\n  // }\n\n  // hydrate = async (__do_not_use_server_ctx?: HydrationCtx) => {\n  //   let _ctx = __do_not_use_server_ctx\n  //   // Client hydrates from window\n  //   if (typeof document !== 'undefined') {\n  //     _ctx = window.__TSR_DEHYDRATED__\n  //   }\n\n  //   invariant(\n  //     _ctx,\n  //     'Expected to find a __TSR_DEHYDRATED__ property on window... but we did not. Did you forget to render <DehydrateRouter /> in your app?',\n  //   )\n\n  //   const ctx = _ctx\n  //   this.dehydratedData = ctx.payload as any\n  //   this.options.hydrate?.(ctx.payload as any)\n  //   const dehydratedState = ctx.router.state\n\n  //   let matches = this.matchRoutes(\n  //     state.location.pathname,\n  //     state.location.search,\n  //   ).map((match) => {\n  //     const dehydratedMatch = dehydratedState.dehydratedMatches.find(\n  //       (d) => d.id === match.id,\n  //     )\n\n  //     invariant(\n  //       dehydratedMatch,\n  //       `Could not find a client-side match for dehydrated match with id: ${match.id}!`,\n  //     )\n\n  //     if (dehydratedMatch) {\n  //       return {\n  //         ...match,\n  //         ...dehydratedMatch,\n  //       }\n  //     }\n  //     return match\n  //   })\n\n  //   this.setState((s) => {\n  //     return {\n  //       ...s,\n  //       matches: dehydratedState.dehydratedMatches as any,\n  //     }\n  //   })\n  // }\n\n  // TODO:\n  // injectedHtml: (string | (() => Promise<string> | string))[] = []\n\n  // TODO:\n  // injectHtml = async (html: string | (() => Promise<string> | string)) => {\n  //   this.injectedHtml.push(html)\n  // }\n\n  // TODO:\n  // dehydrateData = <T>(key: any, getData: T | (() => Promise<T> | T)) => {\n  //   if (typeof document === 'undefined') {\n  //     const strKey = typeof key === 'string' ? key : JSON.stringify(key)\n\n  //     this.injectHtml(async () => {\n  //       const id = `__TSR_DEHYDRATED__${strKey}`\n  //       const data =\n  //         typeof getData === 'function' ? await (getData as any)() : getData\n  //       return `<script id='${id}' suppressHydrationWarning>window[\"__TSR_DEHYDRATED__${escapeJSON(\n  //         strKey,\n  //       )}\"] = ${JSON.stringify(data)}\n  //       ;(() => {\n  //         var el = document.getElementById('${id}')\n  //         el.parentElement.removeChild(el)\n  //       })()\n  //       </script>`\n  //     })\n\n  //     return () => this.hydrateData<T>(key)\n  //   }\n\n  //   return () => undefined\n  // }\n\n  // hydrateData = <T = unknown>(key: any) => {\n  //   if (typeof document !== 'undefined') {\n  //     const strKey = typeof key === 'string' ? key : JSON.stringify(key)\n\n  //     return window[`__TSR_DEHYDRATED__${strKey}` as any] as T\n  //   }\n\n  //   return undefined\n  // }\n\n  // resolveMatchPromise = (matchId: string, key: string, value: any) => {\n  //   state.matches\n  //     .find((d) => d.id === matchId)\n  //     ?.__promisesByKey[key]?.resolve(value)\n  // }\n\n  // setRouteMatch = (\n  //   id: string,\n  //   pending: boolean,\n  //   updater: NonNullableUpdater<RouteMatch<TRouteTree>>,\n  // ) => {\n  //   const key = pending ? 'pendingMatches' : 'matches'\n\n  //   this.setState((prev) => {\n  //     return {\n  //       ...prev,\n  //       [key]: prev[key].map((d) => {\n  //         if (d.id === id) {\n  //           return functionalUpdate(updater, d)\n  //         }\n\n  //         return d\n  //       }),\n  //     }\n  //   })\n  // }\n\n  // setPendingRouteMatch = (\n  //   id: string,\n  //   updater: NonNullableUpdater<RouteMatch<TRouteTree>>,\n  // ) => {\n  //   this.setRouteMatch(id, true, updater)\n  // }\n}\n\nfunction escapeJSON(jsonString: string) {\n  return jsonString\n    .replace(/\\\\/g, '\\\\\\\\') // Escape backslashes\n    .replace(/'/g, \"\\\\'\") // Escape single quotes\n    .replace(/\"/g, '\\\\\"') // Escape double quotes\n}\n\n// A function that takes an import() argument which is a function and returns a new function that will\n// proxy arguments from the caller to the imported function, retaining all type\n// information along the way\nexport function lazyFn<\n  T extends Record<string, (...args: any[]) => any>,\n  TKey extends keyof T = 'default',\n>(fn: () => Promise<T>, key?: TKey) {\n  return async (...args: Parameters<T[TKey]>): Promise<ReturnType<T[TKey]>> => {\n    const imported = await fn()\n    return imported[key || 'default'](...args)\n  }\n}\n","import {\n  HistoryLocation,\n  HistoryState,\n  RouterHistory,\n  createBrowserHistory,\n} from '@tanstack/history'\nimport * as React from 'react'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport { Matches } from './Matches'\nimport {\n  LinkInfo,\n  LinkOptions,\n  NavigateOptions,\n  ResolveRelativePath,\n  ToOptions,\n} from './link'\nimport { ParsedLocation } from './location'\nimport {\n  cleanPath,\n  interpolatePath,\n  joinPaths,\n  matchPathname,\n  parsePathname,\n  resolvePath,\n  trimPath,\n  trimPathRight,\n} from './path'\nimport { isRedirect } from './redirects'\nimport { AnyPathParams, AnyRoute, AnySearchSchema, Route } from './route'\nimport {\n  FullSearchSchema,\n  ParseRoute,\n  RouteById,\n  RouteIds,\n  RoutePaths,\n  RoutesById,\n  RoutesByPath,\n} from './routeInfo'\nimport {\n  BuildNextOptions,\n  DehydratedRouteMatch,\n  RegisteredRouter,\n  Router,\n  RouterOptions,\n  RouterState,\n  componentTypes,\n} from './router'\nimport {\n  NoInfer,\n  PickAsRequired,\n  functionalUpdate,\n  last,\n  partialDeepEqual,\n  pick,\n  replaceEqualDeep,\n  useStableCallback,\n} from './utils'\nimport { MatchRouteOptions } from './Matches'\n\nexport interface CommitLocationOptions {\n  replace?: boolean\n  resetScroll?: boolean\n  startTransition?: boolean\n}\n\nexport interface MatchLocation {\n  to?: string | number | null\n  fuzzy?: boolean\n  caseSensitive?: boolean\n  from?: string\n}\n\ntype LinkCurrentTargetElement = {\n  preloadTimeout?: null | ReturnType<typeof setTimeout>\n}\n\nexport type BuildLinkFn<TRouteTree extends AnyRoute> = <\n  TFrom extends RoutePaths<TRouteTree> = '/',\n  TTo extends string = '',\n>(\n  dest: LinkOptions<TRouteTree, TFrom, TTo>,\n) => LinkInfo\n\nexport type NavigateFn<TRouteTree extends AnyRoute> = <\n  TRouteTree extends AnyRoute,\n  TFrom extends RoutePaths<TRouteTree> = '/',\n  TTo extends string = '',\n  TMaskFrom extends RoutePaths<TRouteTree> = TFrom,\n  TMaskTo extends string = '',\n>({\n  from,\n  to = '' as any,\n  ...rest\n}: NavigateOptions<TRouteTree, TFrom, TTo, TMaskFrom, TMaskTo>) => Promise<void>\n\nexport type MatchRouteFn<TRouteTree extends AnyRoute> = <\n  TFrom extends RoutePaths<TRouteTree> = '/',\n  TTo extends string = '',\n  TResolved = ResolveRelativePath<TFrom, NoInfer<TTo>>,\n>(\n  location: ToOptions<TRouteTree, TFrom, TTo>,\n  opts?: MatchRouteOptions,\n) => false | RouteById<TRouteTree, TResolved>['types']['allParams']\n\nexport type LoadFn = (opts?: {\n  next?: ParsedLocation\n  throwOnError?: boolean\n  __dehydratedMatches?: DehydratedRouteMatch[]\n}) => Promise<void>\n\nexport type BuildLocationFn<TRouteTree extends AnyRoute> = (\n  opts: BuildNextOptions,\n) => ParsedLocation\n\nexport type RouterContext<\n  TRouteTree extends AnyRoute,\n  // TDehydrated extends Record<string, any>,\n> = {\n  buildLink: BuildLinkFn<TRouteTree>\n  state: RouterState<TRouteTree>\n  navigate: NavigateFn<TRouteTree>\n  matchRoute: MatchRouteFn<TRouteTree>\n  routeTree: TRouteTree\n  routesById: RoutesById<TRouteTree>\n  options: RouterOptions<TRouteTree>\n  history: RouterHistory\n  load: LoadFn\n  buildLocation: BuildLocationFn<TRouteTree>\n  subscribe: Router<TRouteTree>['subscribe']\n  resetNextScrollRef: React.MutableRefObject<boolean>\n}\n\nexport const routerContext = React.createContext<RouterContext<any>>(null!)\n\nif (typeof document !== 'undefined') {\n  window.__TSR_ROUTER_CONTEXT__ = routerContext as any\n}\n\nconst preloadWarning = 'Error preloading route! ☝️'\n\nfunction isCtrlEvent(e: MouseEvent) {\n  return !!(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey)\n}\n\nexport class SearchParamError extends Error {}\n\nexport class PathParamError extends Error {}\n\nexport function getInitialRouterState(\n  location: ParsedLocation,\n): RouterState<any> {\n  return {\n    status: 'idle',\n    resolvedLocation: location,\n    location,\n    matches: [],\n    pendingMatches: [],\n    lastUpdated: Date.now(),\n  }\n}\n\nexport function RouterProvider<\n  TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n  TDehydrated extends Record<string, any> = Record<string, any>,\n>({ router, ...rest }: RouterProps<TRouteTree, TDehydrated>) {\n  const options = {\n    ...router.options,\n    ...rest,\n    context: {\n      ...router.options.context,\n      ...rest?.context,\n    },\n  } as PickAsRequired<\n    RouterOptions<TRouteTree, TDehydrated>,\n    'stringifySearch' | 'parseSearch' | 'context'\n  >\n\n  const history = React.useState(\n    () => options.history ?? createBrowserHistory(),\n  )[0]\n\n  const tempLocationKeyRef = React.useRef<string | undefined>(\n    `${Math.round(Math.random() * 10000000)}`,\n  )\n  const resetNextScrollRef = React.useRef<boolean>(true)\n  const navigateTimeoutRef = React.useRef<NodeJS.Timeout | null>(null)\n  const latestLoadPromiseRef = React.useRef<Promise<void>>(Promise.resolve())\n\n  const checkLatest = (promise: Promise<void>): undefined | Promise<void> => {\n    return latestLoadPromiseRef.current !== promise\n      ? latestLoadPromiseRef.current\n      : undefined\n  }\n\n  const parseLocation = useStableCallback(\n    (\n      previousLocation?: ParsedLocation,\n    ): ParsedLocation<FullSearchSchema<TRouteTree>> => {\n      const parse = ({\n        pathname,\n        search,\n        hash,\n        state,\n      }: HistoryLocation): ParsedLocation<FullSearchSchema<TRouteTree>> => {\n        const parsedSearch = options.parseSearch(search)\n\n        return {\n          pathname: pathname,\n          searchStr: search,\n          search: replaceEqualDeep(\n            previousLocation?.search,\n            parsedSearch,\n          ) as any,\n          hash: hash.split('#').reverse()[0] ?? '',\n          href: `${pathname}${search}${hash}`,\n          state: replaceEqualDeep(\n            previousLocation?.state,\n            state,\n          ) as HistoryState,\n        }\n      }\n\n      const location = parse(history.location)\n\n      let { __tempLocation, __tempKey } = location.state\n\n      if (\n        __tempLocation &&\n        (!__tempKey || __tempKey === tempLocationKeyRef.current)\n      ) {\n        // Sync up the location keys\n        const parsedTempLocation = parse(__tempLocation) as any\n        parsedTempLocation.state.key = location.state.key\n\n        delete parsedTempLocation.state.__tempLocation\n\n        return {\n          ...parsedTempLocation,\n          maskedLocation: location,\n        }\n      }\n\n      return location\n    },\n  )\n\n  const latestLocationRef = React.useRef<ParsedLocation>(parseLocation())\n  const [preState, setState] = React.useState<RouterState<TRouteTree>>(() =>\n    getInitialRouterState(latestLocationRef.current),\n  )\n  const [isTransitioning, startReactTransition] = React.useTransition()\n\n  const state = React.useMemo<RouterState<TRouteTree>>(\n    () => ({\n      ...preState,\n      status: isTransitioning ? 'pending' : 'idle',\n      location: isTransitioning ? latestLocationRef.current : preState.location,\n    }),\n    [preState, isTransitioning],\n  )\n\n  React.useLayoutEffect(() => {\n    if (!isTransitioning && state.resolvedLocation !== state.location) {\n      router.emit({\n        type: 'onResolved',\n        fromLocation: state.resolvedLocation,\n        toLocation: state.location,\n        pathChanged: state.location!.href !== state.resolvedLocation?.href,\n      })\n      setState((s) => ({\n        ...s,\n        resolvedLocation: s.location,\n      }))\n    }\n  })\n\n  const basepath = `/${trimPath(options.basepath ?? '') ?? ''}`\n\n  const resolvePathWithBase = useStableCallback(\n    (from: string, path: string) => {\n      return resolvePath(basepath!, from, cleanPath(path))\n    },\n  )\n\n  const [routesById, routesByPath] = React.useMemo(() => {\n    const routesById = {} as RoutesById<TRouteTree>\n    const routesByPath = {} as RoutesByPath<TRouteTree>\n\n    const recurseRoutes = (routes: AnyRoute[]) => {\n      routes.forEach((route, i) => {\n        route.init({ originalIndex: i })\n\n        const existingRoute = (routesById as any)[route.id]\n\n        invariant(\n          !existingRoute,\n          `Duplicate routes found with id: ${String(route.id)}`,\n        )\n        ;(routesById as any)[route.id] = route\n\n        if (!route.isRoot && route.path) {\n          const trimmedFullPath = trimPathRight(route.fullPath)\n          if (\n            !(routesByPath as any)[trimmedFullPath] ||\n            route.fullPath.endsWith('/')\n          ) {\n            ;(routesByPath as any)[trimmedFullPath] = route\n          }\n        }\n\n        const children = route.children as Route[]\n\n        if (children?.length) {\n          recurseRoutes(children)\n        }\n      })\n    }\n\n    recurseRoutes([router.routeTree])\n\n    return [routesById, routesByPath] as const\n  }, [])\n\n  const looseRoutesById = routesById as Record<string, AnyRoute>\n\n  const flatRoutes = React.useMemo(\n    () =>\n      (Object.values(routesByPath) as AnyRoute[])\n        .map((d, i) => {\n          const trimmed = trimPath(d.fullPath)\n          const parsed = parsePathname(trimmed)\n\n          while (parsed.length > 1 && parsed[0]?.value === '/') {\n            parsed.shift()\n          }\n\n          const score = parsed.map((d) => {\n            if (d.type === 'param') {\n              return 0.5\n            }\n\n            if (d.type === 'wildcard') {\n              return 0.25\n            }\n\n            return 1\n          })\n\n          return { child: d, trimmed, parsed, index: i, score }\n        })\n        .sort((a, b) => {\n          let isIndex = a.trimmed === '/' ? 1 : b.trimmed === '/' ? -1 : 0\n\n          if (isIndex !== 0) return isIndex\n\n          const length = Math.min(a.score.length, b.score.length)\n\n          // Sort by length of score\n          if (a.score.length !== b.score.length) {\n            return b.score.length - a.score.length\n          }\n\n          // Sort by min available score\n          for (let i = 0; i < length; i++) {\n            if (a.score[i] !== b.score[i]) {\n              return b.score[i]! - a.score[i]!\n            }\n          }\n\n          // Sort by min available parsed value\n          for (let i = 0; i < length; i++) {\n            if (a.parsed[i]!.value !== b.parsed[i]!.value) {\n              return a.parsed[i]!.value! > b.parsed[i]!.value! ? 1 : -1\n            }\n          }\n\n          // Sort by length of trimmed full path\n          if (a.trimmed !== b.trimmed) {\n            return a.trimmed > b.trimmed ? 1 : -1\n          }\n\n          // Sort by original index\n          return a.index - b.index\n        })\n        .map((d, i) => {\n          d.child.rank = i\n          return d.child\n        }),\n    [routesByPath],\n  )\n\n  const matchRoutes = useStableCallback(\n    <TRouteTree extends AnyRoute>(\n      pathname: string,\n      locationSearch: AnySearchSchema,\n      opts?: { throwOnError?: boolean; debug?: boolean },\n    ): RouteMatch<TRouteTree>[] => {\n      let routeParams: AnyPathParams = {}\n\n      let foundRoute = flatRoutes.find((route) => {\n        const matchedParams = matchPathname(basepath, trimPathRight(pathname), {\n          to: route.fullPath,\n          caseSensitive: route.options.caseSensitive ?? options.caseSensitive,\n          fuzzy: false,\n        })\n\n        if (matchedParams) {\n          routeParams = matchedParams\n          return true\n        }\n\n        return false\n      })\n\n      let routeCursor: AnyRoute = foundRoute || (routesById as any)['__root__']\n\n      let matchedRoutes: AnyRoute[] = [routeCursor]\n      // let includingLayouts = true\n      while (routeCursor?.parentRoute) {\n        routeCursor = routeCursor.parentRoute\n        if (routeCursor) matchedRoutes.unshift(routeCursor)\n      }\n\n      // Existing matches are matches that are already loaded along with\n      // pending matches that are still loading\n\n      const parseErrors = matchedRoutes.map((route) => {\n        let parsedParamsError\n\n        if (route.options.parseParams) {\n          try {\n            const parsedParams = route.options.parseParams(routeParams)\n            // Add the parsed params to the accumulated params bag\n            Object.assign(routeParams, parsedParams)\n          } catch (err: any) {\n            parsedParamsError = new PathParamError(err.message, {\n              cause: err,\n            })\n\n            if (opts?.throwOnError) {\n              throw parsedParamsError\n            }\n\n            return parsedParamsError\n          }\n        }\n\n        return\n      })\n\n      const matches = matchedRoutes.map((route, index) => {\n        const interpolatedPath = interpolatePath(route.path, routeParams)\n        const matchId = interpolatePath(route.id, routeParams, true)\n\n        // Waste not, want not. If we already have a match for this route,\n        // reuse it. This is important for layout routes, which might stick\n        // around between navigation actions that only change leaf routes.\n        const existingMatch = getRouteMatch(state, matchId)\n\n        if (existingMatch) {\n          return { ...existingMatch }\n        }\n\n        // Create a fresh route match\n        const hasLoaders = !!(\n          route.options.load ||\n          componentTypes.some((d) => (route.options[d] as any)?.preload)\n        )\n\n        const routeMatch: AnyRouteMatch = {\n          id: matchId,\n          routeId: route.id,\n          params: routeParams,\n          pathname: joinPaths([basepath, interpolatedPath]),\n          updatedAt: Date.now(),\n          routeSearch: {},\n          search: {} as any,\n          status: hasLoaders ? 'pending' : 'success',\n          isFetching: false,\n          invalid: false,\n          error: undefined,\n          paramsError: parseErrors[index],\n          searchError: undefined,\n          loadPromise: Promise.resolve(),\n          context: undefined!,\n          abortController: new AbortController(),\n          fetchedAt: 0,\n        }\n\n        return routeMatch\n      })\n\n      // Take each match and resolve its search params and context\n      // This has to happen after the matches are created or found\n      // so that we can use the parent match's search params and context\n      matches.forEach((match, i): any => {\n        const parentMatch = matches[i - 1]\n        const route = looseRoutesById[match.routeId]!\n\n        const searchInfo = (() => {\n          // Validate the search params and stabilize them\n          const parentSearchInfo = {\n            search: parentMatch?.search ?? locationSearch,\n            routeSearch: parentMatch?.routeSearch ?? locationSearch,\n          }\n\n          try {\n            const validator =\n              typeof route.options.validateSearch === 'object'\n                ? route.options.validateSearch.parse\n                : route.options.validateSearch\n\n            let routeSearch = validator?.(parentSearchInfo.search) ?? {}\n\n            let search = {\n              ...parentSearchInfo.search,\n              ...routeSearch,\n            }\n\n            routeSearch = replaceEqualDeep(match.routeSearch, routeSearch)\n            search = replaceEqualDeep(match.search, search)\n\n            return {\n              routeSearch,\n              search,\n              searchDidChange: match.routeSearch !== routeSearch,\n            }\n          } catch (err: any) {\n            match.searchError = new SearchParamError(err.message, {\n              cause: err,\n            })\n\n            if (opts?.throwOnError) {\n              throw match.searchError\n            }\n\n            return parentSearchInfo\n          }\n        })()\n\n        Object.assign(match, searchInfo)\n      })\n\n      return matches as any\n    },\n  )\n\n  const cancelMatch = useStableCallback(\n    <TRouteTree extends AnyRoute>(id: string) => {\n      getRouteMatch(state, id)?.abortController?.abort()\n    },\n  )\n\n  const cancelMatches = useStableCallback(\n    <TRouteTree extends AnyRoute>(state: RouterState<TRouteTree>) => {\n      state.matches.forEach((match) => {\n        cancelMatch(match.id)\n      })\n    },\n  )\n\n  const buildLocation = useStableCallback<BuildLocationFn<TRouteTree>>(\n    (opts) => {\n      const build = (\n        dest: BuildNextOptions & {\n          unmaskOnReload?: boolean\n        } = {},\n        matches?: AnyRouteMatch[],\n      ): ParsedLocation => {\n        const from = latestLocationRef.current\n        const fromPathname = dest.from ?? from.pathname\n\n        let pathname = resolvePathWithBase(fromPathname, `${dest.to ?? ''}`)\n\n        const fromMatches = matchRoutes(fromPathname, from.search)\n        const stayingMatches = matches?.filter((d) =>\n          fromMatches?.find((e) => e.routeId === d.routeId),\n        )\n\n        const prevParams = { ...last(fromMatches)?.params }\n\n        let nextParams =\n          (dest.params ?? true) === true\n            ? prevParams\n            : functionalUpdate(dest.params!, prevParams)\n\n        if (nextParams) {\n          matches\n            ?.map((d) => looseRoutesById[d.routeId]!.options.stringifyParams)\n            .filter(Boolean)\n            .forEach((fn) => {\n              nextParams = { ...nextParams!, ...fn!(nextParams!) }\n            })\n        }\n\n        pathname = interpolatePath(pathname, nextParams ?? {})\n\n        const preSearchFilters =\n          stayingMatches\n            ?.map(\n              (match) =>\n                looseRoutesById[match.routeId]!.options.preSearchFilters ?? [],\n            )\n            .flat()\n            .filter(Boolean) ?? []\n\n        const postSearchFilters =\n          stayingMatches\n            ?.map(\n              (match) =>\n                looseRoutesById[match.routeId]!.options.postSearchFilters ?? [],\n            )\n            .flat()\n            .filter(Boolean) ?? []\n\n        // Pre filters first\n        const preFilteredSearch = preSearchFilters?.length\n          ? preSearchFilters?.reduce(\n              (prev, next) => next(prev) as any,\n              from.search,\n            )\n          : from.search\n\n        // Then the link/navigate function\n        const destSearch =\n          dest.search === true\n            ? preFilteredSearch // Preserve resolvedFrom true\n            : dest.search\n            ? functionalUpdate(dest.search, preFilteredSearch) ?? {} // Updater\n            : preSearchFilters?.length\n            ? preFilteredSearch // Preserve resolvedFrom filters\n            : {}\n\n        // Then post filters\n        const postFilteredSearch = postSearchFilters?.length\n          ? postSearchFilters.reduce((prev, next) => next(prev), destSearch)\n          : destSearch\n\n        const search = replaceEqualDeep(from.search, postFilteredSearch)\n\n        const searchStr = options.stringifySearch(search)\n\n        const hash =\n          dest.hash === true\n            ? from.hash\n            : dest.hash\n            ? functionalUpdate(dest.hash!, from.hash)\n            : from.hash\n\n        const hashStr = hash ? `#${hash}` : ''\n\n        let nextState =\n          dest.state === true\n            ? from.state\n            : dest.state\n            ? functionalUpdate(dest.state, from.state)\n            : from.state\n\n        nextState = replaceEqualDeep(from.state, nextState)\n\n        return {\n          pathname,\n          search,\n          searchStr,\n          state: nextState as any,\n          hash,\n          href: history.createHref(`${pathname}${searchStr}${hashStr}`),\n          unmaskOnReload: dest.unmaskOnReload,\n        }\n      }\n\n      const buildWithMatches = (\n        dest: BuildNextOptions = {},\n        maskedDest?: BuildNextOptions,\n      ) => {\n        let next = build(dest)\n        let maskedNext = maskedDest ? build(maskedDest) : undefined\n\n        if (!maskedNext) {\n          let params = {}\n\n          let foundMask = options.routeMasks?.find((d) => {\n            const match = matchPathname(basepath, next.pathname, {\n              to: d.from,\n              caseSensitive: false,\n              fuzzy: false,\n            })\n\n            if (match) {\n              params = match\n              return true\n            }\n\n            return false\n          })\n\n          if (foundMask) {\n            foundMask = {\n              ...foundMask,\n              from: interpolatePath(foundMask.from, params) as any,\n            }\n            maskedDest = foundMask\n            maskedNext = build(maskedDest)\n          }\n        }\n\n        const nextMatches = matchRoutes(next.pathname, next.search)\n        const maskedMatches = maskedNext\n          ? matchRoutes(maskedNext.pathname, maskedNext.search)\n          : undefined\n        const maskedFinal = maskedNext\n          ? build(maskedDest, maskedMatches)\n          : undefined\n\n        const final = build(dest, nextMatches)\n\n        if (maskedFinal) {\n          final.maskedLocation = maskedFinal\n        }\n\n        return final\n      }\n\n      if (opts.mask) {\n        return buildWithMatches(opts, {\n          ...pick(opts, ['from']),\n          ...opts.mask,\n        })\n      }\n\n      return buildWithMatches(opts)\n    },\n  )\n\n  const commitLocation = useStableCallback(\n    async ({\n      startTransition,\n      ...next\n    }: ParsedLocation & CommitLocationOptions) => {\n      if (navigateTimeoutRef.current) clearTimeout(navigateTimeoutRef.current)\n\n      const isSameUrl = latestLocationRef.current.href === next.href\n\n      // If the next urls are the same and we're not replacing,\n      // do nothing\n      if (!isSameUrl || !next.replace) {\n        let { maskedLocation, ...nextHistory } = next\n\n        if (maskedLocation) {\n          nextHistory = {\n            ...maskedLocation,\n            state: {\n              ...maskedLocation.state,\n              __tempKey: undefined,\n              __tempLocation: {\n                ...nextHistory,\n                search: nextHistory.searchStr,\n                state: {\n                  ...nextHistory.state,\n                  __tempKey: undefined!,\n                  __tempLocation: undefined!,\n                  key: undefined!,\n                },\n              },\n            },\n          }\n\n          if (nextHistory.unmaskOnReload ?? options.unmaskOnReload ?? false) {\n            nextHistory.state.__tempKey = tempLocationKeyRef.current\n          }\n        }\n\n        const apply = () => {\n          history[next.replace ? 'replace' : 'push'](\n            nextHistory.href,\n            nextHistory.state,\n          )\n        }\n\n        if (startTransition ?? true) {\n          startReactTransition(apply)\n        } else {\n          apply()\n        }\n      }\n\n      resetNextScrollRef.current = next.resetScroll ?? true\n\n      return latestLoadPromiseRef.current\n    },\n  )\n\n  const buildAndCommitLocation = useStableCallback(\n    ({\n      replace,\n      resetScroll,\n      startTransition,\n      ...rest\n    }: BuildNextOptions & CommitLocationOptions = {}) => {\n      const location = buildLocation(rest)\n      return commitLocation({\n        ...location,\n        startTransition,\n        replace,\n        resetScroll,\n      })\n    },\n  )\n\n  const navigate = useStableCallback<NavigateFn<TRouteTree>>(\n    ({ from, to = '', ...rest }) => {\n      // If this link simply reloads the current route,\n      // make sure it has a new key so it will trigger a data refresh\n\n      // If this `to` is a valid external URL, return\n      // null for LinkUtils\n      const toString = String(to)\n      const fromString = typeof from === 'undefined' ? from : String(from)\n      let isExternal\n\n      try {\n        new URL(`${toString}`)\n        isExternal = true\n      } catch (e) {}\n\n      invariant(\n        !isExternal,\n        'Attempting to navigate to external url with this.navigate!',\n      )\n\n      return buildAndCommitLocation({\n        ...rest,\n        from: fromString,\n        to: toString,\n      })\n    },\n  )\n\n  const loadMatches = useStableCallback(\n    async ({\n      checkLatest,\n      matches,\n      preload,\n    }: {\n      checkLatest: () => Promise<void> | undefined\n      matches: AnyRouteMatch[]\n      preload?: boolean\n    }): Promise<RouteMatch[]> => {\n      let latestPromise\n      let firstBadMatchIndex: number | undefined\n\n      // Check each match middleware to see if the route can be accessed\n      try {\n        for (let [index, match] of matches.entries()) {\n          const parentMatch = matches[index - 1]\n          const route = looseRoutesById[match.routeId]!\n\n          const handleError = (err: any, code: string) => {\n            err.routerCode = code\n            firstBadMatchIndex = firstBadMatchIndex ?? index\n\n            if (isRedirect(err)) {\n              throw err\n            }\n\n            try {\n              route.options.onError?.(err)\n            } catch (errorHandlerErr) {\n              err = errorHandlerErr\n\n              if (isRedirect(errorHandlerErr)) {\n                throw errorHandlerErr\n              }\n            }\n\n            matches[index] = match = {\n              ...match,\n              error: err,\n              status: 'error',\n              updatedAt: Date.now(),\n            }\n          }\n\n          try {\n            if (match.paramsError) {\n              handleError(match.paramsError, 'PARSE_PARAMS')\n            }\n\n            if (match.searchError) {\n              handleError(match.searchError, 'VALIDATE_SEARCH')\n            }\n\n            const parentContext = parentMatch?.context ?? options.context ?? {}\n\n            const beforeLoadContext =\n              (await route.options.beforeLoad?.({\n                search: match.search,\n                abortController: match.abortController,\n                params: match.params,\n                preload: !!preload,\n                context: parentContext,\n                location: state.location,\n                navigate: (opts) =>\n                  navigate({ ...opts, from: match.pathname } as any),\n                buildLocation,\n              })) ?? ({} as any)\n\n            const context = {\n              ...parentContext,\n              ...beforeLoadContext,\n            }\n\n            matches[index] = match = {\n              ...match,\n              context: replaceEqualDeep(match.context, context),\n            }\n          } catch (err) {\n            handleError(err, 'BEFORE_LOAD')\n            break\n          }\n        }\n      } catch (err) {\n        if (isRedirect(err)) {\n          if (!preload) navigate(err as any)\n          return matches\n        }\n\n        throw err\n      }\n\n      const validResolvedMatches = matches.slice(0, firstBadMatchIndex)\n      const matchPromises: Promise<any>[] = []\n\n      validResolvedMatches.forEach((match, index) => {\n        matchPromises.push(\n          (async () => {\n            const parentMatchPromise = matchPromises[index - 1]\n            const route = looseRoutesById[match.routeId]!\n\n            if (match.isFetching) {\n              return getRouteMatch(state, match.id)?.loadPromise\n            }\n\n            const handleIfRedirect = (err: any) => {\n              if (isRedirect(err)) {\n                if (!preload) {\n                  navigate(err as any)\n                }\n                return true\n              }\n              return false\n            }\n\n            const load = async () => {\n              try {\n                const componentsPromise = Promise.all(\n                  componentTypes.map(async (type) => {\n                    const component = route.options[type]\n\n                    if ((component as any)?.preload) {\n                      await (component as any).preload()\n                    }\n                  }),\n                )\n\n                const loaderPromise = route.options.load?.({\n                  params: match.params,\n                  search: match.search,\n                  preload: !!preload,\n                  parentMatchPromise,\n                  abortController: match.abortController,\n                  context: match.context,\n                  location: state.location,\n                  navigate: (opts) =>\n                    navigate({ ...opts, from: match.pathname }),\n                })\n\n                const [_, loaderContext] = await Promise.all([\n                  componentsPromise,\n                  loaderPromise,\n                ])\n                if ((latestPromise = checkLatest())) return await latestPromise\n\n                matches[index] = match = {\n                  ...match,\n                  error: undefined,\n                  status: 'success',\n                  isFetching: false,\n                  updatedAt: Date.now(),\n                }\n              } catch (error) {\n                if ((latestPromise = checkLatest())) return await latestPromise\n                if (handleIfRedirect(error)) return\n\n                try {\n                  route.options.onError?.(error)\n                } catch (onErrorError) {\n                  error = onErrorError\n                  if (handleIfRedirect(onErrorError)) return\n                }\n\n                matches[index] = match = {\n                  ...match,\n                  error,\n                  status: 'error',\n                  isFetching: false,\n                  updatedAt: Date.now(),\n                }\n              }\n\n              if (!preload) {\n                setState((s) => ({\n                  ...s,\n                  matches: s.matches.map((d) =>\n                    d.id === match.id ? match : d,\n                  ),\n                }))\n              }\n            }\n\n            let loadPromise: Promise<void> | undefined\n\n            matches[index] = match = {\n              ...match,\n              isFetching: true,\n              fetchedAt: Date.now(),\n              invalid: false,\n            }\n\n            loadPromise = load()\n\n            matches[index] = match = {\n              ...match,\n              loadPromise,\n            }\n\n            await loadPromise\n          })(),\n        )\n      })\n\n      await Promise.all(matchPromises)\n      return matches\n    },\n  )\n\n  const load = useStableCallback<LoadFn>(async () => {\n    const promise = new Promise<void>(async (resolve, reject) => {\n      const next = latestLocationRef.current\n      const prevLocation = state.resolvedLocation\n      const pathDidChange = prevLocation!.href !== next.href\n      let latestPromise: Promise<void> | undefined | null\n\n      // Cancel any pending matches\n      cancelMatches(state)\n\n      router.emit({\n        type: 'onBeforeLoad',\n        fromLocation: prevLocation,\n        toLocation: next,\n        pathChanged: pathDidChange,\n      })\n\n      // Match the routes\n      let matches: RouteMatch<any, any>[] = matchRoutes(\n        next.pathname,\n        next.search,\n        {\n          debug: true,\n        },\n      )\n\n      const previousMatches = state.matches\n\n      // Ingest the new matches\n      setState((s) => ({\n        ...s,\n        status: 'pending',\n        location: next,\n        matches,\n      }))\n\n      try {\n        try {\n          // Load the matches\n          await loadMatches({\n            matches,\n            checkLatest: () => checkLatest(promise),\n          })\n        } catch (err) {\n          // swallow this error, since we'll display the\n          // errors on the route components\n        }\n\n        // Only apply the latest transition\n        if ((latestPromise = checkLatest(promise))) {\n          return latestPromise\n        }\n\n        const exitingMatchIds = previousMatches.filter(\n          (id) => !state.pendingMatches.includes(id),\n        )\n        const enteringMatchIds = state.pendingMatches.filter(\n          (id) => !previousMatches.includes(id),\n        )\n        const stayingMatchIds = previousMatches.filter((id) =>\n          state.pendingMatches.includes(id),\n        )\n\n        // setState((s) => ({\n        //   ...s,\n        //   status: 'idle',\n        //   resolvedLocation: s.location,\n        // }))\n\n        //\n        ;(\n          [\n            [exitingMatchIds, 'onLeave'],\n            [enteringMatchIds, 'onEnter'],\n            [stayingMatchIds, 'onTransition'],\n          ] as const\n        ).forEach(([matches, hook]) => {\n          matches.forEach((match) => {\n            looseRoutesById[match.routeId]!.options[hook]?.(match)\n          })\n        })\n\n        router.emit({\n          type: 'onLoad',\n          fromLocation: prevLocation,\n          toLocation: next,\n          pathChanged: pathDidChange,\n        })\n\n        resolve()\n      } catch (err) {\n        // Only apply the latest transition\n        if ((latestPromise = checkLatest(promise))) {\n          return latestPromise\n        }\n\n        reject(err)\n      }\n    })\n\n    latestLoadPromiseRef.current = promise\n\n    return latestLoadPromiseRef.current\n  })\n\n  const preloadRoute = useStableCallback(\n    async (navigateOpts: BuildNextOptions = state.location) => {\n      let next = buildLocation(navigateOpts)\n\n      let matches = matchRoutes(next.pathname, next.search, {\n        throwOnError: true,\n      })\n\n      await loadMatches({\n        matches,\n        preload: true,\n        checkLatest: () => undefined,\n      })\n\n      return [last(matches)!, matches] as const\n    },\n  )\n\n  const buildLink = useStableCallback<BuildLinkFn<TRouteTree>>((dest) => {\n    // If this link simply reloads the current route,\n    // make sure it has a new key so it will trigger a data refresh\n\n    // If this `to` is a valid external URL, return\n    // null for LinkUtils\n\n    const {\n      to,\n      preload: userPreload,\n      preloadDelay: userPreloadDelay,\n      activeOptions,\n      disabled,\n      target,\n      replace,\n      resetScroll,\n      startTransition,\n    } = dest\n\n    try {\n      new URL(`${to}`)\n      return {\n        type: 'external',\n        href: to as any,\n      }\n    } catch (e) {}\n\n    const nextOpts = dest\n    const next = buildLocation(nextOpts as any)\n\n    const preload = userPreload ?? options.defaultPreload\n    const preloadDelay = userPreloadDelay ?? options.defaultPreloadDelay ?? 0\n\n    // Compare path/hash for matches\n    const currentPathSplit = latestLocationRef.current.pathname.split('/')\n    const nextPathSplit = next.pathname.split('/')\n    const pathIsFuzzyEqual = nextPathSplit.every(\n      (d, i) => d === currentPathSplit[i],\n    )\n    // Combine the matches based on user options\n    const pathTest = activeOptions?.exact\n      ? latestLocationRef.current.pathname === next.pathname\n      : pathIsFuzzyEqual\n    const hashTest = activeOptions?.includeHash\n      ? latestLocationRef.current.hash === next.hash\n      : true\n    const searchTest =\n      activeOptions?.includeSearch ?? true\n        ? partialDeepEqual(latestLocationRef.current.search, next.search)\n        : true\n\n    // The final \"active\" test\n    const isActive = pathTest && hashTest && searchTest\n\n    // The click handler\n    const handleClick = (e: MouseEvent) => {\n      if (\n        !disabled &&\n        !isCtrlEvent(e) &&\n        !e.defaultPrevented &&\n        (!target || target === '_self') &&\n        e.button === 0\n      ) {\n        e.preventDefault()\n\n        // All is well? Navigate!\n        commitLocation({ ...next, replace, resetScroll, startTransition })\n      }\n    }\n\n    // The click handler\n    const handleFocus = (e: MouseEvent) => {\n      if (preload) {\n        preloadRoute(nextOpts as any).catch((err) => {\n          console.warn(err)\n          console.warn(preloadWarning)\n        })\n      }\n    }\n\n    const handleTouchStart = (e: TouchEvent) => {\n      preloadRoute(nextOpts as any).catch((err) => {\n        console.warn(err)\n        console.warn(preloadWarning)\n      })\n    }\n\n    const handleEnter = (e: MouseEvent) => {\n      const target = (e.target || {}) as LinkCurrentTargetElement\n\n      if (preload) {\n        if (target.preloadTimeout) {\n          return\n        }\n\n        target.preloadTimeout = setTimeout(() => {\n          target.preloadTimeout = null\n          preloadRoute(nextOpts as any).catch((err) => {\n            console.warn(err)\n            console.warn(preloadWarning)\n          })\n        }, preloadDelay)\n      }\n    }\n\n    const handleLeave = (e: MouseEvent) => {\n      const target = (e.target || {}) as LinkCurrentTargetElement\n\n      if (target.preloadTimeout) {\n        clearTimeout(target.preloadTimeout)\n        target.preloadTimeout = null\n      }\n    }\n\n    return {\n      type: 'internal',\n      next,\n      handleFocus,\n      handleClick,\n      handleEnter,\n      handleLeave,\n      handleTouchStart,\n      isActive,\n      disabled,\n    }\n  })\n\n  React.useLayoutEffect(() => {\n    const unsub = history.subscribe(() => {\n      latestLocationRef.current = parseLocation(latestLocationRef.current)\n\n      if (state.location !== latestLocationRef.current) {\n        startReactTransition(() => {\n          try {\n            load()\n          } catch (err) {\n            console.error(err)\n          }\n        })\n      }\n    })\n\n    const nextLocation = buildLocation({\n      search: true,\n      params: true,\n      hash: true,\n      state: true,\n    })\n\n    if (state.location.href !== nextLocation.href) {\n      commitLocation({ ...nextLocation, replace: true })\n    }\n\n    return () => {\n      unsub()\n    }\n  }, [history])\n\n  const initialLoad = React.useRef(true)\n\n  if (initialLoad.current) {\n    initialLoad.current = false\n    startReactTransition(() => {\n      try {\n        load()\n      } catch (err) {\n        console.error(err)\n      }\n    })\n  }\n\n  const matchRoute = useStableCallback<MatchRouteFn<TRouteTree>>(\n    (location, opts) => {\n      location = {\n        ...location,\n        to: location.to\n          ? resolvePathWithBase((location.from || '') as string, location.to)\n          : undefined,\n      } as any\n\n      const next = buildLocation(location as any)\n\n      if (opts?.pending && state.status !== 'pending') {\n        return false\n      }\n\n      const baseLocation = opts?.pending\n        ? latestLocationRef.current\n        : state.resolvedLocation\n\n      // const baseLocation = state.resolvedLocation\n\n      if (!baseLocation) {\n        return false\n      }\n\n      const match = matchPathname(basepath, baseLocation.pathname, {\n        ...opts,\n        to: next.pathname,\n      }) as any\n\n      if (!match) {\n        return false\n      }\n\n      if (match && (opts?.includeSearch ?? true)) {\n        return partialDeepEqual(baseLocation.search, next.search)\n          ? match\n          : false\n      }\n\n      return match\n    },\n  )\n\n  const routerContextValue: RouterContext<TRouteTree> = {\n    routeTree: router.routeTree,\n    navigate,\n    buildLink,\n    state,\n    matchRoute,\n    routesById,\n    options,\n    history,\n    load,\n    buildLocation,\n    subscribe: router.subscribe,\n    resetNextScrollRef,\n  }\n\n  return (\n    <routerContext.Provider value={routerContextValue}>\n      <Matches />\n    </routerContext.Provider>\n  )\n}\n\nexport function getRouteMatch<TRouteTree extends AnyRoute>(\n  state: RouterState<TRouteTree>,\n  id: string,\n): undefined | RouteMatch<TRouteTree> {\n  return [...state.pendingMatches, ...state.matches].find((d) => d.id === id)\n}\n\nexport function useRouterState<\n  TSelected = RouterState<RegisteredRouter['routeTree']>,\n>(opts?: {\n  select: (state: RouterState<RegisteredRouter['routeTree']>) => TSelected\n}): TSelected {\n  const { state } = useRouter()\n  // return useStore(router.__store, opts?.select as any)\n  return opts?.select ? opts.select(state) : (state as any)\n}\n\nexport type RouterProps<\n  TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n  TDehydrated extends Record<string, any> = Record<string, any>,\n> = Omit<RouterOptions<TRouteTree, TDehydrated>, 'context'> & {\n  router: Router<TRouteTree>\n  context?: Partial<RouterOptions<TRouteTree, TDehydrated>['context']>\n}\n\nexport function useRouter<\n  TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n>(): RouterContext<TRouteTree> {\n  const resolvedContext = window.__TSR_ROUTER_CONTEXT__ || routerContext\n  const value = React.useContext(resolvedContext)\n  warning(value, 'useRouter must be used inside a <RouterProvider> component!')\n  return value as any\n}\nexport interface RouteMatch<\n  TRouteTree extends AnyRoute = AnyRoute,\n  TRouteId extends RouteIds<TRouteTree> = ParseRoute<TRouteTree>['id'],\n> {\n  id: string\n  routeId: TRouteId\n  pathname: string\n  params: RouteById<TRouteTree, TRouteId>['types']['allParams']\n  status: 'pending' | 'success' | 'error'\n  isFetching: boolean\n  invalid: boolean\n  error: unknown\n  paramsError: unknown\n  searchError: unknown\n  updatedAt: number\n  loadPromise?: Promise<void>\n  __resolveLoadPromise?: () => void\n  context: RouteById<TRouteTree, TRouteId>['types']['allContext']\n  routeSearch: RouteById<TRouteTree, TRouteId>['types']['searchSchema']\n  search: FullSearchSchema<TRouteTree> &\n    RouteById<TRouteTree, TRouteId>['types']['fullSearchSchema']\n  fetchedAt: number\n  abortController: AbortController\n}\n\nexport type AnyRouteMatch = RouteMatch<any>\n","import * as React from 'react'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport { CatchBoundary, ErrorComponent } from './CatchBoundary'\nimport { RouteMatch } from './RouterProvider'\nimport { useRouter, useRouterState } from './RouterProvider'\nimport { ResolveRelativePath, ToOptions } from './link'\nimport { AnyRoute, ReactNode, rootRouteId } from './route'\nimport { RouteById, RouteByPath, RouteIds, RoutePaths } from './routeInfo'\nimport { RegisteredRouter } from './router'\nimport { NoInfer, StrictOrFrom } from './utils'\n\nexport function Matches() {\n  const { routesById, state } = useRouter()\n  const { matches } = state\n\n  const locationKey = useRouterState().location.state.key\n\n  const route = routesById[rootRouteId]\n\n  const errorComponent = React.useCallback(\n    (props: any) => {\n      return React.createElement(ErrorComponent, {\n        ...props,\n        useMatch: route.useMatch,\n        useRouteContext: route.useRouteContext,\n        useSearch: route.useSearch,\n        useParams: route.useParams,\n      })\n    },\n    [route],\n  )\n\n  return (\n    <matchesContext.Provider value={matches}>\n      <CatchBoundary\n        resetKey={locationKey}\n        errorComponent={errorComponent}\n        onCatch={() => {\n          warning(\n            false,\n            `Error in router! Consider setting an 'errorComponent' in your RootRoute! 👍`,\n          )\n        }}\n      >\n        {matches.length ? <Match matches={matches} /> : null}\n      </CatchBoundary>\n    </matchesContext.Provider>\n  )\n}\n\nconst defaultPending = () => null\nfunction SafeFragment(props: any) {\n  return <>{props.children}</>\n}\n\nexport function Match({ matches }: { matches: RouteMatch[] }) {\n  const { options, routesById } = useRouter()\n  const match = matches[0]!\n  const routeId = match?.routeId\n  const route = routesById[routeId]\n  const locationKey = useRouterState().location.state?.key\n\n  const PendingComponent = (route.options.pendingComponent ??\n    options.defaultPendingComponent ??\n    defaultPending) as any\n\n  const routeErrorComponent =\n    route.options.errorComponent ??\n    options.defaultErrorComponent ??\n    ErrorComponent\n\n  const ResolvedSuspenseBoundary =\n    route.options.wrapInSuspense ?? React.Suspense\n  // const ResolvedSuspenseBoundary = SafeFragment\n\n  const errorComponent = React.useCallback(\n    (props: any) => {\n      return React.createElement(routeErrorComponent, {\n        ...props,\n        useMatch: route.useMatch,\n        useRouteContext: route.useRouteContext,\n        useSearch: route.useSearch,\n        useParams: route.useParams,\n      })\n    },\n    [route],\n  )\n\n  return (\n    <matchesContext.Provider value={matches}>\n      <ResolvedSuspenseBoundary\n        fallback={React.createElement(PendingComponent, {\n          useMatch: route.useMatch,\n          useRouteContext: route.useRouteContext,\n          useSearch: route.useSearch,\n          useParams: route.useParams,\n        })}\n      >\n        <CatchBoundary\n          resetKey={locationKey}\n          errorComponent={errorComponent}\n          onCatch={() => {\n            warning(false, `Error in route match: ${match.id}`)\n          }}\n        >\n          <MatchInner match={match} />\n        </CatchBoundary>\n      </ResolvedSuspenseBoundary>\n    </matchesContext.Provider>\n  )\n}\nfunction MatchInner({ match }: { match: RouteMatch }): any {\n  const { options, routesById } = useRouter()\n  const route = routesById[match.routeId]\n\n  if (match.status === 'error') {\n    throw match.error\n  }\n\n  if (match.status === 'pending') {\n    throw match.loadPromise\n  }\n\n  if (match.status === 'success') {\n    let comp = route.options.component ?? options.defaultComponent\n\n    if (comp) {\n      return React.createElement(comp, {\n        useMatch: route.useMatch,\n        useRouteContext: route.useRouteContext as any,\n        useSearch: route.useSearch,\n        useParams: route.useParams as any,\n      } as any)\n    }\n\n    return <Outlet />\n  }\n\n  invariant(\n    false,\n    'Idle routeMatch status encountered during rendering! You should never see this. File an issue!',\n  )\n}\n\nexport function Outlet() {\n  const matches = React.useContext(matchesContext).slice(1)\n\n  if (!matches[0]) {\n    return null\n  }\n\n  return <Match matches={matches} />\n}\n\nexport interface MatchRouteOptions {\n  pending?: boolean\n  caseSensitive?: boolean\n  includeSearch?: boolean\n  fuzzy?: boolean\n}\n\nexport type MakeUseMatchRouteOptions<\n  TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n  TFrom extends RoutePaths<TRouteTree> = '/',\n  TTo extends string = '',\n  TMaskFrom extends RoutePaths<TRouteTree> = '/',\n  TMaskTo extends string = '',\n> = ToOptions<AnyRoute, TFrom, TTo, TMaskFrom, TMaskTo> & MatchRouteOptions\n\nexport function useMatchRoute<\n  TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n>() {\n  const { matchRoute } = useRouter()\n\n  return React.useCallback(\n    <\n      TFrom extends RoutePaths<TRouteTree> = '/',\n      TTo extends string = '',\n      TMaskFrom extends RoutePaths<TRouteTree> = '/',\n      TMaskTo extends string = '',\n      TResolved extends string = ResolveRelativePath<TFrom, NoInfer<TTo>>,\n    >(\n      opts: MakeUseMatchRouteOptions<\n        TRouteTree,\n        TFrom,\n        TTo,\n        TMaskFrom,\n        TMaskTo\n      >,\n    ): false | RouteById<TRouteTree, TResolved>['types']['allParams'] => {\n      const { pending, caseSensitive, ...rest } = opts\n\n      return matchRoute(rest as any, {\n        pending,\n        caseSensitive,\n      })\n    },\n    [],\n  )\n}\n\nexport type MakeMatchRouteOptions<\n  TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n  TFrom extends RoutePaths<TRouteTree> = '/',\n  TTo extends string = '',\n  TMaskFrom extends RoutePaths<TRouteTree> = '/',\n  TMaskTo extends string = '',\n> = ToOptions<TRouteTree, TFrom, TTo, TMaskFrom, TMaskTo> &\n  MatchRouteOptions & {\n    // If a function is passed as a child, it will be given the `isActive` boolean to aid in further styling on the element it returns\n    children?:\n      | ((\n          params?: RouteByPath<\n            TRouteTree,\n            ResolveRelativePath<TFrom, NoInfer<TTo>>\n          >['types']['allParams'],\n        ) => ReactNode)\n      | React.ReactNode\n  }\n\nexport function MatchRoute<\n  TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n  TFrom extends RoutePaths<TRouteTree> = '/',\n  TTo extends string = '',\n  TMaskFrom extends RoutePaths<TRouteTree> = '/',\n  TMaskTo extends string = '',\n>(\n  props: MakeMatchRouteOptions<TRouteTree, TFrom, TTo, TMaskFrom, TMaskTo>,\n): any {\n  const matchRoute = useMatchRoute()\n  const params = matchRoute(props as any)\n\n  if (typeof props.children === 'function') {\n    return (props.children as any)(params)\n  }\n\n  return !!params ? props.children : null\n}\n\nexport function useMatch<\n  TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n  TFrom extends RouteIds<TRouteTree> = RouteIds<TRouteTree>,\n  TStrict extends boolean = true,\n  TRouteMatchState = RouteMatch<TRouteTree, TFrom>,\n  TSelected = TRouteMatchState,\n>(\n  opts: StrictOrFrom<TFrom> & {\n    select?: (match: TRouteMatchState) => TSelected\n  },\n): TStrict extends true ? TRouteMatchState : TRouteMatchState | undefined {\n  const nearestMatch = React.useContext(matchesContext)[0]!\n  const nearestMatchRouteId = nearestMatch?.routeId\n\n  const matchRouteId = useRouterState({\n    select: (state) => {\n      const match = opts?.from\n        ? state.matches.find((d) => d.routeId === opts?.from)\n        : state.matches.find((d) => d.id === nearestMatch.id)\n\n      return match!.routeId\n    },\n  })\n\n  if (opts?.strict ?? true) {\n    invariant(\n      nearestMatchRouteId == matchRouteId,\n      `useMatch(\"${\n        matchRouteId as string\n      }\") is being called in a component that is meant to render the '${nearestMatchRouteId}' route. Did you mean to 'useMatch(\"${\n        matchRouteId as string\n      }\", { strict: false })' or 'useRoute(\"${\n        matchRouteId as string\n      }\")' instead?`,\n    )\n  }\n\n  const matchSelection = useRouterState({\n    select: (state) => {\n      const match = opts?.from\n        ? state.matches.find((d) => d.routeId === opts?.from)\n        : state.matches.find((d) => d.id === nearestMatch.id)\n\n      invariant(\n        match,\n        `Could not find ${\n          opts?.from\n            ? `an active match from \"${opts.from}\"`\n            : 'a nearest match!'\n        }`,\n      )\n\n      return opts?.select ? opts.select(match as any) : match\n    },\n  })\n\n  return matchSelection as any\n}\n\nexport const matchesContext = React.createContext<RouteMatch[]>(null!)\n\nexport function useMatches<T = RouteMatch[]>(opts?: {\n  select?: (matches: RouteMatch[]) => T\n}): T {\n  const contextMatches = React.useContext(matchesContext)\n\n  return useRouterState({\n    select: (state) => {\n      const matches = state.matches.slice(\n        state.matches.findIndex((d) => d.id === contextMatches[0]?.id),\n      )\n      return opts?.select ? opts.select(matches) : (matches as T)\n    },\n  })\n}\n","import { AnyRoute } from './route'\nimport { RouteIds, RouteById, AllParams } from './routeInfo'\nimport { RegisteredRouter } from './router'\nimport { last } from './utils'\nimport { useRouterState } from './RouterProvider'\nimport { StrictOrFrom } from './utils'\n\nexport function useParams<\n  TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n  TFrom extends RouteIds<TRouteTree> = RouteIds<TRouteTree>,\n  TDefaultSelected = AllParams<TRouteTree> &\n    RouteById<TRouteTree, TFrom>['types']['allParams'],\n  TSelected = TDefaultSelected,\n>(\n  opts: StrictOrFrom<TFrom> & {\n    select?: (search: TDefaultSelected) => TSelected\n  },\n): TSelected {\n  return useRouterState({\n    select: (state: any) => {\n      const params = (last(state.matches) as any)?.params\n      return opts?.select ? opts.select(params) : params\n    },\n  })\n}\n","import { AnyRoute } from './route'\nimport { RouteIds, RouteById } from './routeInfo'\nimport { RegisteredRouter } from './router'\nimport { RouteMatch } from './RouterProvider'\nimport { useMatch } from './Matches'\nimport { StrictOrFrom } from './utils'\n\nexport function useSearch<\n  TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n  TFrom extends RouteIds<TRouteTree> = RouteIds<TRouteTree>,\n  TStrict extends boolean = true,\n  TSearch = RouteById<TRouteTree, TFrom>['types']['fullSearchSchema'],\n  TSelected = TSearch,\n>(\n  opts: StrictOrFrom<TFrom> & {\n    select?: (search: TSearch) => TSelected\n  },\n): TStrict extends true ? TSelected : TSelected | undefined {\n  return useMatch({\n    ...(opts as any),\n    select: (match: RouteMatch) => {\n      return opts?.select ? opts.select(match.search as TSearch) : match.search\n    },\n  })\n}\n","import { HistoryLocation } from '@tanstack/history'\nimport * as React from 'react'\nimport invariant from 'tiny-invariant'\nimport { useMatch } from './Matches'\nimport { AnyRouteMatch } from './RouterProvider'\nimport { NavigateOptions, ParsePathParams, ToSubOptions } from './link'\nimport { ParsedLocation } from './location'\nimport { joinPaths, trimPath } from './path'\nimport { RoutePaths } from './routeInfo'\nimport { AnyRouter } from './router'\nimport { useParams } from './useParams'\nimport { useSearch } from './useSearch'\nimport {\n  Assign,\n  Expand,\n  IsAny,\n  NoInfer,\n  PickRequired,\n  UnionToIntersection,\n} from './utils'\nimport { BuildLocationFn, NavigateFn } from './RouterProvider'\n\nexport const rootRouteId = '__root__' as const\nexport type RootRouteId = typeof rootRouteId\nexport type AnyPathParams = {}\n\nexport type AnySearchSchema = {}\n\nexport type AnyContext = {}\n\nexport interface RouteContext {}\n\nexport interface RouteMeta {}\n\nexport type PreloadableObj = { preload?: () => Promise<void> }\n\nexport type RoutePathOptions<TCustomId, TPath> =\n  | {\n      path: TPath\n    }\n  | {\n      id: TCustomId\n    }\n\nexport type RoutePathOptionsIntersection<TCustomId, TPath> =\n  UnionToIntersection<RoutePathOptions<TCustomId, TPath>>\n\nexport type MetaOptions = keyof PickRequired<RouteMeta> extends never\n  ? {\n      meta?: RouteMeta\n    }\n  : {\n      meta: RouteMeta\n    }\n\nexport type RouteOptions<\n  TParentRoute extends AnyRoute = AnyRoute,\n  TCustomId extends string = string,\n  TPath extends string = string,\n  TSearchSchema extends Record<string, any> = {},\n  TFullSearchSchema extends Record<string, any> = TSearchSchema,\n  TParams extends AnyPathParams = AnyPathParams,\n  TAllParams extends AnyPathParams = TParams,\n  TRouteContext extends RouteContext = RouteContext,\n  TAllContext extends Record<string, any> = AnyContext,\n> = BaseRouteOptions<\n  TParentRoute,\n  TCustomId,\n  TPath,\n  TSearchSchema,\n  TFullSearchSchema,\n  TParams,\n  TAllParams,\n  TRouteContext,\n  TAllContext\n> &\n  NoInfer<UpdatableRouteOptions<TFullSearchSchema, TAllParams, TAllContext>>\n\nexport type ParamsFallback<\n  TPath extends string,\n  TParams,\n> = unknown extends TParams ? Record<ParsePathParams<TPath>, string> : TParams\n\ntype Prefix<T extends string, U extends string> = U extends `${T}${infer _}`\n  ? U\n  : never\n\nexport type BaseRouteOptions<\n  TParentRoute extends AnyRoute = AnyRoute,\n  TCustomId extends string = string,\n  TPath extends string = string,\n  TSearchSchema extends Record<string, any> = {},\n  TFullSearchSchema extends Record<string, any> = TSearchSchema,\n  TParams extends AnyPathParams = {},\n  TAllParams = ParamsFallback<TPath, TParams>,\n  TRouteContext extends RouteContext = RouteContext,\n  TAllContext extends Record<string, any> = AnyContext,\n> = RoutePathOptions<TCustomId, TPath> & {\n  getParentRoute: () => TParentRoute\n  validateSearch?: SearchSchemaValidator<TSearchSchema>\n} & (keyof PickRequired<RouteContext> extends never\n    ? // This async function is called before a route is loaded.\n      // If an error is thrown here, the route's loader will not be called.\n      // If thrown during a navigation, the navigation will be cancelled and the error will be passed to the `onError` function.\n      // If thrown during a preload event, the error will be logged to the console.\n      {\n        beforeLoad?: BeforeLoadFn<\n          TFullSearchSchema,\n          TParentRoute,\n          TAllParams,\n          TRouteContext\n        >\n      }\n    : {\n        beforeLoad: BeforeLoadFn<\n          TFullSearchSchema,\n          TParentRoute,\n          TAllParams,\n          TRouteContext\n        >\n      }) & {\n    load?: RouteLoadFn<\n      TAllParams,\n      TFullSearchSchema,\n      NoInfer<TAllContext>,\n      NoInfer<TRouteContext>\n    >\n  } & (\n    | {\n        // Both or none\n        parseParams?: (\n          rawParams: IsAny<TPath, any, Record<ParsePathParams<TPath>, string>>,\n        ) => TParams extends Record<ParsePathParams<TPath>, any>\n          ? TParams\n          : 'parseParams must return an object'\n        stringifyParams?: (\n          params: NoInfer<ParamsFallback<TPath, TParams>>,\n        ) => Record<ParsePathParams<TPath>, string>\n      }\n    | {\n        stringifyParams?: never\n        parseParams?: never\n      }\n  )\n\ntype BeforeLoadFn<\n  TFullSearchSchema extends Record<string, any>,\n  TParentRoute extends AnyRoute,\n  TAllParams,\n  TRouteContext,\n> = (opts: {\n  search: TFullSearchSchema\n  abortController: AbortController\n  preload: boolean\n  params: TAllParams\n  context: TParentRoute['types']['allContext']\n  location: ParsedLocation\n  navigate: NavigateFn<AnyRoute>\n  buildLocation: BuildLocationFn<AnyRoute>\n}) => Promise<TRouteContext> | TRouteContext | void\n\nexport type UpdatableRouteOptions<\n  TFullSearchSchema extends Record<string, any>,\n  TAllParams extends AnyPathParams,\n  TAllContext extends AnyContext,\n> = MetaOptions & {\n  // test?: (args: TAllContext) => void\n  // If true, this route will be matched as case-sensitive\n  caseSensitive?: boolean\n  // If true, this route will be forcefully wrapped in a suspense boundary\n  wrapInSuspense?: boolean\n  // The content to be rendered when the route is matched. If no component is provided, defaults to `<Outlet />`\n  component?: RouteComponent<TFullSearchSchema, TAllParams, TAllContext>\n  // The content to be rendered when the route encounters an error\n  errorComponent?: ErrorRouteComponent<\n    TFullSearchSchema,\n    TAllParams,\n    {}\n    // TAllContext // TODO: I have no idea why this breaks the universe,\n    // so we'll come back to it later.\n  > //\n  // If supported by your framework, the content to be rendered as the fallback content until the route is ready to render\n  pendingComponent?: PendingRouteComponent<\n    TFullSearchSchema,\n    TAllParams,\n    TAllContext\n  >\n  // Filter functions that can manipulate search params *before* they are passed to links and navigate\n  // calls that match this route.\n  preSearchFilters?: SearchFilter<TFullSearchSchema>[]\n  // Filter functions that can manipulate search params *after* they are passed to links and navigate\n  // calls that match this route.\n  postSearchFilters?: SearchFilter<TFullSearchSchema>[]\n  onError?: (err: any) => void\n  // These functions are called as route matches are loaded, stick around and leave the active\n  // matches\n  onEnter?: (match: AnyRouteMatch) => void\n  onTransition?: (match: AnyRouteMatch) => void\n  onLeave?: (match: AnyRouteMatch) => void\n  // Set this to true or false to specifically set whether or not this route should be preloaded. If unset, will\n  // default to router.options.reloadOnWindowFocus\n  reloadOnWindowFocus?: boolean\n}\n\nexport type ParseParamsOption<TPath extends string, TParams> = ParseParamsFn<\n  TPath,\n  TParams\n>\n\nexport type ParseParamsFn<TPath extends string, TParams> = (\n  rawParams: IsAny<TPath, any, Record<ParsePathParams<TPath>, string>>,\n) => TParams extends Record<ParsePathParams<TPath>, any>\n  ? TParams\n  : 'parseParams must return an object'\n\nexport type ParseParamsObj<TPath extends string, TParams> = {\n  parse?: ParseParamsFn<TPath, TParams>\n}\n\n// The parse type here allows a zod schema to be passed directly to the validator\nexport type SearchSchemaValidator<TReturn> =\n  | SearchSchemaValidatorObj<TReturn>\n  | SearchSchemaValidatorFn<TReturn>\n\nexport type SearchSchemaValidatorObj<TReturn> = {\n  parse?: SearchSchemaValidatorFn<TReturn>\n}\n\nexport type SearchSchemaValidatorFn<TReturn> = (\n  searchObj: Record<string, unknown>,\n) => TReturn\n\nexport type DefinedPathParamWarning =\n  'Path params cannot be redefined by child routes!'\n\nexport type ParentParams<TParentParams> = AnyPathParams extends TParentParams\n  ? {}\n  : {\n      [Key in keyof TParentParams]?: DefinedPathParamWarning\n    }\n\nexport type RouteLoadFn<\n  TAllParams = {},\n  TFullSearchSchema extends Record<string, any> = {},\n  TAllContext extends Record<string, any> = AnyContext,\n  TRouteContext extends Record<string, any> = AnyContext,\n> = (\n  match: LoadFnContext<\n    TAllParams,\n    TFullSearchSchema,\n    TAllContext,\n    TRouteContext\n  > & {\n    parentMatchPromise?: Promise<void>\n  },\n) => any\n\nexport interface LoadFnContext<\n  TAllParams = {},\n  TFullSearchSchema extends Record<string, any> = {},\n  TAllContext extends Record<string, any> = AnyContext,\n  TRouteContext extends Record<string, any> = AnyContext,\n> {\n  abortController: AbortController\n  preload: boolean\n  params: TAllParams\n  search: TFullSearchSchema\n  context: Expand<Assign<TAllContext, TRouteContext>>\n  location: ParsedLocation<TFullSearchSchema>\n  navigate: (opts: NavigateOptions<AnyRoute>) => Promise<void>\n}\n\nexport type SearchFilter<T, U = T> = (prev: T) => U\n\nexport type ResolveId<\n  TParentRoute,\n  TCustomId extends string,\n  TPath extends string,\n> = TParentRoute extends { id: infer TParentId extends string }\n  ? RoutePrefix<TParentId, string extends TCustomId ? TPath : TCustomId>\n  : RootRouteId\n\nexport type InferFullSearchSchema<TRoute> = TRoute extends {\n  types: {\n    fullSearchSchema: infer TFullSearchSchema\n  }\n}\n  ? TFullSearchSchema\n  : {}\n\nexport type ResolveFullSearchSchema<TParentRoute, TSearchSchema> = Expand<\n  Assign<InferFullSearchSchema<TParentRoute>, TSearchSchema>\n>\n\nexport interface AnyRoute\n  extends Route<\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any\n  > {}\n\nexport type MergeFromFromParent<T, U> = IsAny<T, U, T & U>\n\nexport type StreamedPromise<T> = {\n  promise: Promise<T>\n  status: 'resolved' | 'pending'\n  data: T\n  resolve: (value: T) => void\n}\n\nexport type ResolveAllParams<\n  TParentRoute extends AnyRoute,\n  TParams extends AnyPathParams,\n> = Record<never, string> extends TParentRoute['types']['allParams']\n  ? TParams\n  : Expand<\n      UnionToIntersection<TParentRoute['types']['allParams'] & TParams> & {}\n    >\n\nexport type RouteConstraints = {\n  TParentRoute: AnyRoute\n  TPath: string\n  TFullPath: string\n  TCustomId: string\n  TId: string\n  TSearchSchema: AnySearchSchema\n  TFullSearchSchema: AnySearchSchema\n  TParams: Record<string, any>\n  TAllParams: Record<string, any>\n  TParentContext: AnyContext\n  TRouteContext: RouteContext\n  TAllContext: AnyContext\n  TRouterContext: AnyContext\n  TChildren: unknown\n  TRouteTree: AnyRoute\n}\n\nexport class Route<\n  TParentRoute extends RouteConstraints['TParentRoute'] = AnyRoute,\n  TPath extends RouteConstraints['TPath'] = '/',\n  TFullPath extends RouteConstraints['TFullPath'] = ResolveFullPath<\n    TParentRoute,\n    TPath\n  >,\n  TCustomId extends RouteConstraints['TCustomId'] = string,\n  TId extends RouteConstraints['TId'] = ResolveId<\n    TParentRoute,\n    TCustomId,\n    TPath\n  >,\n  TSearchSchema extends RouteConstraints['TSearchSchema'] = {},\n  TFullSearchSchema extends RouteConstraints['TFullSearchSchema'] = ResolveFullSearchSchema<\n    TParentRoute,\n    TSearchSchema\n  >,\n  TParams extends RouteConstraints['TParams'] = Expand<\n    Record<ParsePathParams<TPath>, string>\n  >,\n  TAllParams extends RouteConstraints['TAllParams'] = ResolveAllParams<\n    TParentRoute,\n    TParams\n  >,\n  TRouteContext extends RouteConstraints['TRouteContext'] = RouteContext,\n  TAllContext extends Expand<\n    Assign<IsAny<TParentRoute['types']['allContext'], {}>, TRouteContext>\n  > = Expand<\n    Assign<IsAny<TParentRoute['types']['allContext'], {}>, TRouteContext>\n  >,\n  TRouterContext extends RouteConstraints['TRouterContext'] = AnyContext,\n  TChildren extends RouteConstraints['TChildren'] = unknown,\n  TRouteTree extends RouteConstraints['TRouteTree'] = AnyRoute,\n> {\n  isRoot: TParentRoute extends Route<any> ? true : false\n  options: RouteOptions<\n    TParentRoute,\n    TCustomId,\n    TPath,\n    TSearchSchema,\n    TFullSearchSchema,\n    TParams,\n    TAllParams,\n    TRouteContext,\n    TAllContext\n  >\n\n  test!: Expand<\n    Assign<IsAny<TParentRoute['types']['allContext'], {}>, TRouteContext>\n  >\n\n  // Set up in this.init()\n  parentRoute!: TParentRoute\n  id!: TId\n  // customId!: TCustomId\n  path!: TPath\n  fullPath!: TFullPath\n  to!: TrimPathRight<TFullPath>\n\n  // Optional\n  children?: TChildren\n  originalIndex?: number\n  router?: AnyRouter\n  rank!: number\n\n  constructor(\n    options: RouteOptions<\n      TParentRoute,\n      TCustomId,\n      TPath,\n      TSearchSchema,\n      TFullSearchSchema,\n      TParams,\n      TAllParams,\n      TRouteContext,\n      TAllContext\n    >,\n  ) {\n    this.options = (options as any) || {}\n    this.isRoot = !options?.getParentRoute as any\n    Route.__onInit(this)\n  }\n\n  types!: {\n    parentRoute: TParentRoute\n    path: TPath\n    to: TrimPathRight<TFullPath>\n    fullPath: TFullPath\n    customId: TCustomId\n    id: TId\n    searchSchema: TSearchSchema\n    fullSearchSchema: TFullSearchSchema\n    params: TParams\n    allParams: TAllParams\n    routeContext: TRouteContext\n    allContext: TAllContext\n    children: TChildren\n    routeTree: TRouteTree\n    routerContext: TRouterContext\n  }\n\n  init = (opts: { originalIndex: number }) => {\n    this.originalIndex = opts.originalIndex\n\n    const options = this.options as RouteOptions<\n      TParentRoute,\n      TCustomId,\n      TPath,\n      TSearchSchema,\n      TFullSearchSchema,\n      TParams,\n      TAllParams,\n      TRouteContext,\n      TAllContext\n    > &\n      RoutePathOptionsIntersection<TCustomId, TPath>\n\n    const isRoot = !options?.path && !options?.id\n\n    this.parentRoute = this.options?.getParentRoute?.()\n\n    if (isRoot) {\n      this.path = rootRouteId as TPath\n    } else {\n      invariant(\n        this.parentRoute,\n        `Child Route instances must pass a 'getParentRoute: () => ParentRoute' option that returns a Route instance.`,\n      )\n    }\n\n    let path: undefined | string = isRoot ? rootRouteId : options.path\n\n    // If the path is anything other than an index path, trim it up\n    if (path && path !== '/') {\n      path = trimPath(path)\n    }\n\n    const customId = options?.id || path\n\n    // Strip the parentId prefix from the first level of children\n    let id = isRoot\n      ? rootRouteId\n      : joinPaths([\n          (this.parentRoute.id as any) === rootRouteId\n            ? ''\n            : this.parentRoute.id,\n          customId,\n        ])\n\n    if (path === rootRouteId) {\n      path = '/'\n    }\n\n    if (id !== rootRouteId) {\n      id = joinPaths(['/', id])\n    }\n\n    const fullPath =\n      id === rootRouteId ? '/' : joinPaths([this.parentRoute.fullPath, path])\n\n    this.path = path as TPath\n    this.id = id as TId\n    // this.customId = customId as TCustomId\n    this.fullPath = fullPath as TFullPath\n    this.to = fullPath as TrimPathRight<TFullPath>\n  }\n\n  addChildren = <TNewChildren extends AnyRoute[]>(\n    children: TNewChildren,\n  ): Route<\n    TParentRoute,\n    TPath,\n    TFullPath,\n    TCustomId,\n    TId,\n    TSearchSchema,\n    TFullSearchSchema,\n    TParams,\n    TAllParams,\n    TRouteContext,\n    TAllContext,\n    TRouterContext,\n    TNewChildren,\n    TRouteTree\n  > => {\n    this.children = children as any\n    return this as any\n  }\n\n  update = (\n    options: UpdatableRouteOptions<\n      TFullSearchSchema,\n      TAllParams,\n      Expand<\n        Assign<IsAny<TParentRoute['types']['allContext'], {}>, TRouteContext>\n      >\n    >,\n  ) => {\n    Object.assign(this.options, options)\n    return this\n  }\n\n  static __onInit = (route: any) => {\n    // This is a dummy static method that should get\n    // replaced by a framework specific implementation if necessary\n  }\n\n  useMatch = <TSelected = TAllContext>(opts?: {\n    select?: (search: TAllContext) => TSelected\n  }): TSelected => {\n    return useMatch({ ...opts, from: this.id }) as any\n  }\n  useRouteContext = <TSelected = TAllContext>(opts?: {\n    select?: (search: TAllContext) => TSelected\n  }): TSelected => {\n    return useMatch({\n      ...opts,\n      from: this.id,\n      select: (d: any) => (opts?.select ? opts.select(d.context) : d.context),\n    } as any)\n  }\n  useSearch = <TSelected = TFullSearchSchema>(opts?: {\n    select?: (search: TFullSearchSchema) => TSelected\n  }): TSelected => {\n    return useSearch({ ...opts, from: this.id } as any)\n  }\n  useParams = <TSelected = TAllParams>(opts?: {\n    select?: (search: TAllParams) => TSelected\n  }): TSelected => {\n    return useParams({ ...opts, from: this.id } as any)\n  }\n}\n\nexport type AnyRootRoute = RootRoute<any, any, any>\n\nexport function rootRouteWithContext<TRouterContext extends {}>() {\n  return <\n    TSearchSchema extends Record<string, any> = {},\n    TRouteContext extends RouteContext = RouteContext,\n  >(\n    options?: Omit<\n      RouteOptions<\n        AnyRoute, // TParentRoute\n        RootRouteId, // TCustomId\n        '', // TPath\n        TSearchSchema, // TSearchSchema\n        TSearchSchema, // TFullSearchSchema\n        {}, // TParams\n        {}, // TAllParams\n        TRouteContext, // TRouteContext\n        Assign<TRouterContext, TRouteContext> // TAllContext\n      >,\n      | 'path'\n      | 'id'\n      | 'getParentRoute'\n      | 'caseSensitive'\n      | 'parseParams'\n      | 'stringifyParams'\n    >,\n  ): RootRoute<TSearchSchema, TRouteContext, TRouterContext> => {\n    return new RootRoute(options) as any\n  }\n}\n\nexport class RootRoute<\n  TSearchSchema extends Record<string, any> = {},\n  TRouteContext extends RouteContext = RouteContext,\n  TRouterContext extends {} = {},\n> extends Route<\n  any, // TParentRoute\n  '/', // TPath\n  '/', // TFullPath\n  string, // TCustomId\n  RootRouteId, // TId\n  TSearchSchema, // TSearchSchema\n  TSearchSchema, // TFullSearchSchema\n  {}, // TParams\n  {}, // TAllParams\n  TRouteContext, // TRouteContext\n  Expand<Assign<TRouterContext, TRouteContext>>, // TAllContext\n  TRouterContext, // TRouterContext\n  any, // TChildren\n  any // TRouteTree\n> {\n  constructor(\n    options?: Omit<\n      RouteOptions<\n        AnyRoute, // TParentRoute\n        RootRouteId, // TCustomId\n        '', // TPath\n        TSearchSchema, // TSearchSchema\n        TSearchSchema, // TFullSearchSchema\n        {}, // TParams\n        {}, // TAllParams\n        TRouteContext, // TRouteContext\n        Assign<TRouterContext, TRouteContext> // TAllContext\n      >,\n      | 'path'\n      | 'id'\n      | 'getParentRoute'\n      | 'caseSensitive'\n      | 'parseParams'\n      | 'stringifyParams'\n    >,\n  ) {\n    super(options as any)\n  }\n}\n\nexport type ResolveFullPath<\n  TParentRoute extends AnyRoute,\n  TPath extends string,\n  TPrefixed = RoutePrefix<TParentRoute['fullPath'], TPath>,\n> = TPrefixed extends RootRouteId ? '/' : TPrefixed\n\ntype RoutePrefix<\n  TPrefix extends string,\n  TPath extends string,\n> = string extends TPath\n  ? RootRouteId\n  : TPath extends string\n  ? TPrefix extends RootRouteId\n    ? TPath extends '/'\n      ? '/'\n      : `/${TrimPath<TPath>}`\n    : `${TPrefix}/${TPath}` extends '/'\n    ? '/'\n    : `/${TrimPathLeft<`${TrimPathRight<TPrefix>}/${TrimPath<TPath>}`>}`\n  : never\n\nexport type TrimPath<T extends string> = '' extends T\n  ? ''\n  : TrimPathRight<TrimPathLeft<T>>\n\nexport type TrimPathLeft<T extends string> =\n  T extends `${RootRouteId}/${infer U}`\n    ? TrimPathLeft<U>\n    : T extends `/${infer U}`\n    ? TrimPathLeft<U>\n    : T\nexport type TrimPathRight<T extends string> = T extends '/'\n  ? '/'\n  : T extends `${infer U}/`\n  ? TrimPathRight<U>\n  : T\n\nexport type RouteMask<TRouteTree extends AnyRoute> = {\n  routeTree: TRouteTree\n  from: RoutePaths<TRouteTree>\n  to?: any\n  params?: any\n  search?: any\n  hash?: any\n  state?: any\n  unmaskOnReload?: boolean\n}\n\nexport function createRouteMask<\n  TRouteTree extends AnyRoute,\n  TFrom extends RoutePaths<TRouteTree>,\n  TTo extends string,\n>(\n  opts: {\n    routeTree: TRouteTree\n  } & ToSubOptions<TRouteTree, TFrom, TTo>,\n): RouteMask<TRouteTree> {\n  return opts as any\n}\n\nexport type RouteProps<\n  TFullSearchSchema extends Record<string, any> = AnySearchSchema,\n  TAllParams extends AnyPathParams = AnyPathParams,\n  TAllContext extends Record<string, any> = AnyContext,\n> = {\n  useMatch: <TSelected = TAllContext>(opts?: {\n    select?: (search: TAllContext) => TSelected\n  }) => TSelected\n  useRouteContext: <TSelected = TAllContext>(opts?: {\n    select?: (search: TAllContext) => TSelected\n  }) => TSelected\n  useSearch: <TSelected = TFullSearchSchema>(opts?: {\n    select?: (search: TFullSearchSchema) => TSelected\n  }) => TSelected\n  useParams: <TSelected = TAllParams>(opts?: {\n    select?: (search: TAllParams) => TSelected\n  }) => TSelected\n}\n\nexport type ErrorRouteProps<\n  TFullSearchSchema extends Record<string, any> = AnySearchSchema,\n  TAllParams extends AnyPathParams = AnyPathParams,\n  TAllContext extends Record<string, any> = AnyContext,\n> = {\n  error: unknown\n  info: { componentStack: string }\n} & RouteProps<TFullSearchSchema, TAllParams, TAllContext>\n\nexport type PendingRouteProps<\n  TFullSearchSchema extends Record<string, any> = AnySearchSchema,\n  TAllParams extends AnyPathParams = AnyPathParams,\n  TAllContext extends Record<string, any> = AnyContext,\n> = RouteProps<TFullSearchSchema, TAllParams, TAllContext>\n//\n\nexport type ReactNode = any\n\nexport type SyncRouteComponent<TProps> =\n  | ((props: TProps) => ReactNode)\n  | React.LazyExoticComponent<(props: TProps) => ReactNode>\n\nexport type AsyncRouteComponent<TProps> = SyncRouteComponent<TProps> & {\n  preload?: () => Promise<void>\n}\n\nexport type RouteComponent<\n  TFullSearchSchema extends Record<string, any>,\n  TAllParams extends AnyPathParams,\n  TAllContext extends Record<string, any>,\n> = AsyncRouteComponent<RouteProps<TFullSearchSchema, TAllParams, TAllContext>>\n\nexport type ErrorRouteComponent<\n  TFullSearchSchema extends Record<string, any>,\n  TAllParams extends AnyPathParams,\n  TAllContext extends Record<string, any>,\n> = AsyncRouteComponent<\n  ErrorRouteProps<TFullSearchSchema, TAllParams, TAllContext>\n>\n\nexport type PendingRouteComponent<\n  TFullSearchSchema extends Record<string, any>,\n  TAllParams extends AnyPathParams,\n  TAllContext extends Record<string, any>,\n> = AsyncRouteComponent<\n  PendingRouteProps<TFullSearchSchema, TAllParams, TAllContext>\n>\n\nexport type AnyRouteComponent = RouteComponent<any, any, any>\n","import * as React from 'react'\nimport { useMatch } from './Matches'\nimport { useRouter } from './RouterProvider'\nimport { Trim } from './fileRoute'\nimport { LocationState, ParsedLocation } from './location'\nimport { AnyRoute, ReactNode } from './route'\nimport {\n  AllParams,\n  FullSearchSchema,\n  RouteByPath,\n  RouteIds,\n  RoutePaths,\n} from './routeInfo'\nimport { RegisteredRouter } from './router'\nimport { MakeLinkOptions, MakeLinkPropsOptions } from './useNavigate'\nimport {\n  Expand,\n  NoInfer,\n  NonNullableUpdater,\n  PickRequired,\n  UnionToIntersection,\n  Updater,\n  functionalUpdate,\n} from './utils'\n\nexport type LinkInfo =\n  | {\n      type: 'external'\n      href: string\n    }\n  | {\n      type: 'internal'\n      next: ParsedLocation\n      handleFocus: (e: any) => void\n      handleClick: (e: any) => void\n      handleEnter: (e: any) => void\n      handleLeave: (e: any) => void\n      handleTouchStart: (e: any) => void\n      isActive: boolean\n      disabled?: boolean\n    }\n\nexport type CleanPath<T extends string> = T extends `${infer L}//${infer R}`\n  ? CleanPath<`${CleanPath<L>}/${CleanPath<R>}`>\n  : T extends `${infer L}//`\n  ? `${CleanPath<L>}/`\n  : T extends `//${infer L}`\n  ? `/${CleanPath<L>}`\n  : T\n\nexport type Split<S, TIncludeTrailingSlash = true> = S extends unknown\n  ? string extends S\n    ? string[]\n    : S extends string\n    ? CleanPath<S> extends ''\n      ? []\n      : TIncludeTrailingSlash extends true\n      ? CleanPath<S> extends `${infer T}/`\n        ? [...Split<T>, '/']\n        : CleanPath<S> extends `/${infer U}`\n        ? Split<U>\n        : CleanPath<S> extends `${infer T}/${infer U}`\n        ? [...Split<T>, ...Split<U>]\n        : [S]\n      : CleanPath<S> extends `${infer T}/${infer U}`\n      ? [...Split<T>, ...Split<U>]\n      : S extends string\n      ? [S]\n      : never\n    : never\n  : never\n\nexport type ParsePathParams<T extends string> = keyof {\n  [K in Trim<Split<T>[number], '_'> as K extends `$${infer L}` ? L : never]: K\n}\n\nexport type Join<T, Delimiter extends string = '/'> = T extends []\n  ? ''\n  : T extends [infer L extends string]\n  ? L\n  : T extends [infer L extends string, ...infer Tail extends [...string[]]]\n  ? CleanPath<`${L}${Delimiter}${Join<Tail>}`>\n  : never\n\nexport type Last<T extends any[]> = T extends [...infer _, infer L] ? L : never\n\nexport type RelativeToPathAutoComplete<\n  AllPaths extends string,\n  TFrom extends string,\n  TTo extends string,\n  SplitPaths extends string[] = Split<AllPaths, false>,\n> = TTo extends `..${infer _}`\n  ? SplitPaths extends [\n      ...Split<ResolveRelativePath<TFrom, TTo>, false>,\n      ...infer TToRest,\n    ]\n    ? `${CleanPath<\n        Join<\n          [\n            ...Split<TTo, false>,\n            ...(\n              | TToRest\n              | (Split<\n                  ResolveRelativePath<TFrom, TTo>,\n                  false\n                >['length'] extends 1\n                  ? never\n                  : ['../'])\n            ),\n          ]\n        >\n      >}`\n    : never\n  : TTo extends `./${infer RestTTo}`\n  ? SplitPaths extends [\n      ...Split<TFrom, false>,\n      ...Split<RestTTo, false>,\n      ...infer RestPath,\n    ]\n    ? `${TTo}${Join<RestPath>}`\n    : never\n  :\n      | (TFrom extends `/`\n          ? never\n          : SplitPaths extends [...Split<TFrom, false>, ...infer RestPath]\n          ? Join<RestPath> extends { length: 0 }\n            ? never\n            : './'\n          : never)\n      | (TFrom extends `/` ? never : '../')\n      | AllPaths\n\nexport type NavigateOptions<\n  TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n  TFrom extends RoutePaths<TRouteTree> = '/',\n  TTo extends string = '',\n  TMaskFrom extends RoutePaths<TRouteTree> = TFrom,\n  TMaskTo extends string = '',\n> = ToOptions<TRouteTree, TFrom, TTo, TMaskFrom, TMaskTo> & {\n  // `replace` is a boolean that determines whether the navigation should replace the current history entry or push a new one.\n  replace?: boolean\n  resetScroll?: boolean\n  // If set to `true`, the link's underlying navigate() call will be wrapped in a `React.startTransition` call. Defaults to `true`.\n  startTransition?: boolean\n}\n\nexport type ToOptions<\n  TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n  TFrom extends RoutePaths<TRouteTree> = '/',\n  TTo extends string = '',\n  TMaskFrom extends RoutePaths<TRouteTree> = '/',\n  TMaskTo extends string = '',\n> = ToSubOptions<TRouteTree, TFrom, TTo> & {\n  mask?: ToMaskOptions<TRouteTree, TMaskFrom, TMaskTo>\n}\n\nexport type ToMaskOptions<\n  TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n  TMaskFrom extends RoutePaths<TRouteTree> = '/',\n  TMaskTo extends string = '',\n> = ToSubOptions<TRouteTree, TMaskFrom, TMaskTo> & {\n  unmaskOnReload?: boolean\n}\n\nexport type ToSubOptions<\n  TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n  TFrom extends RoutePaths<TRouteTree> = '/',\n  TTo extends string = '',\n  TResolved = ResolveRelativePath<TFrom, NoInfer<TTo>>,\n> = {\n  to?: ToPathOption<TRouteTree, TFrom, TTo>\n  // The new has string or a function to update it\n  hash?: true | Updater<string>\n  // State to pass to the history stack\n  state?: true | NonNullableUpdater<LocationState>\n  // The source route path. This is automatically set when using route-level APIs, but for type-safe relative routing on the router itself, this is required\n  from?: TFrom\n  // // When using relative route paths, this option forces resolution from the current path, instead of the route API's path or `from` path\n  // fromCurrent?: boolean\n} & CheckPath<TRouteTree, NoInfer<TResolved>, {}> &\n  SearchParamOptions<TRouteTree, TFrom, TTo, TResolved> &\n  PathParamOptions<TRouteTree, TFrom, TResolved>\n\nexport type SearchParamOptions<\n  TRouteTree extends AnyRoute,\n  TFrom,\n  TTo,\n  TResolved = ResolveRelativePath<TFrom, NoInfer<TTo>>,\n  TFromSearchEnsured = '/' extends TFrom\n    ? FullSearchSchema<TRouteTree>\n    : Expand<\n        UnionToIntersection<\n          PickRequired<\n            RouteByPath<TRouteTree, TFrom>['types']['fullSearchSchema']\n          >\n        >\n      >,\n  TFromSearchOptional = Omit<AllParams<TRouteTree>, keyof TFromSearchEnsured>,\n  TFromSearch = Expand<TFromSearchEnsured & TFromSearchOptional>,\n  TToSearch = '' extends TTo\n    ? FullSearchSchema<TRouteTree>\n    : Expand<RouteByPath<TRouteTree, TResolved>['types']['fullSearchSchema']>,\n> = keyof PickRequired<TToSearch> extends never\n  ? {\n      search?: true | SearchReducer<TFromSearch, TToSearch>\n    }\n  : {\n      search: TFromSearchEnsured extends PickRequired<TToSearch>\n        ? true | SearchReducer<TFromSearch, TToSearch>\n        : SearchReducer<TFromSearch, TToSearch>\n    }\n\ntype SearchReducer<TFrom, TTo> = TTo | ((current: TFrom) => TTo)\n\nexport type PathParamOptions<\n  TRouteTree extends AnyRoute,\n  TFrom,\n  TTo,\n  TFromParamsEnsured = Expand<\n    UnionToIntersection<\n      PickRequired<RouteByPath<TRouteTree, TFrom>['types']['allParams']>\n    >\n  >,\n  TFromParamsOptional = Omit<AllParams<TRouteTree>, keyof TFromParamsEnsured>,\n  TFromParams = Expand<TFromParamsOptional & TFromParamsEnsured>,\n  TToParams = Expand<RouteByPath<TRouteTree, TTo>['types']['allParams']>,\n> = keyof PickRequired<TToParams> extends never\n  ? {\n      params?: true | ParamsReducer<TFromParams, TToParams>\n    }\n  : {\n      params: TFromParamsEnsured extends PickRequired<TToParams>\n        ? true | ParamsReducer<TFromParams, TToParams>\n        : ParamsReducer<TFromParams, TToParams>\n    }\n\ntype ParamsReducer<TFrom, TTo> = TTo | ((current: TFrom) => TTo)\n\nexport type ToPathOption<\n  TRouteTree extends AnyRoute = AnyRoute,\n  TFrom extends RoutePaths<TRouteTree> = '/',\n  TTo extends string = '',\n> =\n  | TTo\n  | RelativeToPathAutoComplete<\n      RoutePaths<TRouteTree>,\n      NoInfer<TFrom> extends string ? NoInfer<TFrom> : '',\n      NoInfer<TTo> & string\n    >\n\nexport type ToIdOption<\n  TRouteTree extends AnyRoute = AnyRoute,\n  TFrom extends RoutePaths<TRouteTree> = '/',\n  TTo extends string = '',\n> =\n  | TTo\n  | RelativeToPathAutoComplete<\n      RouteIds<TRouteTree>,\n      NoInfer<TFrom> extends string ? NoInfer<TFrom> : '',\n      NoInfer<TTo> & string\n    >\n\nexport interface ActiveOptions {\n  exact?: boolean\n  includeHash?: boolean\n  includeSearch?: boolean\n}\n\nexport type LinkOptions<\n  TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n  TFrom extends RoutePaths<TRouteTree> = '/',\n  TTo extends string = '',\n  TMaskFrom extends RoutePaths<TRouteTree> = TFrom,\n  TMaskTo extends string = '',\n> = NavigateOptions<TRouteTree, TFrom, TTo, TMaskFrom, TMaskTo> & {\n  // The standard anchor tag target attribute\n  target?: HTMLAnchorElement['target']\n  // Defaults to `{ exact: false, includeHash: false }`\n  activeOptions?: ActiveOptions\n  // If set, will preload the linked route on hover and cache it for this many milliseconds in hopes that the user will eventually navigate there.\n  preload?: false | 'intent'\n  // Delay intent preloading by this many milliseconds. If the intent exits before this delay, the preload will be cancelled.\n  preloadDelay?: number\n  // If true, will render the link without the href attribute\n  disabled?: boolean\n}\n\nexport type CheckRelativePath<\n  TRouteTree extends AnyRoute,\n  TFrom,\n  TTo,\n> = TTo extends string\n  ? TFrom extends string\n    ? ResolveRelativePath<TFrom, TTo> extends RoutePaths<TRouteTree>\n      ? {}\n      : {\n          Error: `${TFrom} + ${TTo} resolves to ${ResolveRelativePath<\n            TFrom,\n            TTo\n          >}, which is not a valid route path.`\n          'Valid Route Paths': RoutePaths<TRouteTree>\n        }\n    : {}\n  : {}\n\nexport type CheckPath<TRouteTree extends AnyRoute, TPath, TPass> = Exclude<\n  TPath,\n  RoutePaths<TRouteTree>\n> extends never\n  ? TPass\n  : CheckPathError<TRouteTree, Exclude<TPath, RoutePaths<TRouteTree>>>\n\nexport type CheckPathError<TRouteTree extends AnyRoute, TInvalids> = {\n  to: RoutePaths<TRouteTree>\n}\n\nexport type CheckId<TRouteTree extends AnyRoute, TPath, TPass> = Exclude<\n  TPath,\n  RouteIds<TRouteTree>\n> extends never\n  ? TPass\n  : CheckIdError<TRouteTree, Exclude<TPath, RouteIds<TRouteTree>>>\n\nexport type CheckIdError<TRouteTree extends AnyRoute, TInvalids> = {\n  Error: `${TInvalids extends string\n    ? TInvalids\n    : never} is not a valid route ID.`\n  'Valid Route IDs': RouteIds<TRouteTree>\n}\n\nexport type ResolveRelativePath<TFrom, TTo = '.'> = TFrom extends string\n  ? TTo extends string\n    ? TTo extends '.'\n      ? TFrom\n      : TTo extends `./`\n      ? Join<[TFrom, '/']>\n      : TTo extends `./${infer TRest}`\n      ? ResolveRelativePath<TFrom, TRest>\n      : TTo extends `/${infer TRest}`\n      ? TTo\n      : Split<TTo> extends ['..', ...infer ToRest]\n      ? Split<TFrom> extends [...infer FromRest, infer FromTail]\n        ? ToRest extends ['/']\n          ? Join<[...FromRest, '/']>\n          : ResolveRelativePath<Join<FromRest>, Join<ToRest>>\n        : never\n      : Split<TTo> extends ['.', ...infer ToRest]\n      ? ToRest extends ['/']\n        ? Join<[TFrom, '/']>\n        : ResolveRelativePath<TFrom, Join<ToRest>>\n      : CleanPath<Join<['/', ...Split<TFrom>, ...Split<TTo>]>>\n    : never\n  : never\n\nexport function useLinkProps<\n  TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n  TFrom extends RoutePaths<TRouteTree> = '/',\n  TTo extends string = '',\n  TMaskFrom extends RoutePaths<TRouteTree> = '/',\n  TMaskTo extends string = '',\n>(\n  options: MakeLinkPropsOptions<TRouteTree, TFrom, TTo, TMaskFrom, TMaskTo>,\n): React.AnchorHTMLAttributes<HTMLAnchorElement> {\n  const { buildLink } = useRouter()\n  const match = useMatch({\n    strict: false,\n  })\n\n  const {\n    // custom props\n    type,\n    children,\n    target,\n    activeProps = () => ({ className: 'active' }),\n    inactiveProps = () => ({}),\n    activeOptions,\n    disabled,\n    hash,\n    search,\n    params,\n    to,\n    state,\n    mask,\n    preload,\n    preloadDelay,\n    replace,\n    startTransition,\n    resetScroll,\n    // element props\n    style,\n    className,\n    onClick,\n    onFocus,\n    onMouseEnter,\n    onMouseLeave,\n    onTouchStart,\n    ...rest\n  } = options\n\n  const linkInfo = buildLink({\n    from: options.to ? match.pathname : undefined,\n    ...options,\n  } as any)\n\n  if (linkInfo.type === 'external') {\n    const { href } = linkInfo\n    return { href }\n  }\n\n  const {\n    handleClick,\n    handleFocus,\n    handleEnter,\n    handleLeave,\n    handleTouchStart,\n    isActive,\n    next,\n  } = linkInfo\n\n  const composeHandlers =\n    (handlers: (undefined | ((e: any) => void))[]) =>\n    (e: React.SyntheticEvent) => {\n      if (e.persist) e.persist()\n      handlers.filter(Boolean).forEach((handler) => {\n        if (e.defaultPrevented) return\n        handler!(e)\n      })\n    }\n\n  // Get the active props\n  const resolvedActiveProps: React.HTMLAttributes<HTMLAnchorElement> = isActive\n    ? functionalUpdate(activeProps as any, {}) ?? {}\n    : {}\n\n  // Get the inactive props\n  const resolvedInactiveProps: React.HTMLAttributes<HTMLAnchorElement> =\n    isActive ? {} : functionalUpdate(inactiveProps, {}) ?? {}\n\n  return {\n    ...resolvedActiveProps,\n    ...resolvedInactiveProps,\n    ...rest,\n    href: disabled\n      ? undefined\n      : next.maskedLocation\n      ? next.maskedLocation.href\n      : next.href,\n    onClick: composeHandlers([onClick, handleClick]),\n    onFocus: composeHandlers([onFocus, handleFocus]),\n    onMouseEnter: composeHandlers([onMouseEnter, handleEnter]),\n    onMouseLeave: composeHandlers([onMouseLeave, handleLeave]),\n    onTouchStart: composeHandlers([onTouchStart, handleTouchStart]),\n    target,\n    style: {\n      ...style,\n      ...resolvedActiveProps.style,\n      ...resolvedInactiveProps.style,\n    },\n    className:\n      [\n        className,\n        resolvedActiveProps.className,\n        resolvedInactiveProps.className,\n      ]\n        .filter(Boolean)\n        .join(' ') || undefined,\n    ...(disabled\n      ? {\n          role: 'link',\n          'aria-disabled': true,\n        }\n      : undefined),\n    ['data-status']: isActive ? 'active' : undefined,\n  }\n}\n\nexport interface LinkComponent<TProps extends Record<string, any> = {}> {\n  <\n    TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n    TFrom extends RoutePaths<TRouteTree> = '/',\n    TTo extends string = '',\n    TMaskFrom extends RoutePaths<TRouteTree> = '/',\n    TMaskTo extends string = '',\n  >(\n    props: MakeLinkOptions<TRouteTree, TFrom, TTo, TMaskFrom, TMaskTo> &\n      TProps &\n      React.RefAttributes<HTMLAnchorElement>,\n  ): ReactNode\n}\n\nexport const Link: LinkComponent = React.forwardRef((props: any, ref) => {\n  const linkProps = useLinkProps(props)\n\n  return (\n    <a\n      {...{\n        ref: ref as any,\n        ...linkProps,\n        children:\n          typeof props.children === 'function'\n            ? props.children({\n                isActive: (linkProps as any)['data-status'] === 'active',\n              })\n            : props.children,\n      }}\n    />\n  )\n}) as any\n","import * as React from 'react'\n\nconst useLayoutEffect =\n  typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect\n\nimport { ParsedLocation } from './location'\nimport { useRouter } from './RouterProvider'\nimport { NonNullableUpdater, functionalUpdate } from './utils'\n\nconst windowKey = 'window'\nconst delimiter = '___'\n\nlet weakScrolledElements = new WeakSet<any>()\n\ntype CacheValue = Record<string, { scrollX: number; scrollY: number }>\ntype CacheState = {\n  cached: CacheValue\n  next: CacheValue\n}\n\ntype Cache = {\n  state: CacheState\n  set: (updater: NonNullableUpdater<CacheState>) => void\n}\n\nlet cache: Cache\n\nconst sessionsStorage = typeof window !== 'undefined' && window.sessionStorage\n\nexport type ScrollRestorationOptions = {\n  getKey?: (location: ParsedLocation) => string\n}\n\nconst defaultGetKey = (location: ParsedLocation) => location.state.key!\n\nexport function useScrollRestoration(options?: ScrollRestorationOptions) {\n  const { state, subscribe, resetNextScrollRef } = useRouter()\n\n  useLayoutEffect(() => {\n    const getKey = options?.getKey || defaultGetKey\n\n    if (sessionsStorage) {\n      if (!cache) {\n        cache = (() => {\n          const storageKey = 'tsr-scroll-restoration-v2'\n\n          const state: CacheState = JSON.parse(\n            window.sessionStorage.getItem(storageKey) || 'null',\n          ) || { cached: {}, next: {} }\n\n          return {\n            state,\n            set: (updater) => {\n              cache.state = functionalUpdate(updater, cache.state)\n              window.sessionStorage.setItem(\n                storageKey,\n                JSON.stringify(cache.state),\n              )\n            },\n          }\n        })()\n      }\n    }\n\n    const { history } = window\n    if (history.scrollRestoration) {\n      history.scrollRestoration = 'manual'\n    }\n\n    const onScroll = (event: Event) => {\n      if (weakScrolledElements.has(event.target)) return\n      weakScrolledElements.add(event.target)\n\n      const elementSelector =\n        event.target === document || event.target === window\n          ? windowKey\n          : getCssSelector(event.target)\n\n      if (!cache.state.next[elementSelector]) {\n        cache.set((c) => ({\n          ...c,\n          next: {\n            ...c.next,\n            [elementSelector]: {\n              scrollX: NaN,\n              scrollY: NaN,\n            },\n          },\n        }))\n      }\n    }\n\n    const getCssSelector = (el: any): string => {\n      let path = [],\n        parent\n      while ((parent = el.parentNode)) {\n        path.unshift(\n          `${el.tagName}:nth-child(${\n            ([].indexOf as any).call(parent.children, el) + 1\n          })`,\n        )\n        el = parent\n      }\n      return `${path.join(' > ')}`.toLowerCase()\n    }\n\n    if (typeof document !== 'undefined') {\n      document.addEventListener('scroll', onScroll, true)\n    }\n\n    const unsubOnBeforeLoad = subscribe('onBeforeLoad', (event) => {\n      if (event.pathChanged) {\n        const restoreKey = getKey(event.fromLocation)\n        for (const elementSelector in cache.state.next) {\n          const entry = cache.state.next[elementSelector]!\n          if (elementSelector === windowKey) {\n            entry.scrollX = window.scrollX || 0\n            entry.scrollY = window.scrollY || 0\n          } else if (elementSelector) {\n            const element = document.querySelector(elementSelector)\n            entry.scrollX = element?.scrollLeft || 0\n            entry.scrollY = element?.scrollTop || 0\n          }\n\n          cache.set((c) => {\n            const next = { ...c.next }\n            delete next[elementSelector]\n\n            return {\n              ...c,\n              next,\n              cached: {\n                ...c.cached,\n                [[restoreKey, elementSelector].join(delimiter)]: entry,\n              },\n            }\n          })\n        }\n      }\n    })\n\n    const unsubOnResolved = subscribe('onResolved', (event) => {\n      if (event.pathChanged) {\n        if (!resetNextScrollRef.current) {\n          return\n        }\n\n        resetNextScrollRef.current = true\n\n        const getKey = options?.getKey || defaultGetKey\n\n        const restoreKey = getKey(event.toLocation)\n        let windowRestored = false\n\n        for (const cacheKey in cache.state.cached) {\n          const entry = cache.state.cached[cacheKey]!\n          const [key, elementSelector] = cacheKey.split(delimiter)\n          if (key === restoreKey) {\n            if (elementSelector === windowKey) {\n              windowRestored = true\n              window.scrollTo(entry.scrollX, entry.scrollY)\n            } else if (elementSelector) {\n              const element = document.querySelector(elementSelector)\n              if (element) {\n                element.scrollLeft = entry.scrollX\n                element.scrollTop = entry.scrollY\n              }\n            }\n          }\n        }\n\n        if (!windowRestored) {\n          window.scrollTo(0, 0)\n        }\n\n        cache.set((c) => ({ ...c, next: {} }))\n        weakScrolledElements = new WeakSet<any>()\n      }\n    })\n\n    return () => {\n      document.removeEventListener('scroll', onScroll)\n      unsubOnBeforeLoad()\n      unsubOnResolved()\n    }\n  }, [])\n}\n\nexport function ScrollRestoration(props: ScrollRestorationOptions) {\n  useScrollRestoration(props)\n  return null\n}\n","import * as React from 'react'\nimport { ReactNode } from './route'\nimport { useRouter } from './RouterProvider'\n\nexport function useBlocker(\n  message: string,\n  condition: boolean | any = true,\n): void {\n  const { history } = useRouter()\n\n  React.useEffect(() => {\n    if (!condition) return\n\n    let unblock = history.block((retry, cancel) => {\n      if (window.confirm(message)) {\n        unblock()\n        retry()\n      }\n    })\n\n    return unblock\n  })\n}\n\nexport function Block({ message, condition, children }: PromptProps) {\n  useBlocker(message, condition)\n  return (children ?? null) as ReactNode\n}\n\nexport type PromptProps = {\n  message: string\n  condition?: boolean | any\n  children?: ReactNode\n}\n","import { ParsePathParams } from './link'\nimport {\n  AnyRoute,\n  ResolveFullPath,\n  ResolveFullSearchSchema,\n  MergeFromFromParent,\n  RouteContext,\n  AnyContext,\n  RouteOptions,\n  UpdatableRouteOptions,\n  Route,\n  AnyPathParams,\n  RootRouteId,\n  TrimPathLeft,\n  RouteConstraints,\n} from './route'\nimport { Assign, AssignAll, Expand, IsAny } from './utils'\n\nexport interface FileRoutesByPath {\n  // '/': {\n  //   parentRoute: typeof rootRoute\n  // }\n}\n\ntype Replace<\n  S extends string,\n  From extends string,\n  To extends string,\n> = S extends `${infer Start}${From}${infer Rest}`\n  ? `${Start}${To}${Replace<Rest, From, To>}`\n  : S\n\nexport type TrimLeft<\n  T extends string,\n  S extends string,\n> = T extends `${S}${infer U}` ? U : T\n\nexport type TrimRight<\n  T extends string,\n  S extends string,\n> = T extends `${infer U}${S}` ? U : T\n\nexport type Trim<T extends string, S extends string> = TrimLeft<\n  TrimRight<T, S>,\n  S\n>\n\nexport type RemoveUnderScores<T extends string> = Replace<\n  Replace<TrimRight<TrimLeft<T, '/_'>, '_'>, '_/', '/'>,\n  '/_',\n  '/'\n>\n\nexport type ResolveFilePath<\n  TParentRoute extends AnyRoute,\n  TFilePath extends string,\n> = TParentRoute['id'] extends RootRouteId\n  ? TrimPathLeft<TFilePath>\n  : Replace<\n      TrimPathLeft<TFilePath>,\n      TrimPathLeft<TParentRoute['types']['customId']>,\n      ''\n    >\n\nexport type FileRoutePath<\n  TParentRoute extends AnyRoute,\n  TFilePath extends string,\n> = ResolveFilePath<TParentRoute, TFilePath> extends `_${infer _}`\n  ? string\n  : ResolveFilePath<TParentRoute, TFilePath>\n\nexport class FileRoute<\n  TFilePath extends keyof FileRoutesByPath,\n  TParentRoute extends AnyRoute = FileRoutesByPath[TFilePath]['parentRoute'],\n  TId extends RouteConstraints['TId'] = TFilePath,\n  TPath extends RouteConstraints['TPath'] = FileRoutePath<\n    TParentRoute,\n    TFilePath\n  >,\n  TFullPath extends RouteConstraints['TFullPath'] = ResolveFullPath<\n    TParentRoute,\n    RemoveUnderScores<TPath>\n  >,\n> {\n  constructor(public path: TFilePath) {}\n\n  createRoute = <\n    TSearchSchema extends RouteConstraints['TSearchSchema'] = {},\n    TFullSearchSchema extends RouteConstraints['TFullSearchSchema'] = ResolveFullSearchSchema<\n      TParentRoute,\n      TSearchSchema\n    >,\n    TParams extends RouteConstraints['TParams'] = ParsePathParams<TPath> extends never\n      ? AnyPathParams\n      : Record<ParsePathParams<TPath>, RouteConstraints['TPath']>,\n    TAllParams extends RouteConstraints['TAllParams'] = MergeFromFromParent<\n      TParentRoute['types']['allParams'],\n      TParams\n    >,\n    TRouteContext extends RouteConstraints['TRouteContext'] = RouteContext,\n    TContext extends Expand<\n      Assign<IsAny<TParentRoute['types']['allContext'], {}>, TRouteContext>\n    > = Expand<\n      Assign<IsAny<TParentRoute['types']['allContext'], {}>, TRouteContext>\n    >,\n    TRouterContext extends RouteConstraints['TRouterContext'] = AnyContext,\n    TChildren extends RouteConstraints['TChildren'] = unknown,\n    TRouteTree extends RouteConstraints['TRouteTree'] = AnyRoute,\n  >(\n    options: Omit<\n      RouteOptions<\n        TParentRoute,\n        string,\n        string,\n        TSearchSchema,\n        TFullSearchSchema,\n        TParams,\n        TAllParams,\n        TRouteContext,\n        TContext\n      >,\n      'getParentRoute' | 'path' | 'id'\n    > &\n      UpdatableRouteOptions<TFullSearchSchema, TAllParams, TContext>,\n  ): Route<\n    TParentRoute,\n    TPath,\n    TFullPath,\n    TFilePath,\n    TId,\n    TSearchSchema,\n    TFullSearchSchema,\n    TParams,\n    TAllParams,\n    TRouteContext,\n    TContext,\n    TRouterContext,\n    TChildren,\n    TRouteTree\n  > => {\n    const route = new Route(options as any)\n    ;(route as any).isRoot = false\n    return route as any\n  }\n}\n","import * as React from 'react'\nimport { useMatch } from './Matches'\nimport { useRouter } from './RouterProvider'\nimport { LinkOptions, NavigateOptions } from './link'\nimport { AnyRoute } from './route'\nimport { RoutePaths } from './routeInfo'\nimport { RegisteredRouter } from './router'\nimport { useLayoutEffect } from './utils'\n\nexport function useNavigate<\n  TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n  TDefaultFrom extends RoutePaths<TRouteTree> = '/',\n>(defaultOpts?: { from?: TDefaultFrom }) {\n  const { navigate } = useRouter()\n  const match = useMatch({\n    strict: false,\n  })\n  return React.useCallback(\n    <\n      TFrom extends RoutePaths<TRouteTree> = TDefaultFrom,\n      TTo extends string = '',\n      TMaskFrom extends RoutePaths<TRouteTree> = '/',\n      TMaskTo extends string = '',\n    >(\n      opts?: NavigateOptions<TRouteTree, TFrom, TTo, TMaskFrom, TMaskTo>,\n    ) => {\n      return navigate({\n        from: opts?.to ? match.pathname : undefined,\n        ...defaultOpts,\n        ...(opts as any),\n      })\n    },\n    [],\n  )\n}\n\nexport function typedNavigate<\n  TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n  TDefaultFrom extends RoutePaths<TRouteTree> = '/',\n>(navigate: (opts: NavigateOptions<any>) => Promise<void>) {\n  return navigate as <\n    TFrom extends RoutePaths<TRouteTree> = TDefaultFrom,\n    TTo extends string = '',\n    TMaskFrom extends RoutePaths<TRouteTree> = '/',\n    TMaskTo extends string = '',\n  >(\n    opts?: NavigateOptions<TRouteTree, TFrom, TTo, TMaskFrom, TMaskTo>,\n  ) => Promise<void>\n} //\n\nexport function Navigate<\n  TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n  TFrom extends RoutePaths<TRouteTree> = '/',\n  TTo extends string = '',\n  TMaskFrom extends RoutePaths<TRouteTree> = '/',\n  TMaskTo extends string = '',\n>(props: NavigateOptions<TRouteTree, TFrom, TTo, TMaskFrom, TMaskTo>): null {\n  const { navigate } = useRouter()\n  const match = useMatch({ strict: false })\n\n  useLayoutEffect(() => {\n    navigate({\n      from: props.to ? match.pathname : undefined,\n      ...props,\n    } as any)\n  }, [])\n\n  return null\n}\n\nexport type MakeLinkPropsOptions<\n  TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n  TFrom extends RoutePaths<TRouteTree> = '/',\n  TTo extends string = '',\n  TMaskFrom extends RoutePaths<TRouteTree> = '/',\n  TMaskTo extends string = '',\n> = LinkPropsOptions<TRouteTree, TFrom, TTo, TMaskFrom, TMaskTo> &\n  React.AnchorHTMLAttributes<HTMLAnchorElement>\n\nexport type MakeLinkOptions<\n  TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n  TFrom extends RoutePaths<TRouteTree> = '/',\n  TTo extends string = '',\n  TMaskFrom extends RoutePaths<TRouteTree> = '/',\n  TMaskTo extends string = '',\n> = LinkPropsOptions<TRouteTree, TFrom, TTo, TMaskFrom, TMaskTo> &\n  Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, 'children'> & {\n    // If a function is passed as a child, it will be given the `isActive` boolean to aid in further styling on the element it returns\n    children?:\n      | React.ReactNode\n      | ((state: { isActive: boolean }) => React.ReactNode)\n  }\n\nexport type LinkPropsOptions<\n  TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n  TFrom extends RoutePaths<TRouteTree> = '/',\n  TTo extends string = '',\n  TMaskFrom extends RoutePaths<TRouteTree> = '/',\n  TMaskTo extends string = '',\n> = LinkOptions<TRouteTree, TFrom, TTo, TMaskFrom, TMaskTo> & {\n  // A function that returns additional props for the `active` state of this link. These props override other props passed to the link (`style`'s are merged, `className`'s are concatenated)\n  activeProps?:\n    | React.AnchorHTMLAttributes<HTMLAnchorElement>\n    | (() => React.AnchorHTMLAttributes<HTMLAnchorElement>)\n  // A function that returns additional props for the `inactive` state of this link. These props override other props passed to the link (`style`'s are merged, `className`'s are concatenated)\n  inactiveProps?:\n    | React.AnchorHTMLAttributes<HTMLAnchorElement>\n    | (() => React.AnchorHTMLAttributes<HTMLAnchorElement>)\n}\n","import * as React from 'react'\nimport { AsyncRouteComponent } from './route'\n\nexport function lazyRouteComponent<\n  T extends Record<string, any>,\n  TKey extends keyof T = 'default',\n>(\n  importer: () => Promise<T>,\n  exportName?: TKey,\n): T[TKey] extends (props: infer TProps) => any\n  ? AsyncRouteComponent<TProps>\n  : never {\n  let loadPromise: Promise<any>\n\n  const load = () => {\n    if (!loadPromise) {\n      loadPromise = importer()\n    }\n\n    return loadPromise\n  }\n\n  const lazyComp = React.lazy(async () => {\n    const moduleExports = await load()\n    const comp = moduleExports[exportName ?? 'default']\n    return {\n      default: comp,\n    }\n  })\n  ;(lazyComp as any).preload = load\n\n  return lazyComp as any\n}\n"],"names":["pushStateEvent","popStateEvent","beforeUnloadEvent","beforeUnloadListener","event","preventDefault","returnValue","stopBlocking","removeEventListener","capture","createHistory","opts","location","getLocation","subscribers","Set","blockers","queue","onUpdate","forEach","subscriber","tryUnblock","length","shift","queueTask","task","push","subscribe","cb","add","delete","path","state","assignKey","pushState","replace","replaceState","go","index","back","forward","createHref","str","block","addEventListener","filter","b","flush","destroy","notify","key","createRandomKey","createBrowserHistory","getHref","window","pathname","search","hash","currentLocation","parseLocation","history","next","scheduled","tracking","isPush","href","undefined","fn","queueHistoryAction","type","Promise","resolve","then","onPushPop","originalPushState","originalReplaceState","n","res","apply","arguments","hashIndex","indexOf","searchIndex","substring","Math","min","slice","random","toString","invariant","condition","message","Error","warning","CatchBoundary","props","errorComponent","ErrorComponent","React","createElement","CatchBoundaryImpl","resetKey","onCatch","children","error","Component","static","componentDidUpdate","prevProps","prevState","this","setState","componentDidCatch","console","render","show","setShow","useState","process","style","padding","maxWidth","display","alignItems","gap","fontSize","appearance","border","fontWeight","borderRadius","onClick","d","height","color","overflow","isServer","document","last","arr","functionalUpdate","updater","previous","pick","parent","keys","reduce","obj","replaceEqualDeep","prev","_next","array","Array","isArray","isPlainObject","prevSize","Object","nextItems","nextSize","copy","equalItems","i","o","hasObjectPrototype","ctor","constructor","prot","prototype","hasOwnProperty","call","partialDeepEqual","a","some","item","useStableCallback","fnRef","useRef","current","args","useLayoutEffect","useEffect","joinPaths","paths","cleanPath","Boolean","join","trimPathLeft","trimPathRight","trimPath","resolvePath","basepath","base","to","RegExp","baseSegments","parsePathname","toSegments","toSegment","value","pop","map","segments","split","part","charAt","interpolatePath","params","leaveWildcards","segment","matchPathname","currentPathname","matchLocation","pathParams","matchByPath","from","routeSegments","startsWith","unshift","max","baseSegment","routeSegment","isLastBaseSegment","isLastRouteSegment","caseSensitive","toLowerCase","fuzzy","isRedirect","encode","pfx","k","tmp","encodeURIComponent","toValue","mix","decodeURIComponent","decode","out","concat","defaultParseSearch","parseSearchWith","JSON","parse","defaultStringifySearch","stringifySearchWith","stringify","parser","searchStr","query","err","val","stringifyValue","componentTypes","routerContext","createContext","__TSR_ROUTER_CONTEXT__","preloadWarning","SearchParamError","PathParamError","getInitialRouterState","status","resolvedLocation","matches","pendingMatches","lastUpdated","Date","now","getRouteMatch","id","find","useRouterState","useRouter","select","resolvedContext","useContext","Matches","routesById","locationKey","route","rootRouteId","useCallback","useMatch","useRouteContext","useSearch","useParams","matchesContext","Provider","Match","defaultPending","options","match","routeId","PendingComponent","pendingComponent","defaultPendingComponent","routeErrorComponent","defaultErrorComponent","ResolvedSuspenseBoundary","wrapInSuspense","Suspense","fallback","MatchInner","loadPromise","comp","component","defaultComponent","Outlet","useMatchRoute","matchRoute","pending","rest","nearestMatch","nearestMatchRouteId","matchRouteId","strict","Route","isRoot","getParentRoute","__onInit","init","originalIndex","parentRoute","customId","fullPath","addChildren","update","assign","context","RootRoute","super","useLinkProps","buildLink","target","activeProps","className","inactiveProps","activeOptions","disabled","mask","preload","preloadDelay","startTransition","resetScroll","onFocus","onMouseEnter","onMouseLeave","onTouchStart","linkInfo","handleClick","handleFocus","handleEnter","handleLeave","handleTouchStart","isActive","composeHandlers","handlers","e","persist","handler","defaultPrevented","resolvedActiveProps","resolvedInactiveProps","maskedLocation","role","Link","forwardRef","ref","linkProps","_extends","windowKey","cache","weakScrolledElements","WeakSet","sessionsStorage","sessionStorage","defaultGetKey","useScrollRestoration","resetNextScrollRef","getKey","storageKey","getItem","cached","set","setItem","scrollRestoration","onScroll","has","elementSelector","getCssSelector","c","scrollX","NaN","scrollY","el","parentNode","tagName","unsubOnBeforeLoad","pathChanged","restoreKey","fromLocation","entry","element","querySelector","scrollLeft","scrollTop","unsubOnResolved","toLocation","windowRestored","cacheKey","scrollTo","useBlocker","unblock","retry","cancel","confirm","createRoute","navigate","defaultPreloadDelay","stringifySearch","parseSearch","routeTree","eventType","listener","emit","routerEvent","router","tempLocationKeyRef","round","navigateTimeoutRef","latestLoadPromiseRef","checkLatest","promise","previousLocation","parsedSearch","reverse","__tempLocation","__tempKey","parsedTempLocation","latestLocationRef","preState","isTransitioning","startReactTransition","useTransition","useMemo","s","resolvePathWithBase","routesByPath","recurseRoutes","routes","String","trimmedFullPath","endsWith","looseRoutesById","flatRoutes","values","trimmed","parsed","score","child","sort","isIndex","rank","matchRoutes","locationSearch","routeParams","routeCursor","matchedParams","matchedRoutes","parseErrors","parsedParamsError","parseParams","parsedParams","cause","throwOnError","interpolatedPath","matchId","existingMatch","hasLoaders","load","updatedAt","routeSearch","isFetching","invalid","paramsError","searchError","abortController","AbortController","fetchedAt","parentMatch","searchInfo","parentSearchInfo","validateSearch","searchDidChange","cancelMatch","abort","cancelMatches","buildLocation","build","dest","fromPathname","fromMatches","stayingMatches","prevParams","nextParams","stringifyParams","preSearchFilters","flat","postSearchFilters","preFilteredSearch","destSearch","postFilteredSearch","hashStr","nextState","unmaskOnReload","buildWithMatches","maskedDest","maskedNext","foundMask","routeMasks","nextMatches","maskedMatches","maskedFinal","final","commitLocation","async","clearTimeout","nextHistory","buildAndCommitLocation","fromString","isExternal","URL","loadMatches","latestPromise","firstBadMatchIndex","entries","handleError","code","routerCode","onError","errorHandlerErr","parentContext","beforeLoadContext","beforeLoad","validResolvedMatches","matchPromises","parentMatchPromise","handleIfRedirect","componentsPromise","all","loaderPromise","_","loaderContext","onErrorError","reject","prevLocation","pathDidChange","debug","previousMatches","exitingMatchIds","includes","enteringMatchIds","hook","preloadRoute","navigateOpts","userPreload","userPreloadDelay","nextOpts","defaultPreload","currentPathSplit","pathIsFuzzyEqual","every","pathTest","exact","hashTest","includeHash","searchTest","includeSearch","catch","warn","metaKey","altKey","ctrlKey","shiftKey","isCtrlEvent","button","preloadTimeout","setTimeout","unsub","nextLocation","initialLoad","baseLocation","routerContextValue","initialEntries","initialIndex","currentState","importer","exportName","lazyComp","lazy","default","objA","objB","is","keysA","contextMatches","findIndex","defaultOpts"],"mappings":";;;;;;;;;;;;;;;;;;;;KAcA,MAAMA,EAAiB,YACjBC,EAAgB,WAChBC,EAAoB,eACpBC,EAAuBC,IAC3BA,EAAMC,iBAECD,EAAME,YAAc,IAEvBC,EAAe,KACnBC,oBAAoBN,EAAmBC,EAAsB,CAC3DM,SAAS,GACT,EAEJ,SAASC,EAAcC,GACrB,IAAIC,EAAWD,EAAKE,cAChBC,EAAc,IAAIC,IAClBC,EAAW,GACXC,EAAQ,GACZ,MAAMC,EAAW,KACfN,EAAWD,EAAKE,cAChBC,EAAYK,SAAQC,GAAcA,KAAa,EAE3CC,EAAa,KACjB,GAAIL,EAASM,OACXN,EAAS,KAAKK,GAAY,KACxBL,EAAW,GACXT,GAAc,SAIlB,KAAOU,EAAMK,QACXL,EAAMM,OAANN,IACD,EAEGO,EAAYC,IAChBR,EAAMS,KAAKD,GACXJ,GAAY,EAEd,MAAO,CACDT,eACF,OAAOA,CACR,EACDe,UAAWC,IACTd,EAAYe,IAAID,GACT,KACLd,EAAYgB,OAAOF,EAAG,GAG1BF,KAAM,CAACK,EAAMC,KACXA,EAAQC,EAAUD,GAClBR,GAAU,KACRb,EAAKuB,UAAUH,EAAMC,EAAOd,EAAS,GACrC,EAEJiB,QAAS,CAACJ,EAAMC,KACdA,EAAQC,EAAUD,GAClBR,GAAU,KACRb,EAAKyB,aAAaL,EAAMC,EAAOd,EAAS,GACxC,EAEJmB,GAAIC,IACFd,GAAU,KACRb,EAAK0B,GAAGC,EAAM,GACd,EAEJC,KAAM,KACJf,GAAU,KACRb,EAAK4B,MAAM,GACX,EAEJC,QAAS,KACPhB,GAAU,KACRb,EAAK6B,SAAS,GACd,EAEJC,WAAYC,GAAO/B,EAAK8B,WAAWC,GACnCC,MAAOf,IACLZ,EAASU,KAAKE,GACU,IAApBZ,EAASM,QACXsB,iBAAiB1C,EAAmBC,EAAsB,CACxDM,SAAS,IAGN,KACLO,EAAWA,EAAS6B,QAAOC,GAAKA,IAAMlB,IACjCZ,EAASM,QACZf,GACD,GAGLwC,MAAO,IAAMpC,EAAKoC,UAClBC,QAAS,IAAMrC,EAAKqC,YACpBC,OAAQ/B,EAEZ,CACA,SAASe,EAAUD,GAIjB,OAHKA,IACHA,EAAQ,CAAA,GAEH,IACFA,EACHkB,IAAKC,IAET,CAkBA,SAASC,EAAqBzC,GAC5B,MAAM0C,EAAU1C,GAAM0C,SAAO,KAAW,GAAGC,OAAO1C,SAAS2C,WAAWD,OAAO1C,SAAS4C,SAASF,OAAO1C,SAAS6C,QACzGhB,EAAa9B,GAAM8B,YAAU,CAAKV,GAAQA,GAChD,IAAI2B,EAAkBC,EAAcN,IAAWC,OAAOM,QAAQ5B,OAE9D,IAAI6B,EAUAC,EAJAC,GAAW,EAQf,MAOMhB,EAAQ,KANZgB,GAAW,EAQH,MACDF,IACLP,OAAOM,QAAQC,EAAKG,OAAS,YAAc,gBAAgBH,EAAK7B,MAAO,GAAI6B,EAAKI,MAEhFJ,OAAOK,EACPJ,OAAYI,EAAS,EAZvBC,GACAJ,GAAW,CAYT,EAIEK,EAAqB,CAACC,EAAMtC,EAAMC,EAAOd,KAC7C,MAAM+C,EAAOxB,EAAWV,GAGxB2B,EAAkBC,EAAcM,EAAMjC,GAGtC6B,EAAO,CACLI,OACAjC,QACAgC,OAAQH,GAAMG,QAAmB,SAATK,GAG1BnD,IACK4C,IAEHA,EAAYQ,QAAQC,UAAUC,MAAK,IAAMzB,MAC1C,EAEG0B,EAAY,KAChBf,EAAkBC,EAAcN,IAAWC,OAAOM,QAAQ5B,OAC1D4B,EAAQX,QAAQ,EAElB,IAAIyB,EAAoBpB,OAAOM,QAAQ1B,UACnCyC,EAAuBrB,OAAOM,QAAQxB,aAC1C,MAAMwB,EAAUlD,EAAc,CAC5BG,YA5DkB,IAAM6C,EA6DxBxB,UAAW,CAACH,EAAMC,EAAOd,IAAakD,EAAmB,OAAQrC,EAAMC,EAAOd,GAC9EkB,aAAc,CAACL,EAAMC,EAAOd,IAAakD,EAAmB,UAAWrC,EAAMC,EAAOd,GACpFqB,KAAM,IAAMe,OAAOM,QAAQrB,OAC3BC,QAAS,IAAMc,OAAOM,QAAQpB,UAC9BH,GAAIuC,GAAKtB,OAAOM,QAAQvB,GAAGuC,GAC3BnC,WAAYV,GAAQU,EAAWV,GAC/BgB,QACAC,QAAS,KACPM,OAAOM,QAAQ1B,UAAYwC,EAC3BpB,OAAOM,QAAQxB,aAAeuC,EAC9BrB,OAAO9C,oBAAoBR,EAAgByE,GAC3CnB,OAAO9C,oBAAoBP,EAAewE,EAAU,IAexD,OAZAnB,OAAOV,iBAAiB5C,EAAgByE,GACxCnB,OAAOV,iBAAiB3C,EAAewE,GACvCnB,OAAOM,QAAQ1B,UAAY,WACzB,IAAI2C,EAAMH,EAAkBI,MAAMxB,OAAOM,QAASmB,WAElD,OADIhB,GAAUH,EAAQX,SACf4B,CACX,EACEvB,OAAOM,QAAQxB,aAAe,WAC5B,IAAIyC,EAAMF,EAAqBG,MAAMxB,OAAOM,QAASmB,WAErD,OADIhB,GAAUH,EAAQX,SACf4B,CACX,EACSjB,CACT,CAqCA,SAASD,EAAcM,EAAMjC,GAC3B,IAAIgD,EAAYf,EAAKgB,QAAQ,KACzBC,EAAcjB,EAAKgB,QAAQ,KAC/B,MAAO,CACLhB,OACAV,SAAUU,EAAKkB,UAAU,EAAGH,EAAY,EAAIE,EAAc,EAAIE,KAAKC,IAAIL,EAAWE,GAAeF,EAAYE,EAAc,EAAIA,EAAcjB,EAAK3C,QAClJmC,KAAMuB,GAAa,EAAIf,EAAKkB,UAAUH,GAAa,GACnDxB,OAAQ0B,GAAe,EAAIjB,EAAKqB,MAAMJ,GAA4B,IAAfF,OAAmBd,EAAYc,GAAa,GAC/FhD,MAAOA,GAAS,CAAE,EAEtB,CAGA,SAASmB,IACP,OAAQiC,KAAKG,SAAW,GAAGC,SAAS,IAAIL,UAAU,EACpD,CCrRA,SAASM,EAAUC,EAAWC,GAC1B,IAAID,EAIA,MAAM,IAAIE,MANL,mBAWb,CCXA,SAASC,EAAQH,EAAWC,GAgB5B,CCfO,SAASG,EAAcC,GAM5B,MAAMC,EAAiBD,EAAMC,gBAAkBC,EAE/C,OACEC,EAAAC,cAACC,EAAiB,CAChBC,SAAUN,EAAMM,SAChBC,QAASP,EAAMO,QACfC,SAAUA,EAAGC,WACPA,EACKN,EAAMC,cAAcH,EAAgB,CACzCQ,UAIGT,EAAMQ,UAIrB,CAEO,MAAMH,UAA0BF,EAAMO,UAK3CzE,MAAQ,CAAEwE,MAAO,MACjBE,gCAAgCF,GAC9B,MAAO,CAAEA,QACX,CACAG,mBACEC,EAKAC,GAEIA,EAAUL,OAASI,EAAUP,WAAaS,KAAKf,MAAMM,UACvDS,KAAKC,SAAS,CAAEP,MAAO,MAE3B,CACAQ,kBAAkBR,GAChBS,QAAQT,MAAMA,GACdM,KAAKf,MAAMO,UAAUE,EACvB,CACAU,SACE,OAAOJ,KAAKf,MAAMQ,SAASO,KAAK9E,MAClC,EAGK,SAASiE,GAAeO,MAAEA,IAC/B,MAAOW,EAAMC,GAAWlB,EAAMmB,UAASC,GAEvC,OACEpB,EAAAC,cAAA,MAAA,CAAKoB,MAAO,CAAEC,QAAS,QAASC,SAAU,SACxCvB,EAAAC,cAAA,MAAA,CAAKoB,MAAO,CAAEG,QAAS,OAAQC,WAAY,SAAUC,IAAK,UACxD1B,EAAAC,cAAA,SAAA,CAAQoB,MAAO,CAAEM,SAAU,SAAU,yBACrC3B,EAAAC,cAAA,SAAA,CACEoB,MAAO,CACLO,WAAY,OACZD,SAAU,OACVE,OAAQ,yBACRP,QAAS,cACTQ,WAAY,OACZC,aAAc,UAEhBC,QAASA,IAAMd,GAASe,IAAOA,KAE9BhB,EAAO,aAAe,eAG3BjB,EAAAC,cAAA,MAAA,CAAKoB,MAAO,CAAEa,OAAQ,YACrBjB,EACCjB,EAAAC,cAAA,MAAA,KACED,EAAAC,cAAA,MAAA,CACEoB,MAAO,CACLM,SAAU,OACVE,OAAQ,gBACRE,aAAc,SACdT,QAAS,QACTa,MAAO,MACPC,SAAU,SAGX9B,EAAMb,QAAUO,EAAAC,cAAOK,OAAAA,KAAAA,EAAMb,SAAkB,OAGlD,KAGV,OCwCa4C,EAA+B,oBAAbC,SAExB,SAASC,EAAQC,GACtB,OAAOA,EAAIA,EAAIpH,OAAS,EAC1B,CAMO,SAASqH,EACdC,EACAC,GAEA,MAPoB,mBAOLD,EACNA,EAAQC,GAGVD,CACT,CAEO,SAASE,EAA2BC,EAAWC,GACpD,OAAOA,EAAKC,QAAO,CAACC,EAAUhG,KAC5BgG,EAAIhG,GAAO6F,EAAO7F,GACXgG,IACN,CAAS,EACd,CAQO,SAASC,EAAoBC,EAAWC,GAC7C,GAAID,IAASC,EACX,OAAOD,EAGT,MAAMvF,EAAOwF,EAEPC,EAAQC,MAAMC,QAAQJ,IAASG,MAAMC,QAAQ3F,GAEnD,GAAIyF,GAAUG,EAAcL,IAASK,EAAc5F,GAAQ,CACzD,MAAM6F,EAAWJ,EAAQF,EAAK9H,OAASqI,OAAOX,KAAKI,GAAM9H,OACnDsI,EAAYN,EAAQzF,EAAO8F,OAAOX,KAAKnF,GACvCgG,EAAWD,EAAUtI,OACrBwI,EAAYR,EAAQ,GAAK,GAE/B,IAAIS,EAAa,EAEjB,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAUG,IAAK,CACjC,MAAM9G,EAAMoG,EAAQU,EAAIJ,EAAUI,GAClCF,EAAK5G,GAAOiG,EAAiBC,EAAKlG,GAAMW,EAAKX,IACzC4G,EAAK5G,KAASkG,EAAKlG,IACrB6G,GAEJ,CAEA,OAAOL,IAAaG,GAAYE,IAAeL,EAAWN,EAAOU,CACnE,CAEA,OAAOjG,CACT,CAGO,SAAS4F,EAAcQ,GAC5B,IAAKC,EAAmBD,GACtB,OAAO,EAIT,MAAME,EAAOF,EAAEG,YACf,QAAoB,IAATD,EACT,OAAO,EAIT,MAAME,EAAOF,EAAKG,UAClB,QAAKJ,EAAmBG,MAKnBA,EAAKE,eAAe,gBAM3B,CAEA,SAASL,EAAmBD,GAC1B,MAA6C,oBAAtCN,OAAOW,UAAU9E,SAASgF,KAAKP,EACxC,CAEO,SAASQ,EAAiBC,EAAQ5H,GACvC,OAAI4H,IAAM5H,UAIC4H,UAAa5H,IAIpB2G,EAAciB,IAAMjB,EAAc3G,IAC5B6G,OAAOX,KAAKlG,GAAG6H,MAAMzH,IAASuH,EAAiBC,EAAExH,GAAMJ,EAAEI,SAG/DqG,MAAMC,QAAQkB,KAAMnB,MAAMC,QAAQ1G,OAElC4H,EAAEpJ,SAAWwB,EAAExB,QACfoJ,EAAEC,MAAK,CAACC,EAAMtI,KAAWmI,EAAiBG,EAAM9H,EAAER,OAKxD,CAEO,SAASuI,EAAqD1G,GACnE,MAAM2G,EAAQ5E,EAAM6E,OAAO5G,GAC3B2G,EAAME,QAAU7G,EAGhB,OADY+B,EAAM6E,QAAO,IAAIE,IAAgBH,EAAME,WAAWC,KACnDD,OACb,CAyEaE,MAAAA,EACO,oBAAX5H,OAAyB4C,EAAMgF,gBAAkBhF,EAAMiF,UCvUzD,SAASC,EAAUC,GACxB,OAAOC,EAAUD,EAAMxI,OAAO0I,SAASC,KAAK,KAC9C,CAEO,SAASF,EAAUvJ,GAExB,OAAOA,EAAKI,QAAQ,UAAW,IACjC,CAEO,SAASsJ,EAAa1J,GAC3B,MAAgB,MAATA,EAAeA,EAAOA,EAAKI,QAAQ,UAAW,GACvD,CAEO,SAASuJ,EAAc3J,GAC5B,MAAgB,MAATA,EAAeA,EAAOA,EAAKI,QAAQ,UAAW,GACvD,CAEO,SAASwJ,EAAS5J,GACvB,OAAO2J,EAAcD,EAAa1J,GACpC,CAEO,SAAS6J,EAAYC,EAAkBC,EAAcC,GAC1DD,EAAOA,EAAK3J,QAAQ,IAAI6J,OAAQ,IAAGH,KAAa,KAChDE,EAAKA,EAAG5J,QAAQ,IAAI6J,OAAQ,IAAGH,KAAa,KAE5C,IAAII,EAAeC,EAAcJ,GACjC,MAAMK,EAAaD,EAAcH,GAEjCI,EAAWhL,SAAQ,CAACiL,EAAW9J,KAC7B,GAAwB,MAApB8J,EAAUC,MACP/J,EAGMA,IAAU6J,EAAW7K,OAAS,GAEvC2K,EAAavK,KAAK0K,GAHlBH,EAAe,CAACG,QAOb,GAAwB,OAApBA,EAAUC,MAEfJ,EAAa3K,OAAS,GAAmC,MAA9BmH,EAAKwD,IAAeI,OACjDJ,EAAaK,MAEfL,EAAaK,UACR,IAAwB,MAApBF,EAAUC,MACnB,OAEAJ,EAAavK,KAAK0K,EACpB,KAKF,OAAOd,EAFQF,EAAU,CAACS,KAAaI,EAAaM,KAAKpE,GAAMA,EAAEkE,UAGnE,CAEO,SAASH,EAAc3I,GAC5B,IAAKA,EACH,MAAO,GAKT,MAAMiJ,EAAsB,GAU5B,GAR6B,OAJ7BjJ,EAAW+H,EAAU/H,IAIR+B,MAAM,EAAG,KACpB/B,EAAWA,EAAS4B,UAAU,GAC9BqH,EAAS9K,KAAK,CACZ2C,KAAM,WACNgI,MAAO,QAIN9I,EACH,OAAOiJ,EAIT,MAAMC,EAAQlJ,EAASkJ,MAAM,KAAK5J,OAAO0I,SAiCzC,OA/BAiB,EAAS9K,QACJ+K,EAAMF,KAAKG,GACC,MAATA,GAAyB,MAATA,EACX,CACLrI,KAAM,WACNgI,MAAOK,GAIY,MAAnBA,EAAKC,OAAO,GACP,CACLtI,KAAM,QACNgI,MAAOK,GAIJ,CACLrI,KAAM,WACNgI,MAAOK,MAKc,MAAvBnJ,EAAS+B,OAAO,KAClB/B,EAAWA,EAAS4B,UAAU,GAC9BqH,EAAS9K,KAAK,CACZ2C,KAAM,WACNgI,MAAO,OAIJG,CACT,CAEO,SAASI,EACd7K,EACA8K,EACAC,GAA0B,GAI1B,OAAO1B,EAF0Bc,EAAcnK,GAGpBwK,KAAKQ,IAC5B,GAAqB,aAAjBA,EAAQ1I,KAAqB,CAC/B,MAAMgI,EAAQQ,EAAOE,EAAQV,OAC7B,OAAIS,EAAwB,GAAEC,EAAQV,QAAQA,GAAS,KAChDA,CACT,CAEA,MAAqB,UAAjBU,EAAQ1I,KACHwI,EAAQE,EAAQV,MAAMlH,UAAU,KAAO,GAGzC4H,EAAQV,KAAK,IAG1B,CAEO,SAASW,EACdnB,EACAoB,EACAC,GAEA,MAAMC,EAAaC,EAAYvB,EAAUoB,EAAiBC,GAG1D,IAAIA,EAAcnB,IAAOoB,EAIzB,OAAOA,GAAc,CAAA,CACvB,CAEO,SAASC,EACdvB,EACAwB,EACAH,GAGAG,EAAmB,KAAZxB,EAAkBwB,EAAKlI,UAAU0G,EAASvK,QAAU+L,EAE3D,MAAMtB,EAAM,GAAEmB,EAAcnB,IAAM,MAE5BE,EAAeC,EAAcmB,GAC7BC,EAAgBpB,EAAcH,GAE/BsB,EAAKE,WAAW,MACnBtB,EAAauB,QAAQ,CACnBnJ,KAAM,WACNgI,MAAO,MAINN,EAAGwB,WAAW,MACjBD,EAAcE,QAAQ,CACpBnJ,KAAM,WACNgI,MAAO,MAIX,MAAMQ,EAAiC,CAAA,EAgEvC,MA9Dc,MACZ,IACE,IAAI7C,EAAI,EACRA,EAAI5E,KAAKqI,IAAIxB,EAAa3K,OAAQgM,EAAchM,QAChD0I,IACA,CACA,MAAM0D,EAAczB,EAAajC,GAC3B2D,EAAeL,EAActD,GAE7B4D,EAAoB5D,GAAKiC,EAAa3K,OAAS,EAC/CuM,EAAqB7D,GAAKsD,EAAchM,OAAS,EAEvD,GAAIqM,EAAc,CAChB,GAA0B,aAAtBA,EAAatJ,KACf,QAAIqJ,GAAarB,QACfQ,EAAO,KAAOzB,EAAUa,EAAa3G,MAAM0E,GAAGuC,KAAKpE,GAAMA,EAAEkE,UACpD,GAKX,GAA0B,aAAtBsB,EAAatJ,KAAqB,CACpC,GAA2B,MAAvBsJ,EAAatB,QAAkBqB,GAAarB,MAC9C,OAAO,EAGT,GAAIqB,EACF,GAAIR,EAAcY,eAChB,GAAIH,EAAatB,QAAUqB,EAAYrB,MACrC,OAAO,OAEJ,GACLsB,EAAatB,MAAM0B,gBACnBL,EAAYrB,MAAM0B,cAElB,OAAO,CAGb,CAEA,IAAKL,EACH,OAAO,EAGT,GAA0B,UAAtBC,EAAatJ,KAAkB,CACjC,GAA2B,MAAvBqJ,GAAarB,MACf,OAAO,EAE2B,MAAhCqB,EAAYrB,MAAMM,OAAO,KAC3BE,EAAOc,EAAatB,MAAMlH,UAAU,IAAMuI,EAAYrB,MAE1D,CACF,CAEA,IAAKuB,GAAqBC,EACxB,QAASX,EAAcc,KAE3B,CAEA,OAAO,CACR,EA5Da,GA8DInB,OAAoC3I,CACxD,CCnOO,SAAS+J,EAAW/E,GACzB,QAASA,GAAK+E,UAChB,CC1BO,SAASC,EAAOhF,EAAKiF,GAC1B,IAAIC,EACFpE,EACAqE,EACA3L,EAAM,GAER,IAAK0L,KAAKlF,EACR,QAAuB,KAAlBmF,EAAMnF,EAAIkF,IACb,GAAI7E,MAAMC,QAAQ6E,GAChB,IAAKrE,EAAI,EAAGA,EAAIqE,EAAI/M,OAAQ0I,IAC1BtH,IAAQA,GAAO,KACfA,GAAO4L,mBAAmBF,GAAK,IAAME,mBAAmBD,EAAIrE,SAG9DtH,IAAQA,GAAO,KACfA,GAAO4L,mBAAmBF,GAAK,IAAME,mBAAmBD,GAK9D,OAAQF,GAAO,IAAMzL,CACvB,CAEA,SAAS6L,EAAQC,GACf,IAAKA,EAAK,MAAO,GACjB,IAAI9L,EAAM+L,mBAAmBD,GAC7B,MAAY,UAAR9L,IACQ,SAARA,IACU,GAANA,GAAY,IAAMA,EAAM,KAAOA,GAAOA,EAAMA,GACtD,CAEO,SAASgM,EAAOhM,GAMrB,IALA,IAAI2L,EACFD,EACAO,EAAM,CAAE,EACRjG,EAAMhG,EAAI+J,MAAM,KAEV4B,EAAM3F,EAAInH,cAGD,IAAXoN,EADJP,GADAC,EAAMA,EAAI5B,MAAM,MACRlL,SAENoN,EAAIP,GAAK,GAAGQ,OAAOD,EAAIP,GAAIG,EAAQF,EAAI9M,UAEvCoN,EAAIP,GAAKG,EAAQF,EAAI9M,SAIzB,OAAOoN,CACT,CCjDO,MAAME,EAAqBC,EAAgBC,KAAKC,OAC1CC,EAAyBC,EACpCH,KAAKI,UACLJ,KAAKC,OAGA,SAASF,EAAgBM,GAC9B,OAAQC,IAC4B,MAA9BA,EAAUlK,UAAU,EAAG,KACzBkK,EAAYA,EAAUlK,UAAU,IAGlC,IAAImK,EAAiCZ,EAAOW,GAG5C,IAAK,IAAInM,KAAOoM,EAAO,CACrB,MAAMjD,EAAQiD,EAAMpM,GACpB,GAAqB,iBAAVmJ,EACT,IACEiD,EAAMpM,GAAOkM,EAAO/C,EAEpB,CADA,MAAOkD,GACP,CAGN,CAEA,OAAOD,CAAK,CAEhB,CAEO,SAASJ,EACdC,EACAC,GAsBA,OAAQ5L,KACNA,EAAS,IAAKA,KAGZmG,OAAOX,KAAKxF,GAAQrC,SAAS+B,IAC3B,MAAMsM,EAAMhM,EAAON,QACA,IAARsM,QAA+BtL,IAARsL,SACzBhM,EAAON,GAEdM,EAAON,GA7Bf,SAAwBsM,GACtB,GAAmB,iBAARA,GAA4B,OAARA,EAC7B,IACE,OAAOL,EAAUK,EAEjB,CADA,MAAOD,GACP,MAEG,GAAmB,iBAARC,GAAsC,mBAAXJ,EAC3C,IAIE,OADAA,EAAOI,GACAL,EAAUK,EAEjB,CADA,MAAOD,GACP,CAGJ,OAAOC,CACT,CAWsBC,CAAeD,EAC/B,IAIJ,MAAMH,EAAYnB,EAAO1K,GAAkCgC,WAE3D,OAAO6J,EAAa,IAAGA,IAAc,EAAE,CAE3C,CCkEaK,MAAAA,EAAiB,CAC5B,YACA,iBACA,oBCXK,MAAMC,EAAgBzJ,EAAM0J,cAAkC,MAE7C,oBAAbpH,WACTlF,OAAOuM,uBAAyBF,GAGlC,MAAMG,EAAiB,6BAMhB,MAAMC,UAAyBnK,OAE/B,MAAMoK,UAAuBpK,OAE7B,SAASqK,EACdrP,GAEA,MAAO,CACLsP,OAAQ,OACRC,iBAAkBvP,EAClBA,WACAwP,QAAS,GACTC,eAAgB,GAChBC,YAAaC,KAAKC,MAEtB,CA+tCO,SAASC,EACdzO,EACA0O,GAEA,MAAO,IAAI1O,EAAMqO,kBAAmBrO,EAAMoO,SAASO,MAAMxI,GAAMA,EAAEuI,KAAOA,GAC1E,CAEO,SAASE,GAEdjQ,GAGA,MAAMqB,MAAEA,GAAU6O,KAElB,OAAOlQ,GAAMmQ,OAASnQ,EAAKmQ,OAAO9O,GAAUA,CAC9C,CAUO,SAAS6O,KAGd,MAAME,EAAkBzN,OAAOuM,wBAA0BF,EAGzD,OAFczJ,EAAM8K,WAAWD,EAGjC,CCn5CO,SAASE,KACd,MAAMC,WAAEA,EAAUlP,MAAEA,GAAU6O,MACxBT,QAAEA,GAAYpO,EAEdmP,EAAcP,KAAiBhQ,SAASoB,MAAMkB,IAE9CkO,EAAQF,EAAWG,IAEnBrL,EAAiBE,EAAMoL,aAC1BvL,GACQG,EAAMC,cAAcF,EAAgB,IACtCF,EACHwL,SAAUH,EAAMG,SAChBC,gBAAiBJ,EAAMI,gBACvBC,UAAWL,EAAMK,UACjBC,UAAWN,EAAMM,aAGrB,CAACN,IAGH,OACElL,EAAAC,cAACwL,GAAeC,SAAQ,CAACvF,MAAO+D,GAC9BlK,EAAAC,cAACL,EAAa,CACZO,SAAU8K,EACVnL,eAAgBA,EAChBM,QAASA,QAOR8J,EAAQ9O,OAAS4E,EAAAC,cAAC0L,GAAK,CAACzB,QAASA,IAAc,MAIxD,CAEA,MAAM0B,GAAiBA,IAAM,KAKtB,SAASD,IAAMzB,QAAEA,IACtB,MAAM2B,QAAEA,EAAOb,WAAEA,GAAeL,KAC1BmB,EAAQ5B,EAAQ,GAChB6B,EAAUD,GAAOC,QACjBb,EAAQF,EAAWe,GACnBd,EAAcP,KAAiBhQ,SAASoB,OAAOkB,IAE/CgP,EAAoBd,EAAMW,QAAQI,kBACtCJ,EAAQK,yBACRN,GAEIO,EACJjB,EAAMW,QAAQ/L,gBACd+L,EAAQO,uBACRrM,EAEIsM,EACJnB,EAAMW,QAAQS,gBAAkBtM,EAAMuM,SAGlCzM,EAAiBE,EAAMoL,aAC1BvL,GACQG,EAAMC,cAAckM,EAAqB,IAC3CtM,EACHwL,SAAUH,EAAMG,SAChBC,gBAAiBJ,EAAMI,gBACvBC,UAAWL,EAAMK,UACjBC,UAAWN,EAAMM,aAGrB,CAACN,IAGH,OACElL,EAAAC,cAACwL,GAAeC,SAAQ,CAACvF,MAAO+D,GAC9BlK,EAAAC,cAACoM,EAAwB,CACvBG,SAAUxM,EAAMC,cAAc+L,EAAkB,CAC9CX,SAAUH,EAAMG,SAChBC,gBAAiBJ,EAAMI,gBACvBC,UAAWL,EAAMK,UACjBC,UAAWN,EAAMM,aAGnBxL,EAAAC,cAACL,EAAa,CACZO,SAAU8K,EACVnL,eAAgBA,EAChBM,QAASA,KACiC0L,EAAMtB,EAAK,GAGrDxK,EAAAC,cAACwM,GAAU,CAACX,MAAOA,MAK7B,CACA,SAASW,IAAWX,MAAEA,IACpB,MAAMD,QAAEA,EAAOb,WAAEA,GAAeL,KAC1BO,EAAQF,EAAWc,EAAMC,SAE/B,GAAqB,UAAjBD,EAAM9B,OACR,MAAM8B,EAAMxL,MAGd,GAAqB,YAAjBwL,EAAM9B,OACR,MAAM8B,EAAMY,YAGd,GAAqB,YAAjBZ,EAAM9B,OAAsB,CAC9B,IAAI2C,EAAOzB,EAAMW,QAAQe,WAAaf,EAAQgB,iBAE9C,OAAIF,EACK3M,EAAMC,cAAc0M,EAAM,CAC/BtB,SAAUH,EAAMG,SAChBC,gBAAiBJ,EAAMI,gBACvBC,UAAWL,EAAMK,UACjBC,UAAWN,EAAMM,YAIdxL,EAAAC,cAAC6M,QACV,CAEAvN,GACE,EAGJ,CAEO,SAASuN,KACd,MAAM5C,EAAUlK,EAAM8K,WAAWW,IAAgBrM,MAAM,GAEvD,OAAK8K,EAAQ,GAINlK,EAAAC,cAAC0L,GAAK,CAACzB,QAASA,IAHd,IAIX,CAiBO,SAAS6C,KAGd,MAAMC,WAAEA,GAAerC,KAEvB,OAAO3K,EAAMoL,aAQT3Q,IAQA,MAAMwS,QAAEA,EAAOrF,cAAEA,KAAkBsF,GAASzS,EAE5C,OAAOuS,EAAWE,EAAa,CAC7BD,UACArF,iBACA,GAEJ,GAEJ,CAwCO,SAASyD,GAOd5Q,GAIA,MAAM0S,EAAenN,EAAM8K,WAAWW,IAAgB,GAChD2B,EAAsBD,GAAcpB,QAEpCsB,EAAe3C,GAAe,CAClCE,OAAS9O,IACOrB,GAAM0M,KAChBrL,EAAMoO,QAAQO,MAAMxI,GAAMA,EAAE8J,UAAYtR,GAAM0M,OAC9CrL,EAAMoO,QAAQO,MAAMxI,GAAMA,EAAEuI,KAAO2C,EAAa3C,MAEtCuB,WAIdtR,GAAM6S,QAAU,IAClB/N,EACE6N,GAAuBC,GA8B3B,OAnBuB3C,GAAe,CACpCE,OAAS9O,IACP,MAAMgQ,EAAQrR,GAAM0M,KAChBrL,EAAMoO,QAAQO,MAAMxI,GAAMA,EAAE8J,UAAYtR,GAAM0M,OAC9CrL,EAAMoO,QAAQO,MAAMxI,GAAMA,EAAEuI,KAAO2C,EAAa3C,KAWpD,OATAjL,EACEuM,EAEErR,GAAM0M,MACuB1M,EAAK0M,MAK/B1M,GAAMmQ,OAASnQ,EAAKmQ,OAAOkB,GAAgBA,CAAK,GAK7D,CAEO,MAAML,GAAiBzL,EAAM0J,cAA4B,MCpSzD,SAAS8B,GAOd/Q,GAIA,OAAOiQ,GAAe,CACpBE,OAAS9O,IACP,MAAM6K,EAAUpE,EAAKzG,EAAMoO,UAAkBvD,OAC7C,OAAOlM,GAAMmQ,OAASnQ,EAAKmQ,OAAOjE,GAAUA,CAAM,GAGxD,CCjBO,SAAS4E,GAOd9Q,GAIA,OAAO4Q,GAAS,IACV5Q,EACJmQ,OAASkB,GACArR,GAAMmQ,OAASnQ,EAAKmQ,OAAOkB,EAAMxO,QAAqBwO,EAAMxO,QAGzE,CCFa6N,MAAAA,GAAc,WAsUpB,MAAMoC,GAkEXrJ,YACE2H,GAYAjL,KAAKiL,QAAWA,GAAmB,GACnCjL,KAAK4M,QAAU3B,GAAS4B,eACxBF,GAAMG,SAAS9M,KACjB,CAoBA+M,KAAQlT,IACNmG,KAAKgN,cAAgBnT,EAAKmT,cAE1B,MAAM/B,EAAUjL,KAAKiL,QAaf2B,GAAU3B,GAAShQ,OAASgQ,GAASrB,GAE3C5J,KAAKiN,YAAcjN,KAAKiL,SAAS4B,mBAE7BD,EACF5M,KAAK/E,KAAOsP,GAEZ5L,EACEqB,KAAKiN,aAKT,IAAIhS,EAA2B2R,EAASrC,GAAcU,EAAQhQ,KAG1DA,GAAiB,MAATA,IACVA,EAAO4J,EAAS5J,IAGlB,MAAMiS,EAAWjC,GAASrB,IAAM3O,EAGhC,IAAI2O,EAAKgD,EACLrC,GACAjG,EAAU,CACPtE,KAAKiN,YAAYrD,KAAeW,GAC7B,GACAvK,KAAKiN,YAAYrD,GACrBsD,IAGFjS,IAASsP,KACXtP,EAAO,KAGL2O,IAAOW,KACTX,EAAKtF,EAAU,CAAC,IAAKsF,KAGvB,MAAMuD,EACJvD,IAAOW,GAAc,IAAMjG,EAAU,CAACtE,KAAKiN,YAAYE,SAAUlS,IAEnE+E,KAAK/E,KAAOA,EACZ+E,KAAK4J,GAAKA,EAEV5J,KAAKmN,SAAWA,EAChBnN,KAAKiF,GAAKkI,CAAoC,EAGhDC,YACE3N,IAiBAO,KAAKP,SAAWA,EACTO,MAGTqN,OACEpC,IAQApI,OAAOyK,OAAOtN,KAAKiL,QAASA,GACrBjL,MAGTJ,gBAAmB0K,MAKnBG,SAAqC5Q,GAG5B4Q,GAAS,IAAK5Q,EAAM0M,KAAMvG,KAAK4J,KAExCc,gBAA4C7Q,GAGnC4Q,GAAS,IACX5Q,EACH0M,KAAMvG,KAAK4J,GACXI,OAAS3I,GAAYxH,GAAMmQ,OAASnQ,EAAKmQ,OAAO3I,EAAEkM,SAAWlM,EAAEkM,UAGnE5C,UAA4C9Q,GAGnC8Q,GAAU,IAAK9Q,EAAM0M,KAAMvG,KAAK4J,KAEzCgB,UAAqC/Q,GAG5B+Q,GAAU,IAAK/Q,EAAM0M,KAAMvG,KAAK4J,KAmCpC,MAAM4D,WAIHb,GAgBRrJ,YACE2H,GAoBAwC,MAAMxC,EACR,yOC7SK,SAASyC,GAOdzC,GAEA,MAAM0C,UAAEA,GAAc5D,KAChBmB,EAAQT,GAAS,CACrBiC,QAAQ,KAGJnP,KAEJA,EAAIkC,SACJA,EAAQmO,OACRA,EAAMC,YACNA,EAAcA,MAAO,CAAEC,UAAW,YAAWC,cAC7CA,EAAgBA,MAAO,CAAE,IAACC,cAC1BA,EAAaC,SACbA,EAAQtR,KACRA,EAAID,OACJA,EAAMqJ,OACNA,EAAMd,GACNA,EAAE/J,MACFA,EAAKgT,KACLA,EAAIC,QACJA,EAAOC,aACPA,EAAY/S,QACZA,EAAOgT,gBACPA,EAAeC,YACfA,EAAW7N,MAEXA,EAAKqN,UACLA,EAAS1M,QACTA,EAAOmN,QACPA,EAAOC,aACPA,EAAYC,aACZA,EAAYC,aACZA,KACGpC,GACDrB,EAEE0D,EAAWhB,EAAU,CACzBpH,KAAM0E,EAAQhG,GAAKiG,EAAMzO,cAAWW,KACjC6N,IAGL,GAAsB,aAAlB0D,EAASpR,KAAqB,CAChC,MAAMJ,KAAEA,GAASwR,EACjB,MAAO,CAAExR,OACX,CAEA,MAAMyR,YACJA,EAAWC,YACXA,EAAWC,YACXA,EAAWC,YACXA,EAAWC,iBACXA,EAAgBC,SAChBA,EAAQlS,KACRA,GACE4R,EAEEO,EACHC,GACAC,IACKA,EAAEC,SAASD,EAAEC,UACjBF,EAASpT,OAAO0I,SAASpK,SAASiV,IAC5BF,EAAEG,kBACND,EAASF,EAAE,GACX,EAIAI,EAA+DP,EACjEpN,EAAiBgM,EAAoB,KAAO,CAAE,EAC9C,GAGE4B,EACJR,EAAW,CAAE,EAAGpN,EAAiBkM,EAAe,CAAA,IAAO,GAEzD,MAAO,IACFyB,KACAC,KACAnD,EACHnP,KAAM8Q,OACF7Q,EACAL,EAAK2S,eACL3S,EAAK2S,eAAevS,KACpBJ,EAAKI,KACTiE,QAAS8N,EAAgB,CAAC9N,EAASwN,IACnCL,QAASW,EAAgB,CAACX,EAASM,IACnCL,aAAcU,EAAgB,CAACV,EAAcM,IAC7CL,aAAcS,EAAgB,CAACT,EAAcM,IAC7CL,aAAcQ,EAAgB,CAACR,EAAcM,IAC7CpB,SACAnN,MAAO,IACFA,KACA+O,EAAoB/O,SACpBgP,EAAsBhP,OAE3BqN,UACE,CACEA,EACA0B,EAAoB1B,UACpB2B,EAAsB3B,WAErB/R,OAAO0I,SACPC,KAAK,WAAQtH,KACd6Q,EACA,CACE0B,KAAM,OACN,iBAAiB,QAEnBvS,EACJ,cAAiB6R,EAAW,cAAW7R,EAE3C,CAgBawS,MAAAA,GAAsBxQ,EAAMyQ,YAAW,CAAC5Q,EAAY6Q,KAC/D,MAAMC,EAAYrC,GAAazO,GAE/B,OACEG,EAAAC,cAAA,IAAA2Q,GAAA,CAEIF,IAAKA,GACFC,EAAS,CACZtQ,SAC4B,mBAAnBR,EAAMQ,SACTR,EAAMQ,SAAS,CACbwP,SAAgD,WAArCc,EAAkB,iBAE/B9Q,EAAMQ,WAEd,ICvfA2E,GACc,oBAAX5H,OAAyB4C,EAAMgF,gBAAkBhF,EAAMiF,UAM1D4L,GAAY,SAGlB,IAaIC,GAbAC,GAAuB,IAAIC,QAe/B,MAAMC,GAAoC,oBAAX7T,QAA0BA,OAAO8T,eAM1DC,GAAiBzW,GAA6BA,EAASoB,MAAMkB,IAE5D,SAASoU,GAAqBvF,GACnC,MAAM/P,MAAEA,EAAKL,UAAEA,EAAS4V,mBAAEA,GAAuB1G,KAEjD3F,IAAgB,KACd,MAAMsM,EAASzF,GAASyF,QAAUH,GAE9BF,KACGH,KACHA,GAAQ,MACN,MAAMS,EAAa,4BAMnB,MAAO,CACLzV,MALwB+M,KAAKC,MAC7B1L,OAAO8T,eAAeM,QAAQD,IAAe,SAC1C,CAAEE,OAAQ,CAAE,EAAE9T,KAAM,CAAC,GAIxB+T,IAAMhP,IACJoO,GAAMhV,MAAQ2G,EAAiBC,EAASoO,GAAMhV,OAC9CsB,OAAO8T,eAAeS,QACpBJ,EACA1I,KAAKI,UAAU6H,GAAMhV,OACtB,EAGN,EAjBO,KAqBZ,MAAM4B,QAAEA,GAAYN,OAChBM,EAAQkU,oBACVlU,EAAQkU,kBAAoB,UAG9B,MAAMC,EAAY3X,IAChB,GAAI6W,GAAqBe,IAAI5X,EAAMsU,QAAS,OAC5CuC,GAAqBpV,IAAIzB,EAAMsU,QAE/B,MAAMuD,EACJ7X,EAAMsU,SAAWlM,UAAYpI,EAAMsU,SAAWpR,OAC1CyT,GACAmB,EAAe9X,EAAMsU,QAEtBsC,GAAMhV,MAAM6B,KAAKoU,IACpBjB,GAAMY,KAAKO,IAAO,IACbA,EACHtU,KAAM,IACDsU,EAAEtU,KACLoU,CAACA,GAAkB,CACjBG,QAASC,IACTC,QAASD,SAIjB,EAGIH,EAAkBK,IACtB,IACExP,EADEhH,EAAO,GAEX,KAAQgH,EAASwP,EAAGC,YAClBzW,EAAKyL,QACF,GAAE+K,EAAGE,qBACH,GAAGxT,QAAgBuF,KAAKzB,EAAOxC,SAAUgS,GAAM,MAGpDA,EAAKxP,EAEP,MAAQ,GAAEhH,EAAKyJ,KAAK,SAASuC,aAAa,EAGpB,oBAAbvF,UACTA,SAAS5F,iBAAiB,SAAUmV,GAAU,GAGhD,MAAMW,EAAoB/W,EAAU,gBAAiBvB,IACnD,GAAIA,EAAMuY,YAAa,CACrB,MAAMC,EAAapB,EAAOpX,EAAMyY,cAChC,IAAK,MAAMZ,KAAmBjB,GAAMhV,MAAM6B,KAAM,CAC9C,MAAMiV,EAAQ9B,GAAMhV,MAAM6B,KAAKoU,GAC/B,GAAIA,IAAoBlB,GACtB+B,EAAMV,QAAU9U,OAAO8U,SAAW,EAClCU,EAAMR,QAAUhV,OAAOgV,SAAW,OAC7B,GAAIL,EAAiB,CAC1B,MAAMc,EAAUvQ,SAASwQ,cAAcf,GACvCa,EAAMV,QAAUW,GAASE,YAAc,EACvCH,EAAMR,QAAUS,GAASG,WAAa,CACxC,CAEAlC,GAAMY,KAAKO,IACT,MAAMtU,EAAO,IAAKsU,EAAEtU,MAGpB,cAFOA,EAAKoU,GAEL,IACFE,EACHtU,OACA8T,OAAQ,IACHQ,EAAER,OACL,CAAC,CAACiB,EAAYX,GAAiBzM,KA3H7B,QA2H+CsN,GAEpD,GAEL,CACF,KAGIK,EAAkBxX,EAAU,cAAevB,IAC/C,GAAIA,EAAMuY,YAAa,CACrB,IAAKpB,EAAmBvM,QACtB,OAGFuM,EAAmBvM,SAAU,EAE7B,MAEM4N,GAFS7G,GAASyF,QAAUH,IAERjX,EAAMgZ,YAChC,IAAIC,GAAiB,EAErB,IAAK,MAAMC,KAAYtC,GAAMhV,MAAM2V,OAAQ,CACzC,MAAMmB,EAAQ9B,GAAMhV,MAAM2V,OAAO2B,IAC1BpW,EAAK+U,GAAmBqB,EAAS7M,MAlJhC,OAmJR,GAAIvJ,IAAQ0V,EACV,GAAIX,IAAoBlB,GACtBsC,GAAiB,EACjB/V,OAAOiW,SAAST,EAAMV,QAASU,EAAMR,cAChC,GAAIL,EAAiB,CAC1B,MAAMc,EAAUvQ,SAASwQ,cAAcf,GACnCc,IACFA,EAAQE,WAAaH,EAAMV,QAC3BW,EAAQG,UAAYJ,EAAMR,QAE9B,CAEJ,CAEKe,GACH/V,OAAOiW,SAAS,EAAG,GAGrBvC,GAAMY,KAAKO,IAAO,IAAKA,EAAGtU,KAAM,CAAC,MACjCoT,GAAuB,IAAIC,OAC7B,KAGF,MAAO,KACL1O,SAAShI,oBAAoB,SAAUuX,GACvCW,IACAS,GAAiB,CAClB,GACA,GACL,CCtLO,SAASK,GACd7T,EACAD,GAA2B,GAE3B,MAAM9B,QAAEA,GAAYiN,KAEpB3K,EAAMiF,WAAU,KACd,IAAKzF,EAAW,OAEhB,IAAI+T,EAAU7V,EAAQjB,OAAM,CAAC+W,EAAOC,KAC9BrW,OAAOsW,QAAQjU,KACjB8T,IACAC,IACF,IAGF,OAAOD,CAAO,GAElB,SAEO,UAAe9T,QAAEA,EAAOD,UAAEA,EAASa,SAAEA,IAE1C,OADAiT,GAAW7T,EAASD,GACZa,GAAY,IACtB,yEC4CO,MAaL6D,YAAmBrI,GAAiB+E,KAAjB/E,KAAAA,CAAkB,CAErC8X,YAuBE9H,IA+BA,MAAMX,EAAQ,IAAIqC,GAAM1B,GAExB,OADEX,EAAcsC,QAAS,EAClBtC,CAAK,qCP+ET,SAOLrL,GAEA,MACM8G,EADaoG,IACJC,CAAWnN,GAE1B,MAA8B,mBAAnBA,EAAMQ,SACPR,EAAMQ,SAAiBsG,GAGxBA,EAAS9G,EAAMQ,SAAW,IACrC,0BQ5LO,SAMLR,GACA,MAAM+T,SAAEA,GAAajJ,KACfmB,EAAQT,GAAS,CAAEiC,QAAQ,IASjC,OAPAtI,GAAgB,KACd4O,EAAS,CACPzM,KAAMtH,EAAMgG,GAAKiG,EAAMzO,cAAWW,KAC/B6B,GACI,GACR,IAEI,IACT,oEV2GO,MAaLqE,YAAY2H,GACVjL,KAAKiL,QAAU,CACbgI,oBAAqB,GACrB1F,aAASnQ,KACN6N,EACHiI,gBAAiBjI,GAASiI,iBAAmB/K,EAC7CgL,YAAalI,GAASkI,aAAepL,GAGvC/H,KAAKoT,UAAYpT,KAAKiL,QAAQmI,SAChC,CAEApZ,YAAc,IAAIC,IAElBY,UAAYA,CACVwY,EACAhW,KAEA,MAAMiW,EAAgC,CACpCD,YACAhW,MAKF,OAFA2C,KAAKhG,YAAYe,IAAIuY,GAEd,KACLtT,KAAKhG,YAAYgB,OAAOsY,EAAS,CAClC,EAGHC,KAAQC,IACNxT,KAAKhG,YAAYK,SAASiZ,IACpBA,EAASD,YAAcG,EAAYjW,MACrC+V,EAASjW,GAAGmW,EACd,GACA,oBC7DC,UAGLC,OAAEA,KAAWnH,IACb,MAAMrB,EAAU,IACXwI,EAAOxI,WACPqB,EACHiB,QAAS,IACJkG,EAAOxI,QAAQsC,WACfjB,GAAMiB,UAOPzQ,EAAUsC,EAAMmB,UACpB,IAAM0K,EAAQnO,SAAWR,MACzB,GAEIoX,EAAqBtU,EAAM6E,OAC9B,GAAE3F,KAAKqV,MAAsB,IAAhBrV,KAAKG,aAEfgS,EAAqBrR,EAAM6E,QAAgB,GAC3C2P,EAAqBxU,EAAM6E,OAA8B,MACzD4P,EAAuBzU,EAAM6E,OAAsBzG,QAAQC,WAE3DqW,EAAeC,GACZF,EAAqB3P,UAAY6P,EACpCF,EAAqB3P,aACrB9G,EAGAP,EAAgBkH,GAElBiQ,IAEA,MAAM9L,EAAQA,EACZzL,WACAC,SACAC,OACAzB,YAEA,MAAM+Y,EAAehJ,EAAQkI,YAAYzW,GAEzC,MAAO,CACLD,SAAUA,EACV8L,UAAW7L,EACXA,OAAQ2F,EACN2R,GAAkBtX,OAClBuX,GAEFtX,KAAMA,EAAKgJ,MAAM,KAAKuO,UAAU,IAAM,GACtC/W,KAAO,GAAEV,IAAWC,IAASC,IAC7BzB,MAAOmH,EACL2R,GAAkB9Y,MAClBA,GAEH,EAGGpB,EAAWoO,EAAMpL,EAAQhD,UAE/B,IAAIqa,eAAEA,EAAcC,UAAEA,GAActa,EAASoB,MAE7C,GACEiZ,KACEC,GAAaA,IAAcV,EAAmBxP,SAChD,CAEA,MAAMmQ,EAAqBnM,EAAMiM,GAKjC,OAJAE,EAAmBnZ,MAAMkB,IAAMtC,EAASoB,MAAMkB,WAEvCiY,EAAmBnZ,MAAMiZ,eAEzB,IACFE,EACH3E,eAAgB5V,EAEpB,CAEA,OAAOA,CAAQ,IAIbwa,EAAoBlV,EAAM6E,OAAuBpH,MAChD0X,EAAUtU,GAAYb,EAAMmB,UAAkC,IACnE4I,EAAsBmL,EAAkBpQ,YAEnCsQ,EAAiBC,GAAwBrV,EAAMsV,gBAEhDxZ,EAAQkE,EAAMuV,SAClB,KAAO,IACFJ,EACHnL,OAAQoL,EAAkB,UAAY,OACtC1a,SAAU0a,EAAkBF,EAAkBpQ,QAAUqQ,EAASza,YAEnE,CAACya,EAAUC,IAGbpV,EAAMgF,iBAAgB,KACfoQ,GAAmBtZ,EAAMmO,mBAAqBnO,EAAMpB,WACvD2Z,EAAOF,KAAK,CACVhW,KAAM,aACNwU,aAAc7W,EAAMmO,iBACpBiJ,WAAYpX,EAAMpB,SAClB+X,YAAa3W,EAAMpB,SAAUqD,OAASjC,EAAMmO,kBAAkBlM,OAEhE8C,GAAU2U,IAAO,IACZA,EACHvL,iBAAkBuL,EAAE9a,aAExB,IAGF,MAAMiL,EAAY,IAAGF,EAASoG,EAAQlG,UAAY,KAAO,KAEnD8P,EAAsB9Q,GAC1B,CAACwC,EAActL,IACN6J,EAAYC,EAAWwB,EAAM/B,EAAUvJ,OAI3CmP,EAAY0K,GAAgB1V,EAAMuV,SAAQ,KAC/C,MAAMvK,EAAa,CAAA,EACb0K,EAAe,CAAA,EAEfC,EAAiBC,IACrBA,EAAO3a,SAAQ,CAACiQ,EAAOpH,KACrBoH,EAAMyC,KAAK,CAAEC,cAAe9J,IAU5B,GANAvE,GAFuByL,EAAmBE,EAAMV,IAIXqL,OAAO3K,EAAMV,KAEhDQ,EAAmBE,EAAMV,IAAMU,GAE5BA,EAAMsC,QAAUtC,EAAMrP,KAAM,CAC/B,MAAMia,EAAkBtQ,EAAc0F,EAAM6C,UAExC2H,EAAqBI,KACvB5K,EAAM6C,SAASgI,SAAS,OAEtBL,EAAqBI,GAAmB5K,EAE9C,CAEA,MAAM7K,EAAW6K,EAAM7K,SAEnBA,GAAUjF,QACZua,EAActV,EAChB,GACA,EAKJ,OAFAsV,EAAc,CAACtB,EAAOL,YAEf,CAAChJ,EAAY0K,EAAa,GAChC,IAEGM,EAAkBhL,EAElBiL,EAAajW,EAAMuV,SACvB,IACG9R,OAAOyS,OAAOR,GACZrP,KAAI,CAACpE,EAAG6B,KACP,MAAMqS,EAAU1Q,EAASxD,EAAE8L,UACrBqI,EAASpQ,EAAcmQ,GAE7B,KAAOC,EAAOhb,OAAS,GAA0B,MAArBgb,EAAO,IAAIjQ,OACrCiQ,EAAO/a,QAGT,MAAMgb,EAAQD,EAAO/P,KAAKpE,GACT,UAAXA,EAAE9D,KACG,GAGM,aAAX8D,EAAE9D,KACG,IAGF,IAGT,MAAO,CAAEmY,MAAOrU,EAAGkU,UAASC,SAAQha,MAAO0H,EAAGuS,QAAO,IAEtDE,MAAK,CAAC/R,EAAG5H,KACR,IAAI4Z,EAAwB,MAAdhS,EAAE2R,QAAkB,EAAkB,MAAdvZ,EAAEuZ,SAAmB,EAAI,EAE/D,GAAgB,IAAZK,EAAe,OAAOA,EAE1B,MAAMpb,EAAS8D,KAAKC,IAAIqF,EAAE6R,MAAMjb,OAAQwB,EAAEyZ,MAAMjb,QAGhD,GAAIoJ,EAAE6R,MAAMjb,SAAWwB,EAAEyZ,MAAMjb,OAC7B,OAAOwB,EAAEyZ,MAAMjb,OAASoJ,EAAE6R,MAAMjb,OAIlC,IAAK,IAAI0I,EAAI,EAAGA,EAAI1I,EAAQ0I,IAC1B,GAAIU,EAAE6R,MAAMvS,KAAOlH,EAAEyZ,MAAMvS,GACzB,OAAOlH,EAAEyZ,MAAMvS,GAAMU,EAAE6R,MAAMvS,GAKjC,IAAK,IAAIA,EAAI,EAAGA,EAAI1I,EAAQ0I,IAC1B,GAAIU,EAAE4R,OAAOtS,GAAIqC,QAAUvJ,EAAEwZ,OAAOtS,GAAIqC,MACtC,OAAO3B,EAAE4R,OAAOtS,GAAIqC,MAASvJ,EAAEwZ,OAAOtS,GAAIqC,MAAS,GAAK,EAK5D,OAAI3B,EAAE2R,UAAYvZ,EAAEuZ,QACX3R,EAAE2R,QAAUvZ,EAAEuZ,QAAU,GAAK,EAI/B3R,EAAEpI,MAAQQ,EAAER,KAAK,IAEzBiK,KAAI,CAACpE,EAAG6B,KACP7B,EAAEqU,MAAMG,KAAO3S,EACR7B,EAAEqU,UAEf,CAACZ,IAGGgB,EAAc/R,GAClB,CACEtH,EACAsZ,EACAlc,KAEA,IAAImc,EAA6B,CAAA,EAiB7BC,EAfaZ,EAAWxL,MAAMS,IAChC,MAAM4L,EAAgBhQ,EAAcnB,EAAUH,EAAcnI,GAAW,CACrEwI,GAAIqF,EAAM6C,SACVnG,cAAesD,EAAMW,QAAQjE,eAAiBiE,EAAQjE,cACtDE,OAAO,IAGT,QAAIgP,IACFF,EAAcE,GACP,EAGG,KAG6B9L,EAA6B,SAEpE+L,EAA4B,CAACF,GAEjC,KAAOA,GAAahJ,aAClBgJ,EAAcA,EAAYhJ,YACtBgJ,GAAaE,EAAczP,QAAQuP,GAMzC,MAAMG,EAAcD,EAAc1Q,KAAK6E,IACrC,IAAI+L,EAEJ,GAAI/L,EAAMW,QAAQqL,YAChB,IACE,MAAMC,EAAejM,EAAMW,QAAQqL,YAAYN,GAE/CnT,OAAOyK,OAAO0I,EAAaO,EAW7B,CAVE,MAAO9N,GAKP,GAJA4N,EAAoB,IAAInN,EAAeT,EAAI5J,QAAS,CAClD2X,MAAO/N,IAGL5O,GAAM4c,aACR,MAAMJ,EAGR,OAAOA,CACT,CAGF,IAGI/M,EAAU6M,EAAc1Q,KAAI,CAAC6E,EAAO9O,KACxC,MAAMkb,EAAmB5Q,EAAgBwE,EAAMrP,KAAM+a,GAC/CW,EAAU7Q,EAAgBwE,EAAMV,GAAIoM,GAAa,GAKjDY,EAAgBjN,EAAczO,EAAOyb,GAE3C,GAAIC,EACF,MAAO,IAAKA,GAId,MAAMC,KACJvM,EAAMW,QAAQ6L,OACdlO,EAAe/E,MAAMxC,GAAOiJ,EAAMW,QAAQ5J,IAAY8M,WAuBxD,MApBkC,CAChCvE,GAAI+M,EACJxL,QAASb,EAAMV,GACf7D,OAAQiQ,EACRvZ,SAAU6H,EAAU,CAACS,EAAU2R,IAC/BK,UAAWtN,KAAKC,MAChBsN,YAAa,CAAE,EACfta,OAAQ,CAAS,EACjB0M,OAAQyN,EAAa,UAAY,UACjCI,YAAY,EACZC,SAAS,EACTxX,WAAOtC,EACP+Z,YAAaf,EAAY5a,GACzB4b,iBAAaha,EACb0O,YAAatO,QAAQC,UACrB8P,aAASnQ,EACTia,gBAAiB,IAAIC,gBACrBC,UAAW,EAGI,IAsDnB,OAhDAjO,EAAQjP,SAAQ,CAAC6Q,EAAOhI,KACtB,MAAMsU,EAAclO,EAAQpG,EAAI,GAC1BoH,EAAQ8K,EAAgBlK,EAAMC,SAE9BsM,EAAa,MAEjB,MAAMC,EAAmB,CACvBhb,OAAQ8a,GAAa9a,QAAUqZ,EAC/BiB,YAAaQ,GAAaR,aAAejB,GAG3C,IAME,IAAIiB,GAJsC,iBAAjC1M,EAAMW,QAAQ0M,eACjBrN,EAAMW,QAAQ0M,eAAezP,MAC7BoC,EAAMW,QAAQ0M,kBAEUD,EAAiBhb,SAAW,CAAA,EAEtDA,EAAS,IACRgb,EAAiBhb,UACjBsa,GAML,OAHAA,EAAc3U,EAAiB6I,EAAM8L,YAAaA,GAClDta,EAAS2F,EAAiB6I,EAAMxO,OAAQA,GAEjC,CACLsa,cACAta,SACAkb,gBAAiB1M,EAAM8L,cAAgBA,EAY3C,CAVE,MAAOvO,GAKP,GAJAyC,EAAMkM,YAAc,IAAInO,EAAiBR,EAAI5J,QAAS,CACpD2X,MAAO/N,IAGL5O,GAAM4c,aACR,MAAMvL,EAAMkM,YAGd,OAAOM,CACT,CACD,EAvCkB,GAyCnB7U,OAAOyK,OAAOpC,EAAOuM,EAAW,IAG3BnO,CAAO,IAIZuO,EAAc9T,GACY6F,IAC5BD,EAAczO,EAAO0O,IAAKyN,iBAAiBS,OAAO,IAIhDC,EAAgBhU,GACU7I,IAC5BA,EAAMoO,QAAQjP,SAAS6Q,IACrB2M,EAAY3M,EAAMtB,GAAG,GACrB,IAIAoO,EAAgBjU,GACnBlK,IACC,MAAMoe,EAAQA,CACZC,EAEI,CAAA,EACJ5O,KAEA,MAAM/C,EAAO+N,EAAkBpQ,QACzBiU,EAAeD,EAAK3R,MAAQA,EAAK9J,SAEvC,IAAIA,EAAWoY,EAAoBsD,EAAe,GAAED,EAAKjT,IAAM,MAE/D,MAAMmT,EAActC,EAAYqC,EAAc5R,EAAK7J,QAC7C2b,EAAiB/O,GAASvN,QAAQsF,GACtC+W,GAAavO,MAAMuF,GAAMA,EAAEjE,UAAY9J,EAAE8J,YAGrCmN,EAAa,IAAK3W,EAAKyW,IAAcrS,QAE3C,IAAIwS,GACwB,KAAzBL,EAAKnS,SAAU,GACZuS,EACAzW,EAAiBqW,EAAKnS,OAASuS,GAEjCC,GACFjP,GACI7D,KAAKpE,GAAM+T,EAAgB/T,EAAE8J,SAAUF,QAAQuN,kBAChDzc,OAAO0I,SACPpK,SAASgD,IACRkb,EAAa,IAAKA,KAAgBlb,EAAIkb,GAAc,IAI1D9b,EAAWqJ,EAAgBrJ,EAAU8b,GAAc,CAAE,GAErD,MAAME,EACJJ,GACI5S,KACCyF,GACCkK,EAAgBlK,EAAMC,SAAUF,QAAQwN,kBAAoB,KAE/DC,OACA3c,OAAO0I,UAAY,GAElBkU,EACJN,GACI5S,KACCyF,GACCkK,EAAgBlK,EAAMC,SAAUF,QAAQ0N,mBAAqB,KAEhED,OACA3c,OAAO0I,UAAY,GAGlBmU,EAAoBH,GAAkBje,OACxCie,GAAkBtW,QAChB,CAACG,EAAMvF,IAASA,EAAKuF,IACrBiE,EAAK7J,QAEP6J,EAAK7J,OAGHmc,GACY,IAAhBX,EAAKxb,OACDkc,EACAV,EAAKxb,OACLmF,EAAiBqW,EAAKxb,OAAQkc,IAAsB,CAAE,EACtDH,GAAkBje,OAClBoe,EACA,GAGAE,EAAqBH,GAAmBne,OAC1Cme,EAAkBxW,QAAO,CAACG,EAAMvF,IAASA,EAAKuF,IAAOuW,GACrDA,EAEEnc,EAAS2F,EAAiBkE,EAAK7J,OAAQoc,GAEvCvQ,EAAY0C,EAAQiI,gBAAgBxW,GAEpCC,GACU,IAAdub,EAAKvb,KACD4J,EAAK5J,KACLub,EAAKvb,KACLkF,EAAiBqW,EAAKvb,KAAO4J,EAAK5J,MAClC4J,EAAK5J,KAELoc,EAAUpc,EAAQ,IAAGA,IAAS,GAEpC,IAAIqc,GACa,IAAfd,EAAKhd,MACDqL,EAAKrL,MACLgd,EAAKhd,MACL2G,EAAiBqW,EAAKhd,MAAOqL,EAAKrL,OAClCqL,EAAKrL,MAIX,OAFA8d,EAAY3W,EAAiBkE,EAAKrL,MAAO8d,GAElC,CACLvc,WACAC,SACA6L,YACArN,MAAO8d,EACPrc,OACAQ,KAAML,EAAQnB,WAAY,GAAEc,IAAW8L,IAAYwQ,KACnDE,eAAgBf,EAAKe,eACtB,EAGGC,EAAmBA,CACvBhB,EAAyB,CAAA,EACzBiB,KAEA,IAAIpc,EAAOkb,EAAMC,GACbkB,EAAaD,EAAalB,EAAMkB,QAAc/b,EAElD,IAAKgc,EAAY,CACf,IAAIrT,EAAS,CAAA,EAETsT,EAAYpO,EAAQqO,YAAYzP,MAAMxI,IACxC,MAAM6J,EAAQhF,EAAcnB,EAAUhI,EAAKN,SAAU,CACnDwI,GAAI5D,EAAEkF,KACNS,eAAe,EACfE,OAAO,IAGT,QAAIgE,IACFnF,EAASmF,GACF,EAGG,IAGVmO,IACFA,EAAY,IACPA,EACH9S,KAAMT,EAAgBuT,EAAU9S,KAAMR,IAGxCqT,EAAanB,EADbkB,EAAaE,GAGjB,CAEA,MAAME,EAAczD,EAAY/Y,EAAKN,SAAUM,EAAKL,QAC9C8c,EAAgBJ,EAClBtD,EAAYsD,EAAW3c,SAAU2c,EAAW1c,aAC5CU,EACEqc,EAAcL,EAChBnB,EAAMkB,EAAYK,QAClBpc,EAEEsc,EAAQzB,EAAMC,EAAMqB,GAM1B,OAJIE,IACFC,EAAMhK,eAAiB+J,GAGlBC,CAAK,EAGd,OAAI7f,EAAKqU,KACAgL,EAAiBrf,EAAM,IACzBmI,EAAKnI,EAAM,CAAC,YACZA,EAAKqU,OAILgL,EAAiBrf,EAAK,IAI3B8f,EAAiB5V,GACrB6V,OACEvL,qBACGtR,MAEC6W,EAAmB1P,SAAS2V,aAAajG,EAAmB1P,SAMhE,KAJkBoQ,EAAkBpQ,QAAQ/G,OAASJ,EAAKI,QAIvCJ,EAAK1B,QAAS,CAC/B,IAAIqU,eAAEA,KAAmBoK,GAAgB/c,EAErC2S,IACFoK,EAAc,IACTpK,EACHxU,MAAO,IACFwU,EAAexU,MAClBkZ,eAAWhX,EACX+W,eAAgB,IACX2F,EACHpd,OAAQod,EAAYvR,UACpBrN,MAAO,IACF4e,EAAY5e,MACfkZ,eAAWhX,EACX+W,oBAAgB/W,EAChBhB,SAAKgB,OAMT0c,EAAYb,gBAAkBhO,EAAQgO,kBACxCa,EAAY5e,MAAMkZ,UAAYV,EAAmBxP,UAIrD,MAAMlG,EAAQA,KACZlB,EAAQC,EAAK1B,QAAU,UAAY,QACjCye,EAAY3c,KACZ2c,EAAY5e,MACb,EAGCmT,GAAmB,EACrBoG,EAAqBzW,GAErBA,GAEJ,CAIA,OAFAyS,EAAmBvM,QAAUnH,EAAKuR,cAAe,EAE1CuF,EAAqB3P,OAAO,IAIjC6V,EAAyBhW,GAC7B,EACE1I,UACAiT,cACAD,qBACG/B,GACyC,MAC5C,MAAMxS,EAAWke,EAAc1L,GAC/B,OAAOqN,EAAe,IACjB7f,EACHuU,kBACAhT,UACAiT,eACA,IAIA0E,EAAWjP,GACf,EAAGwC,OAAMtB,KAAK,MAAOqH,MAMnB,MAAM5N,EAAWuW,OAAOhQ,GAClB+U,OAA6B,IAATzT,EAAuBA,EAAO0O,OAAO1O,GAC/D,IAAI0T,EAEJ,IACE,IAAIC,IAAK,GAAExb,KACXub,GAAa,CACF,CAAX,MAAO7K,GAAI,CAOb,OALAzQ,GACGsb,GAIIF,EAAuB,IACzBzN,EACH/F,KAAMyT,EACN/U,GAAIvG,GACJ,IAIAyb,GAAcpW,GAClB6V,OACE9F,cACAxK,UACA6E,cAMA,IAAIiM,EACAC,EAGJ,IACE,IAAK,IAAK7e,EAAO0P,KAAU5B,EAAQgR,UAAW,CAC5C,MAAM9C,EAAclO,EAAQ9N,EAAQ,GAC9B8O,EAAQ8K,EAAgBlK,EAAMC,SAE9BoP,EAAcA,CAAC9R,EAAU+R,KAI7B,GAHA/R,EAAIgS,WAAaD,EACjBH,EAAqBA,GAAsB7e,EAEvC2L,EAAWsB,GACb,MAAMA,EAGR,IACE6B,EAAMW,QAAQyP,UAAUjS,EAO1B,CANE,MAAOkS,GAGP,GAFAlS,EAAMkS,EAEFxT,EAAWwT,GACb,MAAMA,CAEV,CAEArR,EAAQ9N,GAAS0P,EAAQ,IACpBA,EACHxL,MAAO+I,EACPW,OAAQ,QACR2N,UAAWtN,KAAKC,MACjB,EAGH,IACMwB,EAAMiM,aACRoD,EAAYrP,EAAMiM,YAAa,gBAG7BjM,EAAMkM,aACRmD,EAAYrP,EAAMkM,YAAa,mBAGjC,MAAMwD,EAAgBpD,GAAajK,SAAWtC,EAAQsC,SAAW,CAAA,EAE3DsN,QACGvQ,EAAMW,QAAQ6P,aAAa,CAChCpe,OAAQwO,EAAMxO,OACd2a,gBAAiBnM,EAAMmM,gBACvBtR,OAAQmF,EAAMnF,OACdoI,UAAWA,EACXZ,QAASqN,EACT9gB,SAAUoB,EAAMpB,SAChBkZ,SAAWnZ,GACTmZ,EAAS,IAAKnZ,EAAM0M,KAAM2E,EAAMzO,WAClCub,oBACM,CAAA,EAEJzK,EAAU,IACXqN,KACAC,GAGLvR,EAAQ9N,GAAS0P,EAAQ,IACpBA,EACHqC,QAASlL,EAAiB6I,EAAMqC,QAASA,GAK7C,CAHE,MAAO9E,GACP8R,EAAY9R,EAAK,eACjB,KACF,CACF,CAQF,CAPE,MAAOA,GACP,GAAItB,EAAWsB,GAEb,OADK0F,GAAS6E,EAASvK,GAChBa,EAGT,MAAMb,CACR,CAEA,MAAMsS,EAAuBzR,EAAQ9K,MAAM,EAAG6b,GACxCW,EAAgC,GA+GtC,OA7GAD,EAAqB1gB,SAAQ,CAAC6Q,EAAO1P,KACnCwf,EAAcpgB,KACZ,WACE,MAAMqgB,EAAqBD,EAAcxf,EAAQ,GAC3C8O,EAAQ8K,EAAgBlK,EAAMC,SAEpC,GAAID,EAAM+L,WACR,OAAOtN,EAAczO,EAAOgQ,EAAMtB,KAAKkC,YAGzC,MAAMoP,EAAoBzS,KACpBtB,EAAWsB,KACR0F,GACH6E,EAASvK,IAEJ,GAwEX,IAAIqD,EAEJxC,EAAQ9N,GAAS0P,EAAQ,IACpBA,EACH+L,YAAY,EACZM,UAAW9N,KAAKC,MAChBwN,SAAS,GAGXpL,EA5Ea8N,WACX,IACE,MAAMuB,EAAoB3d,QAAQ4d,IAChCxS,EAAenD,KAAImU,UACjB,MAAM5N,EAAY1B,EAAMW,QAAQ1N,GAE3ByO,GAAmBmC,eACfnC,EAAkBmC,SAC3B,KAIEkN,EAAgB/Q,EAAMW,QAAQ6L,OAAO,CACzC/Q,OAAQmF,EAAMnF,OACdrJ,OAAQwO,EAAMxO,OACdyR,UAAWA,EACX8M,qBACA5D,gBAAiBnM,EAAMmM,gBACvB9J,QAASrC,EAAMqC,QACfzT,SAAUoB,EAAMpB,SAChBkZ,SAAWnZ,GACTmZ,EAAS,IAAKnZ,EAAM0M,KAAM2E,EAAMzO,cAG7B6e,EAAGC,SAAuB/d,QAAQ4d,IAAI,CAC3CD,EACAE,IAEF,GAAKjB,EAAgBtG,IAAgB,aAAasG,EAElD9Q,EAAQ9N,GAAS0P,EAAQ,IACpBA,EACHxL,WAAOtC,EACPgM,OAAQ,UACR6N,YAAY,EACZF,UAAWtN,KAAKC,MAoBpB,CAlBE,MAAOhK,GACP,GAAK0a,EAAgBtG,IAAgB,aAAasG,EAClD,GAAIc,EAAiBxb,GAAQ,OAE7B,IACE4K,EAAMW,QAAQyP,UAAUhb,EAI1B,CAHE,MAAO8b,GAEP,GADA9b,EAAQ8b,EACJN,EAAiBM,GAAe,MACtC,CAEAlS,EAAQ9N,GAAS0P,EAAQ,IACpBA,EACHxL,QACA0J,OAAQ,QACR6N,YAAY,EACZF,UAAWtN,KAAKC,MAEpB,CAEKyE,GACHlO,GAAU2U,IAAO,IACZA,EACHtL,QAASsL,EAAEtL,QAAQ7D,KAAKpE,GACtBA,EAAEuI,KAAOsB,EAAMtB,GAAKsB,EAAQ7J,OAGlC,EAYYyV,GAEdxN,EAAQ9N,GAAS0P,EAAQ,IACpBA,EACHY,qBAGIA,CACP,EAtGD,GAuGD,UAGGtO,QAAQ4d,IAAIJ,GACX1R,CAAO,IAIZwN,GAAO/S,GAA0B6V,UACrC,MAAM7F,EAAU,IAAIvW,SAAcoc,MAAOnc,EAASge,KAChD,MAAM1e,EAAOuX,EAAkBpQ,QACzBwX,EAAexgB,EAAMmO,iBACrBsS,EAAgBD,EAAcve,OAASJ,EAAKI,KAClD,IAAIid,EAGJrC,EAAc7c,GAEduY,EAAOF,KAAK,CACVhW,KAAM,eACNwU,aAAc2J,EACdpJ,WAAYvV,EACZ8U,YAAa8J,IAIf,IAAIrS,EAAkCwM,EACpC/Y,EAAKN,SACLM,EAAKL,OACL,CACEkf,OAAO,IAIX,MAAMC,EAAkB3gB,EAAMoO,QAG9BrJ,GAAU2U,IAAO,IACZA,EACHxL,OAAQ,UACRtP,SAAUiD,EACVuM,cAGF,IACE,UAEQ6Q,GAAY,CAChB7Q,UACAwK,YAAaA,IAAMA,EAAYC,IAIjC,CAFA,MAAOtL,GAEP,CAIF,GAAK2R,EAAgBtG,EAAYC,GAC/B,OAAOqG,EAGT,MAAM0B,EAAkBD,EAAgB9f,QACrC6N,IAAQ1O,EAAMqO,eAAewS,SAASnS,KAEnCoS,EAAmB9gB,EAAMqO,eAAexN,QAC3C6N,IAAQiS,EAAgBE,SAASnS,KAclC,CACE,CAACkS,EAAiB,WAClB,CAACE,EAAkB,WACnB,CAfoBH,EAAgB9f,QAAQ6N,GAC9C1O,EAAMqO,eAAewS,SAASnS,KAcV,iBAEpBvP,SAAQ,EAAEiP,EAAS2S,MACnB3S,EAAQjP,SAAS6Q,IACfkK,EAAgBlK,EAAMC,SAAUF,QAAQgR,KAAQ/Q,EAAM,GACtD,IAGJuI,EAAOF,KAAK,CACVhW,KAAM,SACNwU,aAAc2J,EACdpJ,WAAYvV,EACZ8U,YAAa8J,IAGfle,GAQF,CAPE,MAAOgL,GAEP,GAAK2R,EAAgBtG,EAAYC,GAC/B,OAAOqG,EAGTqB,EAAOhT,EACT,KAKF,OAFAoL,EAAqB3P,QAAU6P,EAExBF,EAAqB3P,OAAO,IAG/BgY,GAAenY,GACnB6V,MAAOuC,EAAiCjhB,EAAMpB,YAC5C,IAAIiD,EAAOib,EAAcmE,GAErB7S,EAAUwM,EAAY/Y,EAAKN,SAAUM,EAAKL,OAAQ,CACpD+Z,cAAc,IAShB,aANM0D,GAAY,CAChB7Q,UACA6E,SAAS,EACT2F,YAAaA,KACf,IAEO,CAACnS,EAAK2H,GAAWA,EAAQ,IAI9BqE,GAAY5J,GAA4CmU,IAO5D,MAAMjT,GACJA,EACAkJ,QAASiO,EACThO,aAAciO,EAAgBrO,cAC9BA,EAAaC,SACbA,EAAQL,OACRA,EAAMvS,QACNA,EAAOiT,YACPA,EAAWD,gBACXA,GACE6J,EAEJ,IAEE,OADA,IAAIgC,IAAK,GAAEjV,KACJ,CACL1H,KAAM,WACNJ,KAAM8H,EAEG,CAAX,MAAOmK,GAAI,CAEb,MAAMkN,EAAWpE,EACXnb,EAAOib,EAAcsE,GAErBnO,EAAUiO,GAAenR,EAAQsR,eACjCnO,EAAeiO,GAAoBpR,EAAQgI,qBAAuB,EAGlEuJ,EAAmBlI,EAAkBpQ,QAAQzH,SAASkJ,MAAM,KAE5D8W,EADgB1f,EAAKN,SAASkJ,MAAM,KACH+W,OACrC,CAACrb,EAAG6B,IAAM7B,IAAMmb,EAAiBtZ,KAG7ByZ,EAAW3O,GAAe4O,MAC5BtI,EAAkBpQ,QAAQzH,WAAaM,EAAKN,SAC5CggB,EACEI,GAAW7O,GAAe8O,aAC5BxI,EAAkBpQ,QAAQvH,OAASI,EAAKJ,KAEtCogB,IACJ/O,GAAegP,eAAiB,IAC5BrZ,EAAiB2Q,EAAkBpQ,QAAQxH,OAAQK,EAAKL,QAkE9D,MAAO,CACLa,KAAM,WACNR,OACA8R,YA9CmBO,IACfjB,GACF+N,GAAaI,GAAiBW,OAAOxU,IACnCtI,QAAQ+c,KAAKzU,GACbtI,QAAQ+c,KAAKlU,EAAe,GAEhC,EAyCA4F,YA/DmBQ,IAEhBnB,GA9jCT,SAAqBmB,GACnB,SAAUA,EAAE+N,SAAW/N,EAAEgO,QAAUhO,EAAEiO,SAAWjO,EAAEkO,SACpD,CA6jCSC,CAAYnO,IACZA,EAAEG,kBACD3B,GAAqB,UAAXA,GACC,IAAbwB,EAAEoO,SAEFpO,EAAE7V,iBAGFogB,EAAe,IAAK5c,EAAM1B,UAASiT,cAAaD,oBAClD,EAoDAS,YAhCmBM,IACnB,MAAMxB,EAAUwB,EAAExB,QAAU,GAE5B,GAAIO,EAAS,CACX,GAAIP,EAAO6P,eACT,OAGF7P,EAAO6P,eAAiBC,YAAW,KACjC9P,EAAO6P,eAAiB,KACxBvB,GAAaI,GAAiBW,OAAOxU,IACnCtI,QAAQ+c,KAAKzU,GACbtI,QAAQ+c,KAAKlU,EAAe,GAC5B,GACDoF,EACL,GAkBAW,YAfmBK,IACnB,MAAMxB,EAAUwB,EAAExB,QAAU,GAExBA,EAAO6P,iBACT5D,aAAajM,EAAO6P,gBACpB7P,EAAO6P,eAAiB,KAC1B,EAUAzO,iBAzCwBI,IACxB8M,GAAaI,GAAiBW,OAAOxU,IACnCtI,QAAQ+c,KAAKzU,GACbtI,QAAQ+c,KAAKlU,EAAe,GAC5B,EAsCFiG,SAtEe0N,GAAYE,GAAYE,EAuEvC9O,WACD,IAGH7O,EAAMgF,iBAAgB,KACpB,MAAMuZ,EAAQ7gB,EAAQjC,WAAU,KAC9ByZ,EAAkBpQ,QAAUrH,EAAcyX,EAAkBpQ,SAExDhJ,EAAMpB,WAAawa,EAAkBpQ,SACvCuQ,GAAqB,KACnB,IACEqC,IAGF,CAFE,MAAOrO,GACPtI,QAAQT,MAAM+I,EAChB,IAEJ,IAGImV,EAAe5F,EAAc,CACjCtb,QAAQ,EACRqJ,QAAQ,EACRpJ,MAAM,EACNzB,OAAO,IAOT,OAJIA,EAAMpB,SAASqD,OAASygB,EAAazgB,MACvCwc,EAAe,IAAKiE,EAAcviB,SAAS,IAGtC,KACLsiB,GAAO,CACR,GACA,CAAC7gB,IAEJ,MAAM+gB,GAAcze,EAAM6E,QAAO,GAE7B4Z,GAAY3Z,UACd2Z,GAAY3Z,SAAU,EACtBuQ,GAAqB,KACnB,IACEqC,IAGF,CAFE,MAAOrO,GACPtI,QAAQT,MAAM+I,EAChB,MAIJ,MAAM2D,GAAarI,GACjB,CAACjK,EAAUD,KACTC,EAAW,IACNA,EACHmL,GAAInL,EAASmL,GACT4P,EAAqB/a,EAASyM,MAAQ,GAAezM,EAASmL,SAC9D7H,GAGN,MAAML,EAAOib,EAAcle,GAE3B,GAAID,GAAMwS,SAA4B,YAAjBnR,EAAMkO,OACzB,OAAO,EAGT,MAAM0U,EAAejkB,GAAMwS,QACvBiI,EAAkBpQ,QAClBhJ,EAAMmO,iBAIV,IAAKyU,EACH,OAAO,EAGT,MAAM5S,EAAQhF,EAAcnB,EAAU+Y,EAAarhB,SAAU,IACxD5C,EACHoL,GAAIlI,EAAKN,WAGX,QAAKyO,IAIDA,IAAUrR,GAAMmjB,eAAiB,KAC5BrZ,EAAiBma,EAAaphB,OAAQK,EAAKL,SAC9CwO,EAICA,EAAK,IAIV6S,GAAgD,CACpD3K,UAAWK,EAAOL,UAClBJ,WACArF,aACAzS,QACAkR,cACAhC,aACAa,UACAnO,UACAga,QACAkB,gBACAnd,UAAW4Y,EAAO5Y,UAClB4V,sBAGF,OACErR,EAAAC,cAACwJ,EAAciC,SAAQ,CAACvF,MAAOwY,IAC7B3e,EAAAC,cAAC8K,GAAO,MAGd,sBMjsCO,SAA2BlL,GAEhC,OADAuR,GAAqBvR,GACd,IACT,qGhBqCA,WACE,OAAO3C,EAAqB,CAC1BC,QAAS,IAAMC,OAAO1C,SAAS6C,KAAK0B,UAAU,GAC9C1C,WAAYV,GAAQ,IAAIA,KAE5B,wBACA,SAA6BpB,EAAO,CAClCmkB,eAAgB,CAAC,OAEjB,MAAM1D,EAAUzgB,EAAKmkB,eACrB,IAAIxiB,EAAQ3B,EAAKokB,cAAgB3D,EAAQ9f,OAAS,EAC9C0jB,EAAe,CACjB9hB,IAAKC,KAGP,OAAOzC,EAAc,CACnBG,YAFkB,IAAM8C,EAAcyd,EAAQ9e,GAAQ0iB,GAGtD9iB,UAAW,CAACH,EAAMC,KAChBgjB,EAAehjB,EACfof,EAAQ1f,KAAKK,GACbO,GAAO,EAETF,aAAc,CAACL,EAAMC,KACnBgjB,EAAehjB,EACfof,EAAQ9e,GAASP,CAAI,EAEvBQ,KAAM,KACJD,GAAO,EAETE,QAAS,KACPF,EAAQ8C,KAAKC,IAAI/C,EAAQ,EAAG8e,EAAQ9f,OAAS,EAAE,EAEjDe,GAAIuC,GAAKtB,OAAOM,QAAQvB,GAAGuC,GAC3BnC,WAAYV,GAAQA,GAExB,oBc2bO,SAKLpB,GAIA,OAAOA,CACT,2PLzVO,SAGLwD,EAAsBjB,GACtB,OAAOwd,SAAUzV,WACQ9G,KACPjB,GAAO,cAAc+H,EAEzC,uBWxXO,SAILga,EACAC,GAIA,IAAItS,EAEJ,MAAMgL,EAAOA,KACNhL,IACHA,EAAcqS,KAGTrS,GAGHuS,EAAWjf,EAAMkf,MAAK1E,UAGnB,CACL2E,eAH0BzH,KACDsH,GAAc,eAO3C,OAFEC,EAAiBlQ,QAAU2I,EAEtBuH,CACT,uIdbO,SAILxkB,GAEA,OADEA,EAAasN,YAAa,EACrBtN,CACT,+EQ8iBO,WACL,OAIEoR,GAoBO,IAAIuC,GAAUvC,EAEzB,8BV3VO,SAAoBuT,EAASC,GAClC,GAAI5b,OAAO6b,GAAGF,EAAMC,GAClB,OAAO,EAGT,GACkB,iBAATD,GACE,OAATA,GACgB,iBAATC,GACE,OAATA,EAEA,OAAO,EAGT,MAAME,EAAQ9b,OAAOX,KAAKsc,GAC1B,GAAIG,EAAMnkB,SAAWqI,OAAOX,KAAKuc,GAAMjkB,OACrC,OAAO,EAGT,IAAK,IAAI0I,EAAI,EAAGA,EAAIyb,EAAMnkB,OAAQ0I,IAChC,IACGL,OAAOW,UAAUC,eAAeC,KAAK+a,EAAME,EAAMzb,MACjDL,OAAO6b,GAAGF,EAAKG,EAAMzb,IAAgBub,EAAKE,EAAMzb,KAEjD,OAAO,EAGX,OAAO,CACT,0FehQO,SAGL8P,GACA,OAAOA,CAQT,sGR6PO,SAAsCnZ,GAG3C,MAAM+kB,EAAiBxf,EAAM8K,WAAWW,IAExC,OAAOf,GAAe,CACpBE,OAAS9O,IACP,MAAMoO,EAAUpO,EAAMoO,QAAQ9K,MAC5BtD,EAAMoO,QAAQuV,WAAWxd,GAAMA,EAAEuI,KAAOgV,EAAe,IAAIhV,MAE7D,OAAO/P,GAAMmQ,OAASnQ,EAAKmQ,OAAOV,GAAYA,CAAa,GAGjE,gBQjTO,SAGLwV,GACA,MAAM9L,SAAEA,GAAajJ,KACfmB,EAAQT,GAAS,CACrBiC,QAAQ,IAEV,OAAOtN,EAAMoL,aAOT3Q,GAEOmZ,EAAS,CACdzM,KAAM1M,GAAMoL,GAAKiG,EAAMzO,cAAWW,KAC/B0hB,KACCjlB,KAGR,GAEJ,mCfyRO,SAOLA,GAIA,OAAO4Q,GAAS,IACV5Q,EACJmQ,OAASkB,GACPrR,GAAMmQ,OACFnQ,EAAKmQ,OAAOkB,EAAMqC,SAClBrC,EAAMqC,SAEhB"}
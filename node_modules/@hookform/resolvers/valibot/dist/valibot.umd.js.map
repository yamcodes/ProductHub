{"version":3,"file":"valibot.umd.js","sources":["../src/valibot.ts"],"sourcesContent":["import { toNestErrors } from '@hookform/resolvers';\nimport type { Resolver } from './types';\nimport {\n  BaseSchema,\n  BaseSchemaAsync,\n  ValiError,\n  parse,\n  parseAsync,\n} from 'valibot';\nimport { FieldErrors, FieldError, appendErrors } from 'react-hook-form';\nconst parseErrors = (\n  valiErrors: ValiError,\n  validateAllFieldCriteria: boolean,\n): FieldErrors => {\n  const errors: Record<string, FieldError> = {};\n  for (; valiErrors.issues.length; ) {\n    const error = valiErrors.issues[0];\n    if (!error.path) {\n      continue;\n    }\n    const _path = error.path.map(({ key }) => key).join('.');\n\n    if (!errors[_path]) {\n      errors[_path] = { message: error.message, type: error.validation };\n    }\n\n    if (validateAllFieldCriteria) {\n      const types = errors[_path].types;\n      const messages = types && types[error.validation];\n\n      errors[_path] = appendErrors(\n        _path,\n        validateAllFieldCriteria,\n        errors,\n        error.validation,\n        messages\n          ? ([] as string[]).concat(messages as string[], error.message)\n          : error.message,\n      ) as FieldError;\n    }\n\n    valiErrors.issues.shift();\n  }\n\n  return errors;\n};\n\nexport const valibotResolver: Resolver =\n  (schema, schemaOptions, resolverOptions = {}) =>\n  async (values, _, options) => {\n    try {\n      const schemaOpts = Object.assign(\n        {},\n        {\n          abortEarly: false,\n          abortPipeEarly: false,\n        },\n        schemaOptions,\n      );\n\n      const parsed =\n        resolverOptions.mode === 'sync'\n          ? parse(schema as BaseSchema, values, schemaOpts)\n          : await parseAsync(\n              schema as BaseSchema | BaseSchemaAsync,\n              values,\n              schemaOpts,\n            );\n\n      return {\n        values: resolverOptions.raw ? values : parsed,\n        errors: {} as FieldErrors,\n      };\n    } catch (error) {\n      if (error instanceof ValiError) {\n        return {\n          values: {},\n          errors: toNestErrors(\n            parseErrors(\n              error,\n              !options.shouldUseNativeValidation &&\n                options.criteriaMode === 'all',\n            ),\n            options,\n          ),\n        };\n      }\n\n      throw error;\n    }\n  };\n"],"names":["parseErrors","valiErrors","validateAllFieldCriteria","errors","issues","length","error","path","_path","map","_ref","key","join","message","type","validation","types","messages","appendErrors","concat","shift","schema","schemaOptions","resolverOptions","values","_","options","Promise","resolve","_temp2","parsed","raw","schemaOpts","Object","assign","abortEarly","abortPipeEarly","mode","parse","parseAsync","then","_catch","ValiError","toNestErrors","shouldUseNativeValidation","criteriaMode","e","reject"],"mappings":"qaAUA,IAAMA,EAAc,SAClBC,EACAC,GAGA,IADA,IAAMC,EAAqC,CAAA,EACpCF,EAAWG,OAAOC,QAAU,CACjC,IAAMC,EAAQL,EAAWG,OAAO,GAChC,GAAKE,EAAMC,KAAX,CAGA,IAAMC,EAAQF,EAAMC,KAAKE,IAAI,SAAAC,UAAMA,EAAHC,GAAa,GAAEC,KAAK,KAMpD,GAJKT,EAAOK,KACVL,EAAOK,GAAS,CAAEK,QAASP,EAAMO,QAASC,KAAMR,EAAMS,aAGpDb,EAA0B,CAC5B,IAAMc,EAAQb,EAAOK,GAAOQ,MACtBC,EAAWD,GAASA,EAAMV,EAAMS,YAEtCZ,EAAOK,GAASU,EAAAA,aACdV,EACAN,EACAC,EACAG,EAAMS,WACNE,EACK,GAAgBE,OAAOF,EAAsBX,EAAMO,SACpDP,EAAMO,QAEb,CAEDZ,EAAWG,OAAOgB,OAtBjB,CAuBF,CAED,OAAOjB,CACT,oBAGE,SAACkB,EAAQC,EAAeC,GAAoB,gBAApBA,IAAAA,EAAkB,CAAE,GAAA,SACrCC,EAAQC,EAAGC,GAAW,IAAA,OAAAC,QAAAC,gCACvB,WAAA,SAAAC,EAUIC,GASN,MAAO,CACLN,OAAQD,EAAgBQ,IAAMP,EAASM,EACvC3B,OAAQ,GACR,CArBF,IAAM6B,EAAaC,OAAOC,OACxB,CAAE,EACF,CACEC,YAAY,EACZC,gBAAgB,GAElBd,GAI+B,MAAN,SAAzBC,EAAgBc,KAAeR,EAC3BS,EAAKA,MAACjB,EAAsBG,EAAQQ,IAAWL,QAAAC,QACzCW,EAAAA,WACJlB,EACAG,EACAQ,IACDQ,KAAAX,EAMR,6DAxB0BY,CACvB,EAuBH,SAAQnC,GACP,GAAIA,aAAiBoC,EAAAA,UACnB,MAAO,CACLlB,OAAQ,GACRrB,OAAQwC,EAAAA,aACN3C,EACEM,GACCoB,EAAQkB,2BACkB,QAAzBlB,EAAQmB,cAEZnB,IAKN,MAAMpB,CACP,GACH,CAAC,MAAAwC,UAAAnB,QAAAoB,OAAAD,EAAA,CAAA,CAAA"}
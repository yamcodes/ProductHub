import{toNestErrors as o}from"@hookform/resolvers";import{parse as s,parseAsync as t,ValiError as e}from"valibot";import{appendErrors as a}from"react-hook-form";const r=(o,s)=>{const t={};for(;o.issues.length;){const e=o.issues[0];if(!e.path)continue;const r=e.path.map(({key:o})=>o).join(".");if(t[r]||(t[r]={message:e.message,type:e.validation}),s){const o=t[r].types,i=o&&o[e.validation];t[r]=a(r,s,t,e.validation,i?[].concat(i,e.message):e.message)}o.issues.shift()}return t},i=(a,i,n={})=>async(c,l,m)=>{try{const o=Object.assign({},{abortEarly:!1,abortPipeEarly:!1},i),e="sync"===n.mode?s(a,c,o):await t(a,c,o);return{values:n.raw?c:e,errors:{}}}catch(s){if(s instanceof e)return{values:{},errors:o(r(s,!m.shouldUseNativeValidation&&"all"===m.criteriaMode),m)};throw s}};export{i as valibotResolver};
//# sourceMappingURL=valibot.modern.mjs.map
